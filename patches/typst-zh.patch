diff --git a/docs/changelog.md b/docs/changelog.md
index 25c685b3..88b90214 100644
--- a/docs/changelog.md
+++ b/docs/changelog.md
@@ -1,1289 +1,1006 @@
 ---
 description: |
-  Learn what has changed in the latest Typst releases and move your documents
-  forward.
+  了解最新 Typst 版本的变化并将您的文档推进。
 ---

-# Changelog
-## Version 0.10.0 (December 4, 2023) { #v0.10.0 }
-- Bibliography management
-  - Added support for citation collapsing (e.g. `[[1]-[3]]` instead of
-    `[[1], [2], [3]]`) if requested by a CSL style
-  - Fixed bug where an additional space would appear after a group of citations
-  - Fixed link show rules for links in the bibliography
-  - Fixed show-set rules on citations
-  - Fixed bibliography-related crashes that happened on some systems
-  - Corrected name of the GB/T 7714 family of styles from 7114 to 7714
-  - Fixed missing title in some bibliography styles
-  - Fixed printing of volumes in some styles
-  - Fixed delimiter order for contributors in some styles (e.g. APA)
-  - Fixed behavior of alphanumeric style
-  - Fixed multiple bugs with GB/T 7714 style
-  - Fixed escaping in Hayagriva values
-  - Fixed crashes with empty dates in Hayagriva files
-  - Fixed bug with spacing around math blocks
-  - Fixed title case formatting after verbatim text and apostrophes
-  - Page ranges in `.bib` files can now be arbitrary strings
-  - Multi-line values in `.bib` files are now parsed correctly
-  - Entry keys in `.bib` files now allow more characters
-  - Fixed error message for empty dates in `.bib` files
-  - Added support for years of lengths other than 4 without leading zeros in
-    `.bib` files
-  - More LaTeX commands (e.g. for quotes) are now respected in `.bib` files
-
-- Visualization
-  - Added support for [patterns]($pattern) as fills and strokes
-  - The `alpha` parameter of the [`components`]($color.components) function on
-    colors is now a named parameter (**Breaking change**)
-  - Added support for the [Oklch]($color.oklch) color space
-  - Improved conversions between colors in different color spaces
-  - Removed restrictions on [Oklab]($color.oklab) chroma component
-  - Fixed [clipping]($block.clip) on blocks and boxes without a stroke
-  - Fixed bug with [gradients]($gradient) on math
-  - Fixed bug with gradient rotation on text
-  - Fixed bug with gradient colors in PDF
-  - Fixed relative base of Oklab chroma ratios
-  - Fixed Oklab color negation
-
-- Text and Layout
-  - CJK text can now be emphasized with the `*` and `_` syntax even when there
-    are no spaces
-  - Added basic i18n for Greek and Estonian
-  - Improved default [figure caption separator]($figure.caption.separator) for
-    Chinese, French, and Russian
-  - Changed default [figure supplement]($figure.supplement) for Russian to
-    short form
-  - Fixed [CJK-Latin-spacing]($text.cjk-latin-spacing) before line breaks
-    and in [`locate`]($locate) calls
-  - Fixed line breaking at the end of links
-
-- Math
-  - Added [`mid`]($math.mid) function for scaling a delimiter up to the height
-    of the surrounding [`lr`]($math.lr) group
-  - The [`op`]($math.op) function can now take any content, not just strings
-  - Improved documentation for [math alignment]($category/math/#alignment)
-  - Fixed swallowing of trailing comma when a symbol is used in a function-like
-    way (e.g. `pi(a,b,)`)
-
-- Scripting
-  - Any non-identifier dictionary key is now interpreted as an expression: For
-    instance, `{((key): value)}` will create a dictionary with a dynamic key
-  - The [`stroke`]($stroke) type now has a constructor that converts a value to
-    a stroke or creates one from its parts
-  - Added constructor for [`arguments`]($arguments) type
-  - Added [`calc.div-euclid`]($calc.div-euclid) and
-    [`calc.rem-euclid`]($calc.rem-euclid) functions
-  - Fixed equality of [`arguments`]($arguments)
-  - Fixed [`repr`]($repr) of [`cmyk`]($color.cmyk) colors
-  - Fixed crashes with provided elements like figure captions, outline entries,
-    and footnote entries
-
-- Tooling and Diagnostics
-  - Show rules that match on their own output now produce an appropriate error
-    message instead of a crash (this is a first step, in the future they will
-    just work)
-  - Too highly or infinitely nested layouts now produce error messages instead
-    of crashes
-  - Added hints for invalid identifiers
-  - Added hint when trying to use a manually constructed footnote or outline
-    entry
-  - Added missing details to autocompletions for types
-  - Improved error message when passing a named argument where a positional one
-    is expected
-  - Jump from click now works on raw blocks
-
-- Export
-  - PDF compilation output is now again fully byte-by-byte reproducible if the
-    document's [`date`]($document.date) is set manually
-  - Fixed color export in SVG
-  - Fixed PDF metadata encoding of multiple [authors]($document.author)
-
-- Command line interface
-  - Fixed a major bug where `typst watch` would confuse files and fail to pick
-    up updates
-  - Fetching of the release metadata in `typst update` now respects proxies
-  - Fixed bug with `--open` flag on Windows when the path contains a space
-  - The `TYPST_FONT_PATHS` environment variable can now contain multiple paths
-    (separated by `;` on Windows and `:` elsewhere)
-  - Updated embedded New Computer Modern fonts to version 4.7
-  - The watching process doesn't stop anymore when the main file contains
-    invalid UTF-8
-
-- Miscellaneous Improvements
-  - Parallelized image encoding in PDF export
-  - Improved the internal representation of content for improved performance
-  - Optimized introspection (query, counter, etc.) performance
-  - The [document title]($document.title) can now be arbitrary content instead
-    of just a string
-  - The [`number-align`]($enum.number-align) parameter on numbered lists now
-    also accepts vertical alignments
-  - Fixed selectors on [quote]($quote) elements
-  - Fixed parsing of `[#return]` expression in markup
-  - Fixed bug where inline equations were displayed in equation outlines
-  - Fixed potential CRLF issue in [`raw`]($raw) blocks
-  - Fixed a bug where Chinese numbering couldn't exceed the number 255
-
-- Development
-  - Merged `typst` and `typst-library` and extracted `typst-pdf`, `typst-svg`,
-    and `typst-render` into separate crates
-  - The Nix flake now includes the git revision when running `typst --version`
+# 更新日志
+
+注：本页面由 ChatGPT 辅助翻译，可能会有错漏。
+
+## 版本 0.10.0（2023年12月4日）{#v0.10.0}
+- 参考文献管理
+  - 添加了对引用合并的支持（例如 `[[1]-[3]]` 而不是 `[[1]，[2]，[3]]`），如果由 CSL 样式请求
+  - 修复了一组引用之后会出现额外空格的错误
+  - 修复了参考文献中链接的显示规则
+  - 修复了对引用的显示设置规则
+  - 修复了在某些系统上发生的与参考文献相关的崩溃
+  - 更正了 GB/T 7714 系列样式的名称，从 7114 更正为 7714
+  - 修复了某些参考文献样式中缺少标题的问题
+  - 修复了某些样式中卷的打印问题
+  - 修复了某些样式中贡献者分隔符的顺序问题（例如 APA）
+  - 修复了字母数字样式的行为
+  - 修复了 GB/T 7714 样式的多个错误
+  - 修复了 Hayagriva 值中的转义问题
+  - 修复了 Hayagriva 文件中空日期导致的崩溃
+  - 修复了数学块周围的间距问题
+  - 修复了在 verbatim 文本和撇号之后的标题大小写格式问题
+  - `.bib` 文件中的页面范围现在可以是任意字符串
+  - `.bib` 文件中的多行值现在被正确解析
+  - `.bib` 文件中的条目键现在允许更多字符
+  - 修复了对空日期在 `.bib` 文件中的错误消息
+  - 添加了对 `.bib` 文件中无前导零的长度年份的支持
+  - `.bib` 文件中现在尊重更多 LaTeX 命令（例如引号）
+
+- 可视化
+  - 添加了对 [图案]($pattern) 作为填充和描边的支持
+  - [`color.components`]($color.components) 函数的颜色参数中的 `alpha` 现在是一个命名参数（**重大变更**）
+  - 添加了对 [Oklch]($color.oklch) 颜色空间的支持
+  - 改进了不同颜色空间之间的颜色转换
+  - 删除了对 [Oklab]($color.oklab) 色度分量的限制
+  - 修复了在没有描边的块和框上的 [裁剪]($block.clip) 问题
+  - 修复了数学上的 [渐变]($gradient) 问题
+  - 修复了文本中渐变旋转的问题
+  - 修复了 PDF 中渐变颜色的问题
+  - 修复了相对基准的 Oklab 色度比
+  - 修复了 Oklab 颜色否定
+
+- 文本和布局
+  - CJK 文本现在即使没有空格也可以使用 `*` 和 `_` 语法强调
+  - 为希腊语和爱沙尼亚语添加了基本的国际化支持
+  - 改进了中文、法文和俄文的默认 [图题分隔符]($figure.caption.separator)
+  - 将俄文的默认 [图题补充]($figure.supplement) 更改为短形式
+  - 修复了在 [CJK-Latin-spacing]($text.cjk-latin-spacing) 和 [`locate`]($locate) 调用中的行尾断行
+  - 修复了链接末尾的断行问题
+
+- 数学
+  - 添加了 [`mid`]($math.mid) 函数，用于将定界符缩放到周围 [`lr`]($math.lr) 组的高度
+  - [`op`]($math.op) 函数现在可以接受任何内容，而不仅仅是字符串
+  - 改进了 [数学对齐]($category/math/#alignment) 的文档
+  - 当符号以类似函数的方式使用时（例如 `pi(a,b,)`），不再吞咽尾随的逗号
+
+- 脚本
+  - 现在，任何非标识符的字典键都被解释为表达式：例如 `{((key): value)}` 将创建一个带有动态键的字典
+  - [`stroke`]($stroke) 类型现在有一个构造函数，可以将值转换为描边或根据其部分创建描边
+  - 为 [`arguments`]($arguments) 类型添加了构造函数
+  - 添加了 [`calc.div-euclid`]($calc.div-euclid) 和 [`calc.rem-euclid`]($calc.rem-euclid) 函数
+  - 修复了 [`arguments`]($arguments) 的相等性
+  - 修复了 [`color.cmyk`]($color.cmyk) 颜色的 [`repr`]($repr)
+
+- 工具和诊断
+  - 现在，匹配其自身输出的显示规则将生成适当的错误消息，而不是崩溃（这是第一步，在将来它们将正常工作）
+  - 现在，过于嵌套或无限嵌套的布局将生成错误消息，而不是崩溃
+  - 为无效标识符添加了提示
+  - 尝试使用手动构建的脚注或大纲条目时添加了提示
+  - 对类型的自动完成添加了缺失的详细信息
+  - 在传递命名参数而期望位置参数时，改进了错误消息
+  - 现在，在原始块上单击可以跳转
+
+- 导出
+  - 如果手动设置了文档的 [`date`]($document.date)，则 PDF 编译输出现在再次是完全逐字可复制的
+  - 修复了 SVG 中的颜色导出
+  - 修复了多个 [作者]($document.author) 的 PDF 元数据编码
+
+- 命令行界面
+  - 修复了 `typst watch` 会混淆文件并未能捕捉更新的重大错误
+  - `typst update` 中的发布元数据获取现在尊重代理
+  - 修复了在路径中包含空格时 Windows 上 `--open` 标志的错误
+  - `TYPST_FONT_PATHS` 环境变量现在可以包含多个路径（在 Windows 上用 `;` 分隔，在其他地方用 `:` 分隔）
+  - 将嵌入的 New Computer Modern 字体更新到版本 4.7
+  - 当主文件包含无效 UTF-8 时，监视进程不再停止
+
+- 杂项改进
+  - 并行化 PDF 导出中的图像编码
+  - 改进了用于提高性能的内容的内部表示
+  - 优化了内省（查询、计数等）性能
+  - [文档标题]($document.title) 现在可以是任意内容，而不仅仅是字符串
+  - 编号列表上的 [`number-align`]($enum.number-align) 参数现在也接受垂直对齐
+  - 修复了 [引用]($quote) 元素上的选择器
+  - 修复了在标记中解析 `[#return]` 表达式的问题
+  - 修复了内联方程显示在方程大纲中的问题
+  - 修复了 [`raw`]($raw) 块中的潜在 CRLF 问题
+  - 修复了中文编号无法超过数字 255 的错误
+
+- 开发
+  - 合并了 `typst` 和 `typst-library`，并将 `typst-pdf`、`typst-svg` 和 `typst-render` 提取到独立的 crate 中
+  - Nix flake 现在在运行 `typst --version` 时包含 git 修订版本

 <contributors from="v0.9.0" to="v0.10.0" />

-## Version 0.9.0 (October 31, 2023) { #v0.9.0 }
-- Bibliography management
-  - New bibliography engine based on [CSL](https://citationstyles.org/)
-    (Citation Style Language). Ships with about 100 commonly used citation
-    styles and can load custom `.csl` files.
-  - Added new [`form`]($cite.form) argument to the `cite` function to produce
-    different forms of citations (e.g. for producing a citation suitable for
-    inclusion in prose)
-  - The [`cite`]($cite) function now takes only a single label/key instead of
-    allowing multiple. Adjacent citations are merged and formatted according to
-    the citation style's rules automatically. This works both with the reference
-    syntax and explicit calls to the `cite` function. (**Breaking change**)
-  - The `cite` function now takes a [label]($label) instead of a string
-    (**Breaking change**)
-  - Added [`full`]($bibliography.full) argument to bibliography function to
-    print the full bibliography even if not all works were cited
-  - Bibliography entries can now contain Typst equations (wrapped in `[$..$]`
-    just like in markup), this works both for `.yml` and `.bib` bibliographies
-  - The hayagriva YAML format was improved. See its
-    [changelog](https://github.com/typst/hayagriva/blob/main/CHANGELOG.md) for
-    more details. (**Breaking change**)
-  - A few bugs with `.bib` file parsing were fixed
-  - Removed `brackets` argument of `cite` function in favor of `form`
-
-- Visualization
-  - Gradients and colors (thanks to [@Dherse](https://github.com/Dherse))
-    - Added support for [gradients]($gradient) on shapes and text
-    - Supports linear, radial, and conic gradients
-    - Added support for defining colors in more color spaces, including
-      [Oklab]($color.oklab), [Linear RGB(A)]($color.linear-rgb),
-      [HSL]($color.hsl), and [HSV]($color.hsv)
-    - Added [`saturate`]($color.saturate), [`desaturate`]($color.desaturate),
-      and [`rotate`]($color.rotate) functions on colors
-    - Added [`color.map`]($color/#predefined-color-maps) module with predefined
-      color maps that can be used with gradients
-    - Rename `kind` function on colors to [`space`]($color.space)
-    - Removed `to-rgba`, `to-cmyk`, and `to-luma` functions in favor of a new
-      [`components`]($color.components) function
-  - Improved rendering of [rectangles]($rect) with corner radius and varying
-    stroke widths
-  - Added support for properly clipping [boxes]($box.clip) and
-    [blocks]($block.clip) with a border radius
-  - Added `background` parameter to [`overline`]($overline),
-    [`underline`]($underline), and [`strike`]($strike) functions
-  - Fixed inaccurate color embedding in PDFs
-  - Fixed ICC profile handling for images embedded in PDFs
-
-- Text and Layout
-  - Added support for automatically adding proper
-    [spacing]($text.cjk-latin-spacing) between CJK and Latin text (enabled by
-    default)
-  - Added support for automatic adjustment of more CJK punctuation
-  - Added [`quote`]($quote) element for inserting inline and block quotes with
-    optional attributions
-  - Added [`raw.line`]($raw.line) element for customizing the display of
-    individual lines of raw text, e.g. to add line numbers while keeping proper
-    syntax highlighting
-  - Added support for per-side [inset]($table.inset) customization to table
-    function
-  - Added Hungarian and Romanian translations
-  - Added support for Czech hyphenation
-  - Added support for setting custom [smart quotes]($smartquote)
-  - The default [figure separator]($figure.caption.separator) now reacts to the
-    currently set language and region
-  - Improved line breaking of links / URLs (especially helpful for
-    bibliographies with many URLs)
-  - Improved handling of consecutive hyphens in justification algorithm
-  - Fixed interaction of justification and hanging indent
-  - Fixed a bug with line breaking of short lines without spaces when
-    justification is enabled
-  - Fixed font fallback for hyphen generated by hyphenation
-  - Fixed handling of word joiner and other no-break characters during
-    hyphenation
-  - Fixed crash when hyphenating after an empty line
-  - Fixed line breaking of composite emoji like 🏳️‍🌈
-  - Fixed missing text in some SVGs
-  - Fixed font fallback in SVGs
-  - Fixed behaviour of [`to`]($pagebreak.to) argument on `pagebreak` function
-  - Fixed `{set align(..)}` for equations
-  - Fixed spacing around [placed]($place) elements
-  - Fixed coalescing of [`above`]($block.above) and [`below`]($block.below)
-    spacing if given in em units and the font sizes differ
-  - Fixed handling of `extent` parameter of [`underline`]($underline),
-    [`overline`]($overline), and [`strike`]($strike) functions
-  - Fixed crash for [floating placed elements]($place.float) with no specified
-    vertical alignment
-  - Partially fixed a bug with citations in footnotes
-
-- Math
-  - Added `gap` argument for [`vec`]($math.vec.gap), [`mat`]($math.mat.gap), and
-    [`cases`]($math.cases.gap) function
-  - Added `size` argument for [`abs`]($math.abs), [`norm`]($math.norm),
-    [`floor`]($math.floor), [`ceil`]($math.ceil), and [`round`]($math.round)
-    functions
-  - Added [`reverse`]($math.cases.reverse) parameter to cases function
-  - Added support for multinomial coefficients to [`binom`]($math.binom)
-    function
-  - Removed `rotation` argument on [`cancel`]($math.cancel) function in favor of
-    a new and more flexible `angle` argument (**Breaking change**)
-  - Added `wide` constant, which inserts twice the spacing of `quad`
-  - Added `csch` and `sech` [operators]($math.op)
-  - `↼`, `⇀`, `↔`, and `⟷` can now be used as [accents]($math.accent)
-  - Added `integral.dash`, `integral.dash.double`, and `integral.slash`
-    [symbols]($category/symbols/sym)
-  - Added support for specifying negative indices for
-    [augmentation]($math.mat.augment) lines to position the line from the back
-  - Fixed default color of matrix [augmentation]($math.mat.augment) lines
-  - Fixed attachment of primes to inline expressions
-  - Math content now respects the text [baseline]($text.baseline) setting
-
-- Performance
-  - Fixed a bug related to show rules in templates which would effectively
-    disable incremental compilation in affected documents
-  - Micro-optimized code in several hot paths, which brings substantial
-    performance gains, in particular in incremental compilations
-  - Improved incremental parsing, which affects the whole incremental
-    compilation pipeline
-  - Added support for incremental parsing in the CLI
-  - Added support for incremental SVG encoding during PDF export, which greatly
-    improves export performance for documents with many SVG
-
-- Tooling and Diagnostics
-  - Improved autocompletion for variables that are in-scope
-  - Added autocompletion for package imports
-  - Added autocompletion for [labels]($label)
-  - Added tooltip that shows which variables a function captures (when hovering
-    over the equals sign or arrow of the function)
-  - Diagnostics are now deduplicated
-  - Improved diagnostics when trying to apply unary `+` or `-` to types that
-    only support binary `+` and `-`
-  - Error messages now state which label or citation key isn't present in the
-    document or its bibliography
-  - Fixed a bug where function argument parsing errors were shadowed by
-    function execution errors (e.g. when trying to call
-    [`array.sorted`]($array.sorted) and passing the key function as a positional
-    argument instead of a named one).
-
-- Export
-  - Added support for configuring the document's creation
-    [`date`]($document.date). If the `date` is set to `{auto}` (the default),
-    the PDF's creation date will be set to the current date and time.
-  - Added support for configuring document [`keywords`]($document.keywords)
-  - Generated PDFs now contain PDF document IDs
-  - The PDF creator tool metadata now includes the Typst version
-
-- Web app
-  - Added version picker to pin a project to an older compiler version
-    (with support for Typst 0.6.0+)
-  - Fixed desyncs between editor and compiler and improved overall stability
-  - The app now continues to highlight the document when typing while the
-    document is being compiled
-
-- Command line interface
-  - Added support for discovering fonts through fontconfig
-  - Now clears the screen instead of resetting the terminal
-  - Now automatically picks correct file extension for selected output format
-  - Now only regenerates images for changed pages when using `typst watch` with
-    PNG or SVG export
-
-- Miscellaneous Improvements
-  - Added [`version`]($version) type and `sys.version` constant specifying the
-    current compiler version. Can be used to gracefully support multiple
-    versions.
-  - The U+2212 MINUS SIGN is now used when displaying a numeric value, in the
-    [`repr`]($repr) of any numeric value and to replace a normal hyphen in text
-    mode when before a digit. This improves, in particular, how negative integer
-    values are displayed in math mode.
-  - Added support for specifying a default value instead of failing for
-    `remove` function in [array]($array.remove) and
-    [dictionary]($dictionary.remove)
-  - Simplified page setup guide examples
-  - Switched the documentation from using the word "hashtag" to the word "hash"
-    where appropriate
-  - Added support for [`array.zip`]($array.zip) without any further arguments
-  - Fixed crash when a plugin tried to read out of bounds memory
-  - Fixed crashes when handling infinite [lengths]($length)
-  - Fixed introspection (mostly bibliography) bugs due to weak page break close
-    to the end of the document
-
-- Development
-  - Extracted `typst::ide` into separate `typst_ide` crate
-  - Removed a few remaining `'static` bounds on `&dyn World`
-  - Removed unnecessary dependency, which reduces the binary size
-  - Fixed compilation of `typst` by itself (without `typst-library`)
-  - Fixed warnings with Nix flake when using `lib.getExe`
+## 版本 0.9.0（2023年10月31日）{ #v0.9.0 }
+- 参考文献管理
+  - 基于 [CSL](https://citationstyles.org/)（引文样式语言）的新参考文献引擎。
+    集成了约100种常用引文样式，并可加载自定义的 `.csl` 文件。
+  - 在 `cite` 函数中添加了新的 [`form`]($cite.form) 参数，以生成不同形式的引文
+    （例如，用于嵌入散文的引文形式）。
+  - [`cite`]($cite) 函数现在仅接受单个标签/键，不再支持多个。
+    相邻的引文会根据引文样式的规则自动合并和格式化。
+    这在引用语法和对 `cite` 函数的显式调用中都有效。（**重大变更**）
+  - `cite` 函数现在接受 [label]($label) 而不是字符串（**重大变更**）
+  - 在参考文献函数中添加了 [`full`]($bibliography.full) 参数，
+    以便即使没有引用所有作品也能打印完整的参考文献列表
+  - 现在，参考文献条目可以包含 Typst 方程（用 `[$..$]` 包裹，与标记语言中一样），
+    这适用于 `.yml` 和 `.bib` 参考文献
+  - 改进了 hayagriva YAML 格式。详见其
+    [变更日志](https://github.com/typst/hayagriva/blob/main/CHANGELOG.md)获取更多详细信息。（**重大变更**）
+  - 修复了 `.bib` 文件解析的一些错误
+  - 在 `cite` 函数中删除了 `brackets` 参数，改用 `form`
+
+- 可视化
+  - 渐变和颜色（感谢 [@Dherse](https://github.com/Dherse)）
+    - 在形状和文本上添加了对 [渐变]($gradient) 的支持
+    - 支持线性、径向和锥形渐变
+    - 支持在更多颜色空间中定义颜色，包括
+      [Oklab]($color.oklab)、[线性 RGB(A)]($color.linear-rgb)、
+      [HSL]($color.hsl) 和 [HSV]($color.hsv)
+    - 在颜色上添加了 [`saturate`]($color.saturate)、[`desaturate`]($color.desaturate) 和
+      [`rotate`]($color.rotate) 函数
+    - 添加了包含预定义颜色映射的 [`color.map`]($color/#predefined-color-maps) 模块，可用于渐变
+    - 将颜色上的 `kind` 函数更名为 [`space`]($color.space)
+    - 删除了 `to-rgba`、`to-cmyk` 和 `to-luma` 函数，改用新的 [`components`]($color.components) 函数
+  - 改进了带有圆角和变宽描边的 [矩形]($rect) 的渲染
+  - 添加了对带有边框半径的 [框]($box.clip) 和 [块]($block.clip) 的正确剪切的支持
+  - 在 [`overline`]($overline)、[`underline`]($underline) 和 [`strike`]($strike) 函数中添加了 `background` 参数
+  - 修复了 PDF 中颜色嵌入的不准确问题
+  - 修复了嵌入在 PDF 中的图像的 ICC 文件处理
+
+- 文本和布局
+  - 添加了自动在 CJK 和拉丁文本之间添加适当的
+    [间距]($text.cjk-latin-spacing) 的支持（默认启用）
+  - 添加了对更多 CJK 标点的自动调整支持
+  - 添加了 [`quote`]($quote) 元素，用于插入行内和块引用，可选择性地附带归属信息
+  - 添加了 [`raw.line`]($raw.line) 元素，用于定制单行原始文本的显示，
+    例如，添加行号同时保持适当的语法高亮
+  - 在表格函数中添加了对每一侧的 [插图]($table.inset) 定制的支持
+  - 添加了匈牙利语和罗马尼亚语的翻译
+  - 添加了捷克语断词的支持
+  - 添加了设置自定义 [智能引号]($smartquote) 的支持
+  - 默认的 [图例分隔符]($figure.caption.separator) 现在会根据当前设置的语言和区域做出反应
+  - 改进了链接/URL的断行（对于具有许多URL的参考文献特别有用）
+  - 改进了两个连字符在对齐算法中的处理
+  - 修复了两个对齐和悬挂缩进的交互问题
+  - 修复了启用对齐时短行没有空格时的断行问题
+  - 修复了由连字符生成的连字符在字体回退中的问题
+  - 在断字期间修复了字接合器和其他不换行字符的处理
+  - 在空行后断字时修复了崩溃的问题
+  - 修复了类似 🏳️‍🌈 的复合表情符号的断行问题
+  - 修复了一些SVG中缺失的文本
+  - 修复了SVG中的字体回退问题
+  - 修复了 [`to`]($pagebreak.to) 函数对 `pagebreak` 函数的参数的行为
+  - 修复了方程中的 `{set align(..)}` 行为
+  - 修复了 [placed]($place) 元素周围的间距
+  - 修复了 [`above`]($block.above) 和 [`below`]($block.below) 间距的合并问题，如果以em单位给出且字体大小不同
+  - 修复了 [`underline`]($underline)、[`overline`]($overline) 和 [`strike`]($strike) 函数中 `extent` 参数的处理
+  - 修复了 [float]($place.float) 元素没有指定垂直对齐时的崩溃
+  - 部分修复了脚注中引文的错误
+
+- 数学
+  - 为 [`vec`]($math.vec.gap)、[`mat`]($math.mat.gap) 和 [`cases`]($math.cases.gap) 函数添加了 `gap` 参数
+  - 为 [`abs`]($math.abs)、[`norm`]($math.norm)、[`floor`]($math.floor)、
+    [`ceil`]($math.ceil) 和 [`round`]($math.round) 函数添加了 `size` 参数
+  - 在 cases 函数中添加了 [`reverse`]($math.cases.reverse) 参数
+  - 为 [`binom`]($math.binom) 函数添加了对多项式系数的支持
+  - 在 [`cancel`]($math.cancel) 函数中删除了 `rotation` 参数，改用新的更灵活的 `angle` 参数（**重大变更**）
+  - 添加了 `wide` 常量，它插入两倍于 `quad` 的间距
+  - 添加了 `csch` 和 `sech` [运算符]($math.op)
+  - `↼`、`⇀`、`↔` 和 `⟷` 现在可用作 [重音]($math.accent)
+  - 添加了 `integral.dash`、`integral.dash.double` 和 `integral.slash`
+    [符号]($category/symbols/sym)
+  - 添加了为 [增广]($math.mat.augment) 行指定负索引的支持，以从后面定位行
+  - 修复了矩阵 [增广]($math.mat.augment) 行的默认颜色
+  - 修复了附加到行内表达式的素数的问题
+  - 数学内容现在遵循文本 [基线]($text.baseline) 设置
+
+- 性能
+  - 修复了与模板中显示规则相关的错误，这将有效地禁用受影响文档中的增量编译
+  - 在几个热点路径上进行了微优化，带来了相当大的性能提升，尤其是在增量编译中
+  - 改进了增量解析，影响整个增量编译流程
+  - 在 CLI 中添加了对增量解析的支持
+  - 在 PDF 导出期间添加了对增量 SVG 编码的支持，这大大提高了对包含许多SVG的文档的导出性能
+
+- 工具和诊断
+  - 改进了在作用域内的变量的自动补全
+  - 添加了对包导入的自动补全
+  - 添加了对 [labels]($label) 的自动补全
+  - 添加了显示函数捕获的变量的工具提示（在悬停在函数的等号或箭头上时）
+  - 诊断现在被去重
+  - 在尝试将仅支持二进制 `+` 和 `-` 的类型应用到一元 `+` 或 `-` 时改进了诊断
+  - 错误消息现在会说明文档或其参考文献中缺少哪个标签或引文键
+  - 修复了函数参数解析错误被函数执行错误遮蔽的错误（例如，尝试调用 [`array.sorted`]($array.sorted) 时，
+    将键函数作为位置参数而不是命名参数传递）
+
+- 导出
+  - 添加了配置文档创建 [`date`]($document.date) 的支持。
+    如果 `date` 设置为 `{auto}`（默认），PDF 的创建日期将设置为当前日期和时间。
+  - 添加了配置文档 [`keywords`]($document.keywords) 的支持
+  - 生成的 PDF 现在包含 PDF 文档 ID
+  - PDF 创建工具元数据现在包括 Typst 版本
+
+- Web 应用
+  - 添加了版本选择器，以将项目固定到较旧的编译器版本（支持 Typst 0.6.0+）
+  - 修复了编辑器和编译器之间的不同步，并提高了整体稳定性
+  - 在文档编译时，应用程序现在会继续突出显示文档，即使在键入时
+
+- 命令行界面
+  - 添加了通过 fontconfig 发现字体的支持
+  - 现在在清屏而不是重置终端时清除屏幕
+  - 在选择输出格式时现在会自动选择正确的文件扩展名
+  - 使用 `typst watch` 时，只在更改的页面中重新生成 PNG 或 SVG 图像
+
+- 杂项改进
+  - 添加了 [`version`]($version) 类型和 `sys.version` 常量，指定当前编译器版本。可用于优雅地支持多个版本。
+  - 在显示数字值时，现在使用 U+2212 减号符号，以及在文本模式下在数字前的普通连字符的位置。
+    这在特别是改善了负整数值在数学模式中的显示。
+  - 添加了在 [array]($array.remove) 和 [dictionary]($dictionary.remove) 的 `remove` 函数中
+    指定默认值而不是失败的支持
+  - 简化了页面设置指南示例
+  - 在适当的地方，将文档从使用 "hashtag" 改为使用 "hash"
+  - 添加了无需其他参数即可使用的 [`array.zip`]($array.zip)
+  - 修复了插件尝试读取超出界限内存时的崩溃
+  - 修复了处理无限 [长度]($length) 时的崩溃
+  - 由于文档接近结尾的弱分页，修复了内省（主要是参考文献）错误
+
+- 开发
+  - 将 `typst::ide` 提取到独立的 `typst_ide` crate 中
+  - 移除了对 `&dyn World` 上的一些残余 `'static` 限制
+  - 移除了不必要的依赖，减小了二进制文件大小
+  - 修复了仅编译 `typst` 本身（没有 `typst-library`）时的问题
+  - 修复了使用 `lib.getExe` 时在 Nix flake 中的警告

 <contributors from="v0.8.0" to="v0.9.0" />

-## Version 0.8.0 (September 13, 2023) { #v0.8.0 }
-- Scripting
-  - Plugins (thanks to [@astrale-sharp](https://github.com/astrale-sharp) and
-    [@arnaudgolfouse](https://github.com/arnaudgolfouse))
-    - Typst can now load [plugins]($plugin) that are compiled to WebAssembly
-    - Anything that can be compiled to WebAssembly can thus be loaded as a
-      plugin
-    - These plugins are fully encapsulated (no access to file system or network)
-    - Plugins can be shipped as part of [packages]($scripting/#packages)
-    - Plugins work just the same in the web app
-  - Types are now first-class values (**Breaking change**)
-    - A [type]($type) is now itself a value
-    - Some types can be called like functions (those that have a constructor),
-      e.g. [`int`]($int) and [`str`]($str)
-    - Type checks are now of the form `{type(10) == int}` instead of the old
-      `{type(10) == "integer"}`. [Compatibility]($type/#compatibility) with the
-      old way will remain for a while to give package authors time to upgrade,
-      but it will be removed at some point.
-    - Methods are now syntax sugar for calling a function scoped to a type,
-      meaning that `{"hello".len()}` is equivalent to `{str.len("hello")}`
-  - Added support for [`import`]($scripting/#modules) renaming with `as`
-  - Added a [`duration`]($duration) type
-  - Added support for [CBOR]($cbor) encoding and decoding
-  - Added encoding and decoding functions from and to bytes for data formats:
-    [`json.decode`]($json.decode), [`json.encode`]($json.encode), and similar
-    functions for other formats
-  - Added [`array.intersperse`]($array.intersperse) function
-  - Added [`str.rev`]($str.rev) function
-  - Added `calc.tau` constant
-  - Made [bytes]($bytes) joinable and addable
-  - Made [`array.zip`]($array.zip) function variadic
-  - Fixed bug with [`eval`]($eval) when the `mode` was set to `{"math"}`
-  - Fixed bug with [`ends-with`]($str.ends-with) function on strings
-  - Fixed bug with destructuring in combination with break, continue, and return
-  - Fixed argument types of [hyperbolic functions]($calc.cosh), they don't allow
-    angles anymore (**Breaking change**)
-  - Renamed some color methods: `rgba` becomes `to-rgba`, `cmyk` becomes
-    `to-cmyk`, and `luma` becomes `to-luma` (**Breaking change**)
-
-- Export
-  - Added SVG export
-    (thanks to [@Enter-tainer](https://github.com/Enter-tainer))
-  - Fixed bugs with PDF font embedding
-  - Added support for page labels that reflect the
-    [page numbering]($page.numbering) style in the PDF
-
-- Text and Layout
-  - Added [`highlight`]($highlight) function for highlighting text with a
-    background color
-  - Added [`polygon.regular`]($polygon.regular) function for drawing a regular
-    polygon
-  - Added support for tabs in [`raw`]($raw) elements alongside
-    [`tab-width`]($raw.tab-size) parameter
-  - The layout engine now tries to prevent "runts" (final lines consisting of
-    just a single word)
-  - Added Finnish translations
-  - Added hyphenation support for Polish
-  - Improved handling of consecutive smart quotes of different kinds
-  - Fixed vertical alignments for [`number-align`]($page.number-align) argument
-    on page function (**Breaking change**)
-  - Fixed weak pagebreaks after counter updates
-  - Fixed missing text in SVG when the text font is set to "New Computer Modern"
-  - Fixed translations for Chinese
-  - Fixed crash for empty text in show rule
-  - Fixed leading spaces when there's a linebreak after a number and a comma
-  - Fixed placement of floating elements in columns and other containers
-  - Fixed sizing of block containing just a single box
-
-- Math
-  - Added support for [augmented matrices]($math.mat.augment)
-  - Removed support for automatic matching of fences like `|` and `||` as
-    there were too many false positives. You can use functions like
-    [`abs`]($math.abs) or [`norm`]($math.norm) or an explicit [`lr`]($math.lr)
-    call instead. (**Breaking change**)
-  - Fixed spacing after number with decimal point in math
-  - Fixed bug with primes in subscript
-  - Fixed weak spacing
-  - Fixed crash when text within math contains a newline
-
-- Tooling and Diagnostics
-  - Added hints when trying to call a function stored in a dictionary without
-    extra parentheses
-  - Fixed hint when referencing an equation without numbering
-  - Added more details to some diagnostics (e.g. when SVG decoding fails)
-
-- Command line interface
-  - Added `typst update` command for self-updating the CLI
-    (thanks to [@jimvdl](https://github.com/jimvdl))
-  - Added download progress indicator for packages and updates
-  - Added `--format` argument to explicitly specify the output format
-  - The CLI now respects proxy configuration through environment variables and
-    has a new `--cert` option for setting a custom CA certificate
-  - Fixed crash when field wasn't present and `--one` is passed to `typst query`
-
-- Miscellaneous Improvements
-  - Added [page setup guide]($guides/page-setup-guide)
-  - Added [`figure.caption`]($figure.caption) function that can be used for
-    simpler figure customization (**Breaking change** because `it.caption` now
-    renders the full caption with supplement in figure show rules and manual
-    outlines)
-  - Moved `caption-pos` argument to `figure.caption` function and renamed it to
-    `position` (**Breaking change**)
-  - Added [`separator`]($figure.caption.separator) argument to `figure.caption`
-    function
-  - Added support for combination of and/or and before/after
-    [selectors]($selector)
-  - Packages can now specify a
-    [minimum compiler version](https://github.com/typst/packages#package-format)
-    they require to work
-  - Fixed parser bug where method calls could be moved onto their own line for
-    `[#let]` expressions in markup (**Breaking change**)
-  - Fixed bugs in sentence and title case conversion for bibliographies
-  - Fixed supplements for alphanumeric and author-title bibliography styles
-  - Fixed off-by-one error in APA bibliography style
-
-- Development
-  - Made `Span` and `FileId` more type-safe so that all error conditions must be
-    handled by `World` implementors
+## 版本 0.8.0（2023年9月13日）{ #v0.8.0 }
+- 脚本
+  - 插件（感谢 [@astrale-sharp](https://github.com/astrale-sharp) 和 [@arnaudgolfouse](https://github.com/arnaudgolfouse)）
+    - Typst 现在可以加载编译为 WebAssembly 的[插件]($plugin)
+    - 任何可以编译为 WebAssembly 的内容都可以作为插件加载
+    - 这些插件是完全封装的（无法访问文件系统或网络）
+    - 插件可以作为[包]($scripting/#packages)的一部分提供
+    - 插件在 Web App 中也可以正常使用
+  - 类型现在是一等值（**破坏性更改**）
+    - 现在，[类型]($type)本身也是一个值
+    - 一些类型可以像函数一样调用（具有构造函数的那些类型），例如 [`int`]($int) 和 [`str`]($str)
+    - 类型检查现在采用 `{type(10) == int}` 这样的形式，而不是旧的 `{type(10) == "integer"}`。与旧方式的兼容性将保留一段时间，以便包的作者有时间进行升级，但最终会移除。
+    - 方法现在是调用作用域在类型内的函数的语法糖，这意味着 `{"hello".len()}` 等价于 `{str.len("hello")}`
+  - 添加了使用 `as` 重命名的 [`import`]($scripting/#modules) 支持
+  - 添加了 [`duration`]($duration) 类型
+  - 添加了 [CBOR]($cbor) 编码和解码的支持
+  - 添加了与数据格式的字节编码和解码函数相关的功能：[`json.decode`]($json.decode)、[`json.encode`]($json.encode) 等
+  - 添加了 [`array.intersperse`]($array.intersperse) 函数
+  - 添加了 [`str.rev`]($str.rev) 函数
+  - 添加了 `calc.tau` 常量
+  - 使 [bytes]($bytes) 可连接和可相加
+  - 使 [`array.zip`]($array.zip) 函数变为可变元的
+  - 修复了当 `mode` 设置为 `{"math"}` 时 [`eval`]($eval) 的错误
+  - 修复了字符串的 [`ends-with`]($str.ends-with) 函数的错误
+  - 修复了解构与 break、continue 和 return 结合使用时的错误
+  - 修复了[双曲线函数]($calc.cosh)的参数类型，它们不再接受角度了（**破坏性更改**）
+
+- 导出
+  - 添加了 SVG 导出（感谢 [@Enter-tainer](https://github.com/Enter-tainer)）
+  - 修复了 PDF 字体嵌入的错误
+  - 添加了支持页面标签的功能，反映在 PDF 中的[页码编号]($page.numbering)样式
+
+- 文本和布局
+  - 添加了 [`highlight`]($highlight) 用于文本高亮的功能
+  - 添加了 [`polygon.regular`]($polygon.regular) 用于绘制规则多边形的功能
+  - 添加了在 [`raw`]($raw) 元素中支持制表符的功能，同时伴随着 [`tab-width`]($raw.tab-size) 参数
+  - 布局引擎现在会尽量避免产生 "runts"（最后一行只有一个单词）
+  - 添加了芬兰语翻译
+  - 为波兰语添加了断字支持
+  - 改进了不同类型智能引号的连续处理
+  - 修复了页面函数上的 [`number-align`]($page.number-align) 参数的垂直对齐（**破坏性更改**）
+  - 修复了计数更新后弱页面断页
+  - 修复了当文本字体设置为 "New Computer Modern" 时，SVG 中文本缺失的问题
+  - 修复了中文的翻译问题
+  - 修复了在显示规则中的空文本导致崩溃的问题
+  - 修复了数字和逗号之间有换行符时的前导空格
+  - 修复了在列和其他容器中浮动元素的位置
+  - 修复了只包含单个方块的块的大小
+
+- 数学
+  - 添加了对[增广矩阵]($math.mat.augment)的支持
+  - 移除了对 `|` 和 `||` 等分隔符自动匹配的支持，因为会有太多误报。您可以使用函数如 [`abs`]($math.abs) 或 [`norm`]($math.norm) 或显式的 [`lr`]($math.lr) 调用来代替（**破坏性更改**）
+  - 修复了数学中带小数点数字后的间距问题
+  - 修复了下标中素数的错误
+  - 修复了弱间距
+  - 修复了数学中包含换行符的文本会导致崩溃的问题
+
+- 工具和诊断
+  - 在尝试调用存储在字典中的函数时，现在会给出提示，提示需要额外的括号
+  - 在引用未编号方程式时，现在会给出提示
+  - 为某些诊断添加了更多细节（例如 SVG 解码失败时）
+
+- 命令行界面
+  - 添加了 `typst update` 命令以自动更新 CLI
+    （感谢 [@jimvdl](https://github.com/jimvdl)）
+  - 添加了包和更新的下载进度指示器
+  - 添加了 `--format` 参数以明确指定输出格式
+  - CLI 现在通过环境变量尊重代理配置，并具有新的 `--cert` 选项来设置自定义 CA 证书
+  - 修复了字段不存在时，传递 `--one` 给 `typst query` 会导致崩溃的问题
+
+- 其他改进
+  - 添加了[页面设置指南]($guides/page-setup-guide)
+  - 添加了 [`figure.caption`]($figure.caption) 函数，可用于更简单的图题自定义（**破坏性更改**，因为 `it.caption` 现在在图表显示规则和手动大纲中呈现完整的图题与补充）
+  - 将 `caption-pos` 参数移动到 `figure.caption` 函数中，并将其重命名为 `position`（**破坏性更改**）
+  - 为 `figure.caption` 函数添加了 [`separator`]($figure.caption.separator) 参数
+  - 添加了组合和/或和之前/之后的[选择器]($selector)支持
+  - 包现在可以指定它们所需的[最小编译器版本](https://github.com/typst/packages#package-format)
+  - 修复了标记中方法调用可以移到它们自己的行中的解析器错误（在标记中继续工作）
+  - 修复了参考文献的句子和标题大小写转换中的错误
+  - 修复了字母数字和作者-标题参考文献样式的补充
+  - 修复了 APA 参考文献样式中的 off-by-one 错误
+
+- 开发
+  - 使 `Span` 和 `FileId` 更具类型安全性，以便 `World` 的实现者必须处理所有错误条件

 <contributors from="v0.7.0" to="v0.8.0" />

-## Version 0.7.0 (August 7, 2023) { #v0.7.0 }
-- Text and Layout
-  - Added support for floating figures through the
-    [`placement`]($figure.placement) argument on the figure function
-  - Added support for arbitrary floating content through the
-    [`float`]($place.float) argument on the place function
-  - Added support for loading `.sublime-syntax` files as highlighting
-    [syntaxes]($raw.syntaxes) for raw blocks
-  - Added support for loading `.tmTheme` files as highlighting
-    [themes]($raw.theme) for raw blocks
-  - Added _bounds_ option to [`top-edge`]($text.top-edge) and
-    [`bottom-edge`]($text.bottom-edge) arguments of text function for tight
-    bounding boxes
-  - Removed nonsensical top- and bottom-edge options, e.g. _ascender_ for the
-    bottom edge (**Breaking change**)
-  - Added [`script`]($text.script) argument to text function
-  - Added [`alternative`]($smartquote.alternative) argument to smart quote
-    function
-  - Added basic i18n for Japanese
-  - Added hyphenation support for `nb` and `nn` language codes in addition to
-    `no`
-  - Fixed positioning of [placed elements]($place) in containers
-  - Fixed overflowing containers due to optimized line breaks
-
-- Export
-  - Greatly improved export of SVG images to PDF. Many thanks to
-    [@LaurenzV](https://github.com/LaurenzV) for their work on this.
-  - Added support for the alpha channel of RGBA colors in PDF export
-  - Fixed a bug with PPI (pixels per inch) for PNG export
-
-- Math
-  - Improved layout of primes (e.g. in `[$a'_1$]`)
-  - Improved display of multi-primes (e.g. in `[$a''$]`)
-  - Improved layout of [roots]($math.root)
-  - Changed relations to show attachments as [limits]($math.limits) by default
-    (e.g. in `[$a ->^x b$]`)
-  - Large operators and delimiters are now always vertically centered
-  - [Boxes]($box) in equations now sit on the baseline instead of being
-    vertically centered by default. Notably, this does not affect
-    [blocks]($block) because they are not inline elements.
-  - Added support for [weak spacing]($h.weak)
-  - Added support for OpenType character variants
-  - Added support for customizing the [math class]($math.class) of content
-  - Fixed spacing around `.`, `\/`, and `...`
-  - Fixed spacing between closing delimiters and large operators
-  - Fixed a bug with math font weight selection
-  - Symbols and Operators (**Breaking changes**)
-    - Added `id`, `im`, and `tr` text [operators]($math.op)
-    - Renamed `ident` to `equiv` with alias `eq.triple` and removed
-      `ident.strict` in favor of `eq.quad`
-    - Renamed `ast.sq` to `ast.square` and `integral.sq` to `integral.square`
-    - Renamed `.eqq` modifier to `.equiv` (and `.neqq` to `.nequiv`) for
-      `tilde`, `gt`, `lt`, `prec`, and `succ`
-    - Added `emptyset` as alias for `nothing`
-    - Added `lt.curly` and `gt.curly` as aliases for `prec` and `succ`
-    - Added `aleph`, `beth`, and `gimmel` as alias for `alef`, `bet`, and
-      `gimel`
-
-- Scripting
-  - Fields
-    - Added `abs` and `em` field to [lengths]($length)
-    - Added `ratio` and `length` field to [relative lengths]($relative)
-    - Added `x` and `y` field to [2d alignments]($align.alignment)
-    - Added `paint`, `thickness`, `cap`, `join`, `dash`, and `miter-limit` field
-      to [strokes]($stroke)
-  - Accessor and utility methods
-    - Added [`dedup`]($array.dedup) method to arrays
-    - Added `pt`, `mm`, `cm`, and `inches` method to [lengths]($length)
-    - Added `deg` and `rad` method to [angles]($angle)
-    - Added `kind`, `hex`, `rgba`, `cmyk`, and `luma` method to [colors]($color)
-    - Added `axis`, `start`, `end`, and `inv` method to [directions]($stack.dir)
-    - Added `axis` and `inv` method to [alignments]($align.alignment)
-    - Added `inv` method to [2d alignments]($align.alignment)
-    - Added `start` argument to [`enumerate`]($array.enumerate) method on arrays
-  - Added [`color.mix`]($color.mix) function
-  - Added `mode` and `scope` arguments to [`eval`]($eval) function
-  - Added [`bytes`]($bytes) type for holding large byte buffers
-    - Added [`encoding`]($read.encoding) argument to read function to read a
-      file as bytes instead of a string
-    - Added [`image.decode`]($image.decode) function for decoding an image
-      directly from a string or bytes
-    - Added [`bytes`]($bytes) function for converting a string or an array of
-      integers to bytes
-    - Added [`array`]($array) function for converting bytes to an array of
-      integers
-    - Added support for converting bytes to a string with the [`str`]($str)
-      function
-
-- Tooling and Diagnostics
-  - Added support for compiler warnings
-  - Added warning when compilation does not converge within five attempts due to
-    intense use of introspection features
-  - Added warnings for empty emphasis (`__` and `**`)
-  - Improved error message for invalid field assignments
-  - Improved error message after single `#`
-  - Improved error message when a keyword is used where an identifier is
-    expected
-  - Fixed parameter autocompletion for functions that are in modules
-  - Import autocompletion now only shows the latest package version until a
-    colon is typed
-  - Fixed autocompletion for dictionary key containing a space
-  - Fixed autocompletion for for loops
-
-- Command line interface
-  - Added `typst query` subcommand to execute a
-    [query]($reference/meta/query/#command-line-queries) on the command line
-  - The `--root` and `--font-paths` arguments cannot appear in front of the
-    command anymore (**Breaking change**)
-  - Local and cached packages are now stored in directories of the form
-    `[{namespace}/{name}/{version}]` instead of `[{namespace}/{name}-{version}]`
-    (**Breaking change**)
-  - Now prioritizes explicitly given fonts (via `--font-paths`) over system and
-    embedded fonts when both exist
-  - Fixed `typst watch` not working with some text editors
-  - Fixed displayed compilation time (now includes export)
-
-- Miscellaneous Improvements
-  - Added [`bookmarked`]($heading.bookmarked) argument to heading to control
-    whether a heading becomes part of the PDF outline
-  - Added [`caption-pos`]($figure.caption.position) argument to control the
-    position of a figure's caption
-  - Added [`metadata`]($metadata) function for exposing an arbitrary value to
-    the introspection system
-  - Fixed that a [`state`]($state) was identified by the pair `(key, init)`
-    instead of just its `key`
-  - Improved indent logic of [enumerations]($enum). Instead of requiring at
-    least as much indent as the end of the marker, they now require only one
-    more space indent than the start of the marker. As a result, even long
-    markers like `12.` work with just 2 spaces of indent.
-  - Fixed bug with indent logic of [`raw`]($raw) blocks
-  - Fixed a parsing bug with dictionaries
-
-- Development
-  - Extracted parser and syntax tree into `typst-syntax` crate
-  - The `World::today` implementation of Typst dependants may need fixing if
-    they have the same [bug](https://github.com/typst/typst/issues/1842) that
-    the CLI world had
+## Version 0.7.0（2023年8月7日）{#v0.7.0}
+- 文本和布局
+  - 通过图像函数的 [`placement`]($figure.placement) 参数添加了对浮动图像的支持
+  - 通过放置函数的 [`float`]($place.float) 参数添加了对任意浮动内容的支持
+  - 添加了加载 `.sublime-syntax` 文件作为原始块的高亮 [语法]($raw.syntaxes) 的支持
+  - 添加了加载 `.tmTheme` 文件作为原始块的高亮 [主题]($raw.theme) 的支持
+  - 为文本函数的 `top-edge` 和 `bottom-edge` 参数添加了 `_bounds_` 选项，用于创建紧密边界框
+  - 移除了无意义的 `top-` 和 `bottom-edge` 选项，例如底部边缘的 _ascender_ (**破坏性更改**)
+  - 为文本函数添加了 [`script`]($text.script) 参数
+  - 为智能引号函数添加了 [`alternative`]($smartquote.alternative) 参数
+  - 添加了日语的基础国际化支持
+  - 除了 `no` 外，还添加了对 `nb` 和 `nn` 语言代码的断词支持
+  - 修复了容器中 [放置元素]($place) 的定位问题
+  - 修复了因优化的换行而导致容器溢出的问题
+
+- 导出
+  - 大幅改进了将 SVG 图像导出为 PDF 的功能。非常感谢 [@LaurenzV](https://github.com/LaurenzV) 在此方面的工作
+  - 在 PDF 导出中添加了对 RGBA 颜色的 alpha 通道的支持
+  - 修复了 PNG 导出中 PPI（每英寸像素数）的错误
+
+- 数学
+  - 改进了素数的布局（例如在 `[$a'_1$]` 中）
+  - 改进了多重素数的显示（例如在 `[$a''$]` 中）
+  - 改进了 [根]($math.root) 的布局
+  - 默认情况下，将关系改为默认显示为 [限制]($math.limits)（例如在 `[$a ->^x b$]` 中）
+  - 大型运算符和分隔符现在始终垂直居中
+  - 方程中的 [方框]($box) 现在默认坐落在基线上，而不是垂直居中。值得注意的是，这不会影响 [块]($block)，因为它们不是内联元素。
+  - 添加了 [弱间距]($h.weak) 的支持
+  - 添加了 OpenType 字符变体的支持
+  - 添加了自定义内容的 [数学类别]($math.class) 的支持
+  - 修复了 `.`, `\/`, 和 `...` 周围的间距问题
+  - 修复了闭合分隔符与大型运算符之间的间距问题
+  - 修复了数学字体重量选择的错误
+  - 符号和运算符（**破坏性更改**）
+    - 添加了 `id`、`im` 和 `tr` 文本 [运算符]($math.op)
+    - 将 `ident` 重命名为 `equiv`，并添加别名 `eq.triple`，并移除了 `ident.strict`，改用 `eq.quad`
+    - 将 `ast.sq` 重命名为 `ast.square`，将 `integral.sq` 重命名为 `integral.square`
+    - 将 `.eqq` 修饰符重命名为 `.equiv`（并将 `.neqq` 重命名为 `.nequiv`），用于 `tilde`、`gt`、`lt`、`prec` 和 `succ`
+    - 添加了 `emptyset` 作为 `nothing` 的别名
+    - 添加了 `lt.curly` 和 `gt.curly` 作为 `prec` 和 `succ` 的别名
+    - 添加了 `aleph`、`beth` 和 `gimmel` 作为 `alef`、`bet` 和 `gimel` 的别名
+
+- 脚本
+  - 字段
+    - 为 [长度]($length) 添加了 `abs` 和 `em` 字段
+    - 为 [相对长度]($relative) 添加了 `ratio` 和 `length` 字段
+    - 为 [2d 对齐]($align.alignment) 添加了 `x` 和 `y` 字段
+    - 为 [笔画]($stroke) 添加了 `paint`、`thickness`、`cap`、`join`、`dash` 和 `miter-limit` 字段
+  - 存取器和实用方法
+    - 添加了 [`dedup`]($array.dedup) 数组方法
+    - 添加了 [长度]($length) 的 `pt`、`mm`、`cm` 和 `inches` 方法
+    - 添加了 [角度]($angle) 的 `deg` 和 `rad` 方法
+    - 添加了 [颜色]($color) 的 `kind`、`hex`、`rgba`、`cmyk` 和 `luma` 方法
+    - 添加了 [方向]($stack.dir) 的 `axis`、`start`、`end` 和 `inv` 方法
+    - 添加了 [对齐]($align.alignment) 的 `axis` 和 `inv` 方法
+    - 添加了 [2d 对齐]($align.alignment) 的 `inv` 方法
+    - 在数组的 [`enumerate`]($array.enumerate) 方法上添加了 `start` 参数
+  - 添加了 [`color.mix`]($color.mix) 函数
+  - 为 [`eval`]($eval) 函数添加了 `mode` 和 `scope` 参数
+  - 添加了 [`bytes`]($bytes) 类型，用于保存大字节缓冲区
+    - 在读取函数中添加了 [`encoding`]($read.encoding) 参数，以读取字节而不是字符串
+    - 添加了 [`image.decode`]($image.decode) 函数，用于直接从字符串或字节解码图像
+    - 添加了 [`bytes`]($bytes) 函数，用于将字符串或整数数组转换为字节
+    - 添加了 [`array`]($array) 函数，用于将字节转换为整数数组
+    - 添加了使用 [`str`]($str) 函数将字节转换为字符串的支持
+
+- 工具和诊断
+  - 添加了对编译器警告的支持
+  - 当编译由于强烈使用内省功能而在五次尝试内不收敛时，添加了警告
+  - 对空强调 (`__` 和 `**`) 添加了警告
+  - 改进了无效字段分配的错误消息
+  - 改进了单个 `#` 后的错误消息
+  - 当关键字用于期望标识符的位置时，改进了错误消息
+  - 修复了模块中的函数的参数自动补全
+  - 现在，导入自动补全仅在键入冒号之前显示最新的包版本
+  - 修复了包含空格的字典键的自动补全
+  - 修复了 for 循环的自动补全
+
+- 命令行界面
+  - 添加了 `typst query` 子命令，用于在命令行上执行查询
+  - 不再支持在命令之前使用 `--root` 和 `--font-paths` 参数（**破坏性更改**）
+  - 现在，本地和缓存的包存储在形式为 `[namespace}/{name}/{version}]` 的目录中，而不再是 `[namespace}/{name}-{version}]`（**破坏性更改**）
+  - 现在，显式给定的字体（通过 `--font-paths`）优先于系统和嵌入字体
+  - 修复了在某些文本编辑器中 `typst watch` 不起作用的问题
+  - 修复了显示的编译时间（现在包括导出）
+
+- 其他改进
+  - 在标题中添加了 [`bookmarked`]($heading.bookmarked) 参数，用于控制标题是否成为PDF大纲的一部分
+  - 添加了 [`caption-pos`]($figure.caption.position) 参数，用于控制图像标题的位置
+  - 添加了 [`metadata`]($metadata) 函数，用于将任意值暴露给内省系统
+  - 修复了 [`state`]($state) 被识别为 `(key, init)` 对而不仅仅是其 `key` 的问题
+  - 改进了 [枚举]($enum) 的缩进逻辑。现在，它们只需要比标记的起始缩进多一个空格缩进。因此，即使是长标记如 `12.` 也只需要 2 个空格缩进。
+  - 修复了 [`raw`]($raw) 块的缩进逻辑问题
+  - 修复了字典的解析问题
+
+- 开发
+  - 将解析器和语法树提取到 `typst-syntax` 包中
+  - 如果 Typst 的依赖关系中有相同的 [bug](https://github.com/typst/typst/issues/1842)，则 Typst 依赖项的 `World::today` 实现可能需要修复

 <contributors from="v0.6.0" to="v0.7.0" />

-## Version 0.6.0 (June 30, 2023) { #v0.6.0 }
-- Package Management
-  - Typst now has built-in [package management]($scripting/#packages)
-  - You can import [published]($packages) community packages or create and use
-    [system-local](https://github.com/typst/packages#local-packages) ones
-  - Published packages are also supported in the web app
-
-- Math
-  - Added support for optical size variants of glyphs in math mode
-  - Added argument to enable [`limits`]($math.limits) conditionally depending on
-    whether the equation is set in [`display`]($math.display) or
-    [`inline`]($math.inline) style
-  - Added `gt.eq.slant` and `lt.eq.slant` symbols
-  - Increased precedence of factorials in math mode (`[$1/n!$]` works correctly
-    now)
-  - Improved [underlines]($math.underline) and [overlines]($math.overline) in
-    math mode
-  - Fixed usage of [`limits`]($math.limits) function in show rules
-  - Fixed bugs with line breaks in equations
-
-- Text and Layout
-  - Added support for alternating page [margins]($page.margin) with the `inside`
-    and `outside` keys
-  - Added support for specifying the page [`binding`]($page.binding)
-  - Added [`to`]($pagebreak.to) argument to pagebreak function to skip to the
-    next even or odd page
-  - Added basic i18n for a few more languages (TR, SQ, TL)
-  - Fixed bug with missing table row at page break
-  - Fixed bug with [underlines]($underline)
-  - Fixed bug superfluous table lines
-  - Fixed smart quotes after line breaks
-  - Fixed a crash related to text layout
-
-- Command line interface
-  - **Breaking change:** Added requirement for `--root`/`TYPST_ROOT` directory
-    to contain the input file because it designates the _project_ root. Existing
-    setups that use `TYPST_ROOT` to emulate package management should switch to
-    [local packages](https://github.com/typst/packages#local-packages)
-  - **Breaking change:** Now denies file access outside of the project root
-  - Added support for local packages and on-demand package download
-  - Now watches all relevant files, within the root and all packages
-  - Now displays compilation time
-
-- Miscellaneous Improvements
-  - Added [`outline.entry`]($outline.entry) to customize outline entries with
-    show rules
-  - Added some hints for error messages
-  - Added some missing syntaxes for [`raw`]($raw) highlighting
-  - Improved rendering of rotated images in PNG export and web app
-  - Made [footnotes]($footnote) reusable and referenceable
-  - Fixed bug with citations and bibliographies in [`locate`]($locate)
-  - Fixed inconsistent tense in documentation
-
-- Development
-  - Added [contribution guide](https://github.com/typst/typst/blob/main/CONTRIBUTING.md)
-  - Reworked `World` interface to accommodate for package management and make
-    it a bit simpler to implement _(Breaking change for implementors)_
+## Version 0.6.0（2023年6月30日）{#v0.6.0}
+- 包管理
+  - Typst 现在内置了[包管理]($scripting/#packages)
+  - 您可以导入[已发布的]($packages)社区包或创建并使用
+    [系统本地](https://github.com/typst/packages#local-packages)包
+  - 已发布的包也受 Web 应用程序支持
+
+- 数学
+  - 在数学模式中添加了对字形的[光学尺寸变体](https://en.wikipedia.org/wiki/Optical_size)的支持
+  - 添加了参数，以根据方程式是以[`display`]($math.display)或
+    [`inline`]($math.inline)风格设置的情况下有条件地启用[`limits`]($math.limits)
+  - 添加了 `gt.eq.slant` 和 `lt.eq.slant` 符号
+  - 在数学模式中增加了阶乘的优先级（`[$1/n!$]` 现在可以正常工作了）
+  - 改进了数学模式中的[下划线]($math.underline)和[上划线]($math.overline)
+  - 修复了在显示规则中使用[`limits`]($math.limits)函数的问题
+  - 修复了方程式中的换行问题
+
+- 文本和布局
+  - 添加了支持交替的页面[页边距]($page.margin)，使用 `inside` 和 `outside` 键
+  - 添加了指定页面[`binding`]($page.binding)的支持
+  - 为 pagebreak 函数添加了 [`to`]($pagebreak.to) 参数，以跳到下一个偶数页或奇数页
+  - 为更多语言（TR、SQ、TL）添加了基本的国际化支持
+  - 修复了分页时缺失表格行的问题
+  - 修复了[下划线]($underline)的问题
+  - 修复了多余的表格线问题
+  - 修复了在换行后智能引号的问题
+  - 修复了与文本布局相关的崩溃问题
+
+- 命令行界面
+  - **破坏性更改：** 添加了 `--root`/`TYPST_ROOT` 目录必须包含输入文件的要求，因为它指定了 _项目_ 根目录。现有设置中使用 `TYPST_ROOT` 来模拟包管理的应更改为使用[本地包](https://github.com/typst/packages#local-packages)
+  - **破坏性更改：** 现在拒绝在项目根目录之外访问文件
+  - 添加了对本地包和按需包下载的支持
+  - 现在监视根目录和所有包内的所有相关文件
+  - 现在显示编译时间
+
+- 其他改进
+  - 添加了 [`outline.entry`]($outline.entry) 以自定义大纲条目与显示规则
+  - 为错误消息添加了一些提示
+  - 为[`raw`]($raw)高亮添加了一些缺失的语法
+  - 改进了在 PNG 导出和 Web 应用程序中渲染旋转图像的效果
+  - 使[脚注]($footnote)可重复使用和可引用
+  - 修复了[`locate`]($locate)中的引用和参考文献的问题
+  - 修复了文档中时态不一致的问题
+
+- 开发
+  - 添加了[贡献指南](https://github.com/typst/typst/blob/main/CONTRIBUTING.md)
+  - 重新设计了 `World` 接口以适应包管理，并使其更简单实现（对于实现者的**破坏性更改**）

 <contributors from="v0.5.0" to="v0.6.0" />

-## Version 0.5.0 (June 9, 2023) { #v0.5.0 }
-- Text and Layout
-  - Added [`raw`]($raw) syntax highlighting for many more languages
-  - Added support for Korean [numbering]($numbering)
-  - Added basic i18n for a few more languages (NL, SV, DA)
-  - Improved line breaking for East Asian languages
-  - Expanded functionality of outline [`indent`]($outline.indent) property
-  - Fixed footnotes in columns
-  - Fixed page breaking bugs with [footnotes]($footnote)
-  - Fixed bug with handling of footnotes in lists, tables, and figures
-  - Fixed a bug with CJK punctuation adjustment
-  - Fixed a crash with rounded rectangles
-  - Fixed alignment of [`line`]($line) elements
-
-- Math
-  - **Breaking change:** The syntax rules for mathematical
-    [attachments]($math.attach) were improved: `[$f^abs(3)$]` now parses as
-    `[$f^(abs(3))$]` instead of `[$(f^abs)(3)$]`. To disambiguate, add a space:
-    `[$f^zeta (3)$]`.
-  - Added [forced size]($category/math/sizes) commands for math (e.g.,
-    [`display`]($math.display))
-  - Added [`supplement`]($math.equation.supplement) parameter to
-    [`equation`]($math.equation), used by [references]($ref)
-  - New [symbols]($category/symbols/sym): `bullet`, `xor`, `slash.big`,
-    `sigma.alt`, `tack.r.not`, `tack.r.short`, `tack.r.double.not`
-  - Fixed a bug with symbols in matrices
-  - Fixed a crash in the [`attach`]($math.attach) function
-
-- Scripting
-  - Added new [`datetime`]($datetime) type and
-    [`datetime.today`]($datetime.today) to retrieve the current date
-  - Added [`str.from-unicode`]($str.from-unicode) and
-    [`str.to-unicode`]($str.to-unicode) functions
-  - Added [`fields`]($content.fields) method on content
-  - Added `base` parameter to [`str`]($str) function
-  - Added [`calc.exp`]($calc.exp) and [`calc.ln`]($calc.ln)
-  - Improved accuracy of [`calc.pow`]($calc.pow) and [`calc.log`]($calc.log) for
-    specific bases
-  - Fixed [removal]($dictionary.remove) order for dictionary
-  - Fixed `.at(default: ..)` for [strings]($str.at) and [content]($content.at)
-  - Fixed field access on styled elements
-  - Removed deprecated `calc.mod` function
-
-- Command line interface
-  - Added PNG export via `typst compile source.typ output-{n}.png`. The output
-    path must contain `[{n}]` if the document has multiple pages.
-  - Added `--diagnostic-format=short` for Unix-style short diagnostics
-  - Doesn't emit color codes anymore if stderr isn't a TTY
-  - Now sets the correct exit when invoked with a non-existent file
-  - Now ignores UTF-8 BOM in Typst files
-
-- Miscellaneous Improvements
-  - Improved errors for mismatched delimiters
-  - Improved error message for failed length comparisons
-  - Fixed a bug with images not showing up in Apple Preview
-  - Fixed multiple bugs with the PDF outline
-  - Fixed citations and other searchable elements in [`hide`]($hide)
-  - Fixed bugs with [reference supplements]($ref.supplement)
-  - Fixed Nix flake
+## Version 0.5.0（2023年6月9日）{#v0.5.0}
+- 文本和布局
+  - 为更多语言添加了[`raw`]($raw)语法高亮
+  - 添加了对韩语[编号]($numbering)的支持
+  - 为更多语言（NL、SV、DA）添加了基本国际化支持
+  - 改进了东亚语言的分行
+  - 扩展了大纲[`indent`]($outline.indent)属性的功能
+  - 修复了列中的脚注
+  - 修复了[脚注]($footnote)的分页错误
+  - 修复了在列表、表格和图表中处理脚注的错误
+  - 修复了CJK标点符号调整的问题
+  - 修复了带有圆角矩形的崩溃问题
+  - 修复了[`line`]($line)元素的对齐问题
+
+- 数学
+  - **破坏性更改：** 数学[附件]($math.attach)的语法规则得到改进：`[$f^abs(3)$]`现在解析为 `[$f^(abs(3))$]` 而不是 `[$(f^abs)(3)$]`。要消除歧义，请添加一个空格：`[$f^zeta (3)$]`。
+  - 为数学（例如，[`display`]($math.display)）添加了[强制大小]($category/math/sizes)命令
+  - 为[`equation`]($math.equation)添加了[`supplement`]($math.equation.supplement)参数，被[引用]($ref)使用
+  - 新[符号]($category/symbols/sym)：`bullet`、`xor`、`slash.big`、`sigma.alt`、`tack.r.not`、`tack.r.short`、`tack.r.double.not`
+  - 修复了矩阵中的符号错误
+  - 修复了[`attach`]($math.attach)函数中的崩溃
+
+- 脚本
+  - 添加了新的[`datetime`]($datetime)类型和[`datetime.today`]($datetime.today)以获取当前日期
+  - 添加了[`str.from-unicode`]($str.from-unicode)和[`str.to-unicode`]($str.to-unicode)函数
+  - 在内容上添加了[`fields`]($content.fields)方法
+  - 为[`str`]($str)函数添加了`base`参数
+  - 添加了[`calc.exp`]($calc.exp)和[`calc.ln`]($calc.ln)
+  - 改进了特定基数的[`calc.pow`]($calc.pow)和[`calc.log`]($calc.log)的精度
+  - 修复了字典的[删除]($dictionary.remove)顺序
+  - 修复了字符串[$str.at]和内容[$content.at]的`.at(default: ..)`问题
+  - 修复了对带有样式元素的字段访问
+  - 移除了已弃用的`calc.mod`函数
+
+- 命令行界面
+  - 通过 `typst compile source.typ output-{n}.png` 添加了PNG导出。如果文档有多个页面，则输出路径必须包含 `[{n}]`。
+  - 添加了 `--diagnostic-format=short` 以进行类似Unix的简短诊断
+  - 如果 stderr 不是 TTY，则不再发出颜色代码
+  - 当以不存在的文件调用时，现在设置了正确的退出状态
+  - 不再忽略Typst文件中的UTF-8 BOM
+
+- 其他改进
+  - 改进了不匹配分隔符的错误
+  - 改进了长度比较失败的错误消息
+  - 修复了在Apple Preview中图像未显示的问题
+  - 修复了PDF大纲的多个错误
+  - 修复了在[`hide`]($hide)中的引用和其他可搜索元素的错误
+  - 修复了Nix flake问题

 <contributors from="v0.4.0" to="v0.5.0" />
-
-## Version 0.4.0 (May 20, 2023) { #v0.4.0 }
-- Footnotes
-  - Implemented support for footnotes
-  - The [`footnote`]($footnote) function inserts a footnote
-  - The [`footnote.entry`]($footnote.entry) function can be used to customize
-    the footnote listing
-  - The `{"chicago-notes"}` [citation style]($cite.style) is now available
-
-- Documentation
-  - Added a [Guide for LaTeX users]($guides/guide-for-latex-users)
-  - Now shows default values for optional arguments
-  - Added richer outlines in "On this Page"
-  - Added initial support for search keywords: "Table of Contents" will now find
-    the [outline]($outline) function. Suggestions for more keywords are welcome!
-  - Fixed issue with search result ranking
-  - Fixed many more small issues
-
-- Math
-  - **Breaking change**: Alignment points (`&`) in equations now alternate
-    between left and right alignment
-  - Added support for writing roots with Unicode: For example, `[$root(x+y)$]`
-    can now also be written as `[$√(x+y)$]`
-  - Fixed uneven vertical [`attachment`]($math.attach) alignment
-  - Fixed spacing on decorated elements (e.g., spacing around a
-    [canceled]($math.cancel) operator)
-  - Fixed styling for stretchable symbols
-  - Added `tack.r.double`, `tack.l.double`, `dotless.i` and `dotless.j`
-    [symbols]($category/symbols/sym)
-  - Fixed show rules on symbols (e.g. `{show sym.tack: set text(blue)}`)
-  - Fixed missing rename from `ast.op` to `ast` that should have been in the
-    previous release
-
-- Scripting
-  - Added function scopes: A function can now hold related definitions in its
-    own scope, similar to a module. The new [`assert.eq`]($assert.eq) function,
-    for instance, is part of the [`assert`]($assert) function's scope. Note that
-    function scopes are currently only available for built-in functions.
-  - Added [`assert.eq`]($assert.eq) and [`assert.ne`]($assert.ne) functions for
-    simpler equality and inequality assertions with more helpful error messages
-  - Exposed [list]($list.item), [enum]($enum.item), and [term list]($terms.item)
-    items in their respective functions' scope
-  - The `at` methods on [strings]($str.at), [arrays]($array.at),
-    [dictionaries]($dictionary.at), and [content]($content.at) now support
-    specifying a default value
-  - Added support for passing a function to [`replace`]($str.replace) that is
-    called with each match.
-  - Fixed [replacement]($str.replace) strings: They are now inserted completely
-    verbatim instead of supporting the previous (unintended) magic dollar syntax
-    for capture groups
-  - Fixed bug with trailing placeholders in destructuring patterns
-  - Fixed bug with underscore in parameter destructuring
-  - Fixed crash with nested patterns and when hovering over an invalid pattern
-  - Better error messages when casting to an [integer]($int) or [float]($float)
-    fails
-
-- Text and Layout
-  - Implemented sophisticated CJK punctuation adjustment
-  - Disabled [overhang]($text.overhang) for CJK punctuation
-  - Added basic translations for Traditional Chinese
-  - Fixed [alignment]($raw.align) of text inside raw blocks (centering a raw
-    block, e.g. through a figure, will now keep the text itself left-aligned)
-  - Added support for passing a array instead of a function to configure table
-    cell [alignment]($table.align) and [fill]($table.fill) per column
-  - Fixed automatic figure [`kind`]($figure.kind) detection
-  - Made alignment of [enum numbers]($enum.number-align) configurable,
-    defaulting to `end`
-  - Figures can now be made breakable with a show-set rule for blocks in figure
-  - Initial fix for smart quotes in RTL languages
-
-- Export
-  - Fixed ligatures in PDF export: They are now copyable and searchable
-  - Exported PDFs now embed ICC profiles for images that have them
-  - Fixed export of strokes with zero thickness
-
-- Web app
-  - Projects can now contain folders
-  - Added upload by drag-and-drop into the file panel
-  - Files from the file panel can now be dragged into the editor to insert them
-    into a Typst file
-  - You can now copy-paste images and other files from your computer directly
-    into the editor
-  - Added a button to resend confirmation email
-  - Added an option to invert preview colors in dark mode
-  - Added tips to the loading screen and the Help menu. Feel free to propose
-    more!
-  - Added syntax highlighting for YAML files
-  - Allowed middle mouse button click on many buttons to navigate into a new tab
-  - Allowed more project names
-  - Fixed overridden Vim mode keybindings
-  - Fixed many bugs regarding file upload and more
-
-- Miscellaneous Improvements
-  - Improved performance of counters, state, and queries
-  - Improved incremental parsing for more efficient recompilations
-  - Added support for `.yaml` extension in addition to `.yml` for bibliographies
-  - The CLI now emits escape codes only if the output is a TTY
-  - For users of the `typst` crate: The `Document` is now `Sync` again and the
-    `World` doesn't have to be `'static` anymore
+## Version 0.4.0（2023年5月20日）{#v0.4.0}
+- 脚注
+  - 实现了对脚注的支持
+  - [`footnote`]($footnote) 函数插入脚注
+  - [`footnote.entry`]($footnote.entry) 函数可用于自定义脚注列表
+  - 现在支持 `{"chicago-notes"}` [引用样式]($cite.style)
+
+- 文档
+  - 添加了[LaTeX用户指南]($guides/guide-for-latex-users)
+  - 现在显示可选参数的默认值
+  - 在“本页内容”中添加了更丰富的大纲
+  - 初步支持搜索关键字：现在可以通过“目录”找到[大纲]($outline)函数。欢迎提出更多关键字的建议！
+  - 修复了搜索结果排序问题
+  - 修复了许多其他小问题
+
+- 数学
+  - **破坏性更改**：方程中的对齐点 (`&`) 现在在左对齐和右对齐之间交替
+  - 添加了对使用Unicode编写根号的支持：例如，`[$root(x+y)$]` 现在也可以写成 `[$√(x+y)$]`
+  - 修复了不均匀的垂直[`attachment`]($math.attach)对齐
+  - 修复了装饰元素的间距（例如，[canceled]($math.cancel)运算符周围的间距）
+  - 修复了可伸缩符号的样式
+  - 添加了 `tack.r.double`、`tack.l.double`、`dotless.i` 和 `dotless.j` [符号]($category/symbols/sym)
+  - 修复了符号的显示规则（例如，`{show sym.tack: set text(blue)}`）
+  - 修复了应该在之前版本中进行的从 `ast.op` 到 `ast` 的重命名遗漏
+
+- 脚本
+  - 添加了函数作用域：现在，函数可以在其自己的作用域中保存相关定义，类似于模块。例如，新的 [`assert.eq`]($assert.eq) 函数是 [`assert`]($assert) 函数作用域的一部分。请注意，目前仅内置函数支持函数作用域。
+  - 添加了 [`assert.eq`]($assert.eq) 和 [`assert.ne`]($assert.ne) 函数，用于更简单的相等性和不等性断言，并提供更有帮助的错误消息
+  - 在它们各自的函数作用域中公开了 [list]($list.item)、[enum]($enum.item) 和 [term list]($terms.item) 项目
+  - 在 [strings]($str.at)、[arrays]($array.at)、[dictionaries]($dictionary.at) 和 [content]($content.at) 上的 `at` 方法现在支持指定默认值
+  - 添加了将函数传递给 [`replace`]($str.replace) 的支持，每次匹配时调用函数
+  - 修复了[替换]($str.replace)字符串：现在，它们被完全原样插入，而不再支持以前（不打算的）魔术美元符号语法来捕获组
+  - 修复了在解构模式中的尾随占位符问题
+  - 修复了参数解构中下划线的问题
+  - 修复了嵌套模式和在无效模式上悬停时的崩溃
+  - 在将类型转换为 [integer]($int) 或 [float]($float) 失败时提供更好的错误消息
+
+- 文本和布局
+  - 实现了复杂的CJK标点符号调整
+  - 禁用了CJK标点的[悬挂]($text.overhang)
+  - 为繁体中文添加了基本翻译
+  - 修复了原始块内文本的[对齐]($raw.align)（现在保持文本自身的左对齐，例如通过图像将原始块居中对齐）
+  - 添加了支持通过数组而不是函数配置表格单元[对齐]($table.align)和[填充]($table.fill)
+  - 修复了自动图像[`kind`]($figure.kind)检测
+  - 使[枚举编号]($enum.number-align)的对齐可配置，默认为 `end`
+  - 图像现在可以通过块中的显示设置规则进行分页
+  - RTL语言中智能引号的初始修复
+
+- 导出
+  - 修复了PDF导出中的连字：它们现在可以复制和搜索
+  - 导出的PDF现在嵌入了具有ICC配置文件的图像
+  - 修复了零厚度笔画的导出
+
+- Web应用
+  - 项目现在可以包含文件夹
+  - 添加了通过拖放到文件面板上传的功能
+  - 现在可以将文件面板中的文件拖放到编辑器中以将它们插入Typst文件
+  - 您现在可以直接从计算机中复制粘贴图像和其他文件到编辑器中
+  - 添加了重新发送确认电子邮件的按钮
+  - 在深色模式下添加了反转预览颜色的选项
+  - 在加载屏幕和帮助菜单中添加了提示信息。欢迎提出更多建议！
+  - 为YAML文件添加了语法高亮
+  - 允许在许多按钮上使用中间鼠标按钮单击以导航到新标签页
+  - 允许更多项目名称
+  - 修复了覆盖的Vim模式键绑定
+  - 修复了关于文件上传等方面的许多错误
+
+- 杂项改进
+  - 提高了计数器、状态和查询的性能
+  - 改进了更高效的增量解析以进行重新编译
+  - 现在支持 `.yaml` 扩展名，除了 `.yml` 用于参考文献
+  - CLI现在只在输出是TTY时发出转义代码
+  - 对于 `typst` crate 的用户：`Document` 现在再次是 `Sync`，而 `World` 不再需要 `'static`

 <contributors from="v0.3.0" to="v0.4.0" />

-## Version 0.3.0 (April 26, 2023) { #v0.3.0 }
-- **Breaking changes:**
-  - Renamed a few symbols: What was previous `dot.op` is now just `dot` and the
-    basic dot is `dot.basic`. The same applies to `ast` and `tilde`.
-  - Renamed `mod` to [`rem`]($calc.rem) to more accurately reflect the
-    behaviour. It will remain available as `mod` until the next update as a
-    grace period.
-  - A lone underscore is not a valid identifier anymore, it can now only be used
-    in patterns
-  - Removed `before` and `after` arguments from [`query`]($query). This is now
-    handled through flexible [selectors]($selector) combinator methods
-  - Added support for [attachments]($math.attach) (sub-, superscripts) that
-    precede the base symbol. The `top` and `bottom` arguments have been renamed
-    to `t` and `b`.
-
-- New features
-  - Added support for more complex [strokes]($stroke) (configurable caps, joins,
-    and dash patterns)
-  - Added [`cancel`]($math.cancel) function for equations
-  - Added support for [destructuring]($scripting/#bindings) in argument lists
-    and assignments
-  - Added [`alt`]($image.alt) text argument to image function
-  - Added [`toml`]($toml) function for loading data from a TOML file
-  - Added [`zip`]($array.zip), [`sum`]($array.sum), and
-    [`product`]($array.product) methods for arrays
-  - Added `fact`, `perm`, `binom`, `gcd`, `lcm`, `atan2`, `quo`, `trunc`, and
-    `fract` [calculation]($category/foundations/calc) functions
-
-- Improvements
-  - Text in SVGs now displays properly
-  - Typst now generates a PDF heading outline
-  - [References]($ref) now provides the referenced element as a field in show
-    rules
-  - Refined linebreak algorithm for better Chinese justification
-  - Locations are now a valid kind of selector
-  - Added a few symbols for algebra
-  - Added Spanish smart quote support
-  - Added [`selector`]($selector) function to turn a selector-like value into a
-    selector on which combinator methods can be called
-  - Improved some error messages
-  - The outline and bibliography headings can now be styled with show-set rules
-  - Operations on numbers now produce an error instead of overflowing
-
-- Bug fixes
-  - Fixed wrong linebreak before punctuation that follows inline equations,
-    citations, and other elements
-  - Fixed a bug with [argument sinks]($arguments)
-  - Fixed strokes with thickness zero
-  - Fixed hiding and show rules in math
-  - Fixed alignment in matrices
-  - Fixed some alignment bugs in equations
-  - Fixed grid cell alignment
-  - Fixed alignment of list marker and enum markers in presence of global
-    alignment settings
-  - Fixed [path]($path) closing
-  - Fixed compiler crash with figure references
-  - A single trailing line breaks is now ignored in math, just like in text
-
-- Command line interface
-  - Font path and compilation root can now be set with the environment variables
-    `TYPST_FONT_PATHS` and `TYPST_ROOT`
-  - The output of `typst fonts` now includes the embedded fonts
-
-- Development
-  - Added instrumentation for debugging and optimization
-  - Added `--update` flag and `UPDATE_EXPECT` environment variable to update
-    reference images for tests
-  - You can now run a specific subtest with `--subtest`
-  - Tests now run on multiple threads
+## Version 0.3.0 (2023年4月26日) { #v0.3.0 }
+- **重大变更:**
+  - 重命名了一些符号：以前的 `dot.op` 现在只是 `dot`，而基本的点是 `dot.basic`。`ast` 和 `tilde` 也是如此。
+  - 将 `mod` 重命名为 [`rem`]($calc.rem) 以更准确地反映行为。在下一次更新之前，将保留 `mod` 作为宽限期。
+  - 单独的下划线不再是有效的标识符，现在只能在模式中使用
+  - 从 [`query`]($query) 中删除了 `before` 和 `after` 参数。现在可以通过灵活的[选择器]($selector)组合方法来处理这些。
+  - 添加了对[附件]($math.attach)（下标、上标）的支持，它们位于基本符号之前。`top` 和 `bottom` 参数已重命名为 `t` 和 `b`。
+
+- 新功能
+  - 增加了对更复杂的[笔画]($stroke)的支持（可配置的端点、连接和虚线模式）
+  - 添加了用于方程的 [`cancel`]($math.cancel) 函数
+  - 在参数列表和赋值中添加了[解构]($scripting/#bindings)的支持
+  - 为图像函数添加了 [`alt`]($image.alt) 文本参数
+  - 添加了从 TOML 文件加载数据的 [`toml`]($toml) 函数
+  - 为数组添加了 [`zip`]($array.zip)、[`sum`]($array.sum) 和 [`product`]($array.product) 方法
+  - 添加了 `fact`、`perm`、`binom`、`gcd`、`lcm`、`atan2`、`quo`、`trunc` 和 `fract` [计算]($category/calculate)
+
+- 改进
+  - SVG 中的文本现在可以正常显示
+  - Typst 现在生成了一个PDF目录大纲
+  - [引用]($ref) 现在在显示规则中提供了被引用元素作为字段
+  - 优化了换行算法，以获得更好的中文对齐
+  - 位置现在是有效的选择器种类
+  - 添加了一些代数符号
+  - 添加了西班牙智能引号支持
+  - 添加了 [`selector`]($selector) 函数，将选择器类似的值转换为可以调用组合方法的选择器
+  - 改进了一些错误消息
+  - 大纲和参考文献标题现在可以使用显示设置规则进行样式设置
+  - 数字运算现在产生错误，而不是溢出
+
+- Bug 修复
+  - 修复了行内方程、引用和其他元素后面的标点符号之前的错误断行
+  - 修复了关于[参数接收器]($arguments)的错误
+  - 修复了线条厚度为零的问题
+  - 修复了数学中隐藏和显示规则的问题
+  - 修复了矩阵中的对齐问题
+  - 修复了方程中的一些对齐错误
+  - 修复了网格单元格的对齐问题
+  - 在全局对齐设置存在的情况下，修复了列表标记和枚举标记的对齐
+  - 修复了[路径]($path)的闭合
+  - 修复了与图形引用相关的编译器崩溃
+  - 数学中现在忽略单个尾随换行，就像在文本中一样
+
+- 命令行界面
+  - 现在可以使用环境变量 `TYPST_FONT_PATHS` 和 `TYPST_ROOT` 设置字体路径和编译根目录
+  - `typst fonts` 的输出现在包括了嵌入式字体
+
+- 开发
+  - 添加了用于调试和优化的工具
+  - 添加了 `--update` 标志和 `UPDATE_EXPECT` 环境变量以更新测试的参考图像
+  - 现在可以使用 `--subtest` 运行特定的子测试
+  - 测试现在在多个线程上运行

 <contributors from="v0.2.0" to="v0.3.0" />

-## Version 0.2.0 (April 11, 2023) { #v0.2.0 }
-- **Breaking changes:**
-  - Removed support for iterating over index and value in
-    [for loops]($scripting/#loops). This is now handled via unpacking and
-    enumerating. Same goes for the [`map`]($array.map) method.
-  - [Dictionaries]($dictionary) now iterate in insertion order instead of
-    alphabetical order.
-
-- New features
-  - Added [unpacking syntax]($scripting/#bindings) for let bindings, which
-    allows things like `{let (1, 2) = array}`
-  - Added [`enumerate`]($array.enumerate) method
-  - Added [`path`]($path) function for drawing Bézier paths
-  - Added [`layout`]($layout) function to access the size of the surrounding
-    page or container
-  - Added `key` parameter to [`sorted`]($array.sorted) method
-
-- Command line interface
-  - Fixed `--open` flag blocking the program
-  - New Computer Modern font is now embedded into the binary
-  - Shell completions and man pages can now be generated by setting the
-    `GEN_ARTIFACTS` environment variable to a target directory and then building
-    Typst
-
-- Miscellaneous improvements
-  - Fixed page numbering in outline
-  - Added basic i18n for a few more languages
-    (AR, NB, CS, NN, PL, SL, ES, UA, VI)
-  - Added a few numbering patterns (Ihora, Chinese)
-  - Added `sinc` [operator]($math.op)
-  - Fixed bug where math could not be hidden with [`hide`]($hide)
-  - Fixed sizing issues with box, block, and shapes
-  - Fixed some translations
-  - Fixed inversion of "R" in [`cal`]($math.cal) and [`frak`]($math.frak) styles
-  - Fixed some styling issues in math
-  - Fixed supplements of references to headings
-  - Fixed syntax highlighting of identifiers in certain scenarios
-  - [Ratios]($ratio) can now be multiplied with more types and be converted to
-    [floats]($float) with the [`float`]($float) function
+## Version 0.2.0 (2023年4月11日) { #v0.2.0 }
+- **重大变更:**
+  - 移除了在[for循环]($scripting/#loops)中遍历索引和值的支持。现在通过解包和枚举来处理。`map` 方法也是如此。
+  - [字典]($dictionary) 现在按插入顺序进行迭代，而不是按字母顺序。
+
+- 新功能
+  - 为 let 绑定添加了[解包语法]($scripting/#bindings)，允许类似 `{let (1, 2) = array}` 这样的操作。
+  - 添加了 [`enumerate`]($array.enumerate) 方法
+  - 添加了 [`path`]($path) 函数用于绘制贝塞尔路径
+  - 添加了 [`layout`]($layout) 函数以访问周围页面或容器的大小
+  - 在 [`sorted`]($array.sorted) 方法中添加了 `key` 参数
+
+- 命令行界面
+  - 修复了 `--open` 标志阻塞程序的问题
+  - 新的 Computer Modern 字体现在嵌入到二进制文件中
+  - 可以通过将 `GEN_ARTIFACTS` 环境变量设置为目标目录，然后构建 Typst 来生成 shell 自动完成和 man 页面
+
+- 杂项改进
+  - 修复了大纲中的页码显示问题
+  - 为更多语言添加了基本的国际化支持
+    (阿拉伯语、挪威卑尔根语、捷克语、挪威尼诺斯克语、波兰语、斯洛文尼亚语、西班牙语、乌克兰语、越南语)
+  - 添加了一些编号模式（伊霍拉、中文）
+  - 添加了 `sinc` [运算符]($math.op)
+  - 修复了数学无法使用 [`hide`]($hide) 隐藏的错误
+  - 修复了盒子、块和形状的大小问题
+  - 修复了一些翻译问题
+  - 修复了 [`cal`]($math.cal) 和 [`frak`]($math.frak) 样式中 "R" 的反转问题
+  - 修复了数学中的一些样式问题
+  - 修复了引用到标题的补充问题
+  - 修复了某些情况下标识符的语法高亮显示问题
+  - [比例]($ratio) 现在可以与更多类型相乘，并使用 [`float`]($float) 函数转换为[浮点数]($float)

 <contributors from="v0.1.0" to="v0.2.0" />

-## Version 0.1.0 (April 04, 2023) { #v0.1.0 }
-- **Breaking changes:**
-  - When using the CLI, you now have to use subcommands:
-    - `typst compile file.typ` or `typst c file.typ` to create a PDF
-    - `typst watch file.typ` or `typst w file.typ` to compile and watch
-    - `typst fonts` to list all fonts
-  - Manual counters now start at zero. Read the "How to step" section
-    [here]($counter) for more details
-  - The [bibliography styles]($bibliography.style) `{"author-date"}` and
-    `{"author-title"}` were renamed to `{"chicago-author-date"}` and
-    `{"chicago-author-title"}`
-
-- Figure improvements
-  - Figures now automatically detect their content and adapt their behaviour.
-    Figures containing tables, for instance, are automatically prefixed with
-    "Table X" and have a separate counter
-  - The figure's supplement (e.g. "Figure" or "Table") can now be customized
-  - In addition, figures can now be completely customized because the show rule
-    gives access to the automatically resolved kind, supplement, and counter
-
-- Bibliography improvements
-  - The [`bibliography`]($bibliography) now also accepts multiple bibliography
-    paths (as an array)
-  - Parsing of BibLaTeX files is now more permissive (accepts non-numeric
-    edition, pages, volumes, dates, and Jabref-style comments; fixed
-    abbreviation parsing)
-  - Labels and references can now include `:` and `.` except at the end
-  - Fixed APA bibliography ordering
-
-- Drawing additions
-  - Added [`polygon`]($polygon) function for drawing polygons
-  - Added support for clipping in [boxes]($box.clip) and [blocks]($block.clip)
-
-- Command line interface
-  - Now returns with non-zero status code if there is an error
-  - Now watches the root directory instead of the current one
-  - Now puts the PDF file next to input file by default
-  - Now accepts more kinds of input files (e.g. `/dev/stdin`)
-  - Added `--open` flag to directly open the PDF
-
-- Miscellaneous improvements
-  - Added [`yaml`]($yaml) function to load data from YAML files
-  - Added basic i18n for a few more languages (IT, RU, ZH, FR, PT)
-  - Added numbering support for Hebrew
-  - Added support for [integers]($int) with base 2, 8, and 16
-  - Added symbols for double bracket and laplace operator
-  - The [`link`]($link) function now accepts [labels]($label)
-  - The link syntax now allows more characters
-  - Improved justification of Japanese and Chinese text
-  - Calculation functions behave more consistently w.r.t to non-real results
-  - Replaced deprecated angle brackets
-  - Reduced maximum function call depth from 256 to 64
-  - Fixed [`first-line-indent`]($par.first-line-indent) being not applied when a
-    paragraph starts with styled text
-  - Fixed extraneous spacing in unary operators in equations
-  - Fixed block spacing, e.g. in `{block(above: 1cm, below: 1cm, ..)}`
-  - Fixed styling of text operators in math
-  - Fixed invalid parsing of language tag in raw block with a single backtick
-  - Fixed bugs with displaying counters and state
-  - Fixed crash related to page counter
-  - Fixed crash when [`symbol`]($symbol) function was called without arguments
-  - Fixed crash in bibliography generation
-  - Fixed access to label of certain content elements
-  - Fixed line number in error message for CSV parsing
-  - Fixed invalid autocompletion after certain markup elements
+## 版本 0.1.0 (2023年4月4日) { #v0.1.0 }
+- **重大变更:**
+  - 当使用 CLI 时，现在必须使用子命令:
+    - 使用 `typst compile file.typ` 或 `typst c file.typ` 创建 PDF
+    - 使用 `typst watch file.typ` 或 `typst w file.typ` 编译并监视
+    - 使用 `typst fonts` 列出所有字体
+  - 手动计数器现在从零开始。阅读[此处]($counter)的 "如何设置" 部分了解更多详情。
+  - [参考文献样式]($bibliography.style) `{"author-date"}` 和 `{"author-title"}` 已重命名为 `{"chicago-author-date"}` 和 `{"chicago-author-title"}`。
+
+- 图表改进
+  - 图表现在可以自动检测其内容并调整其行为。例如，包含表格的图表现在会自动加上前缀 "表 X" 并具有单独的计数器。
+  - 图表的补充部分（例如 "图" 或 "表"）现在可以自定义。
+  - 此外，图表现在可以完全自定义，因为显示规则提供了对自动解析的种类、补充和计数器的访问权限。
+
+- 参考文献改进
+  - [`bibliography`]($bibliography) 现在还接受多个参考文献路径（作为数组）。
+  - BibLaTeX 文件的解析现在更加宽松（接受非数字的版本、页数、卷数、日期和 Jabref 样式的注释；修复了缩写解析）。
+  - 标签和引用现在可以包含 `:` 和 `.`，除了末尾。
+  - 修复了 APA 参考文献排序问题。
+
+- 绘图新增功能
+  - 添加了 [`polygon`]($polygon) 函数用于绘制多边形。
+  - 在 [boxes]($box.clip) 和 [blocks]($block.clip) 中添加了剪裁支持。
+
+- 命令行界面
+  - 如果存在错误，现在返回非零状态码。
+  - 现在默认监视根目录，而不是当前目录。
+  - 默认情况下，现在将 PDF 文件放在输入文件旁边。
+  - 现在接受更多类型的输入文件（例如 `/dev/stdin`）。
+  - 添加了 `--open` 标志，可以直接打开 PDF。
+
+- 其他改进
+  - 添加了 [`yaml`]($yaml) 函数，用于从 YAML 文件加载数据。
+  - 为更多语言添加了基本的国际化支持（意大利语、俄语、中文、法语、葡萄牙语）。
+  - 添加了对希伯来语的编号支持。
+  - 添加了支持以 2、8 和 16 为基数的[整数]($int)。
+  - 添加了双括号和拉普拉斯运算符的符号。
+  - [`link`]($link) 函数现在接受[标签]($label)。
+  - 现在链接语法允许更多字符。
+  - 改进了日语和中文文本的对齐。
+  - 计算函数在处理非实数结果时更一致。
+  - 替换了不推荐使用的尖括号。
+  - 将最大函数调用深度从 256 减少到 64。
+  - 修复了在段落以样式化文本开头时 [`first-line-indent`]($par.first-line-indent) 不被应用的问题。
+  - 修复了等式中一元操作符周围的额外空格，例如 `{block(above: 1cm, below: 1cm, ..)}` 中的问题。
+  - 修复了数学中文本操作符的样式问题。
+  - 修复了对带有单个反引号的原始块中的语言标签的无效解析。
+  - 修复了在某些标记元素之后进行无效自动完成的问题。

 <contributors from="v23-03-28" to="v0.1.0" />

-## March 28, 2023 { #_ }
-- **Breaking changes:**
-  - Enumerations now require a space after their marker, that is, `[1.ok]` must
-    now be written as `[1. ok]`
-  - Changed default style for [term lists]($terms): Does not include a colon
-    anymore and has a bit more indent
-
-- Command line interface
-  - Added `--font-path` argument for CLI
-  - Embedded default fonts in CLI binary
-  - Fixed build of CLI if `git` is not installed
-
-- Miscellaneous improvements
-  - Added support for disabling [matrix]($math.mat) and [vector]($math.vec)
-    delimiters. Generally with `[#set math.mat(delim: none)]` or one-off with
-    `[$mat(delim: #none, 1, 2; 3, 4)$]`.
-  - Added [`separator`]($terms.separator) argument to term lists
-  - Added [`round`]($math.round) function for equations
-  - Numberings now allow zeros. To reset a counter, you can write
-    `[#counter(..).update(0)]`
-  - Added documentation for `{page()}` and `{position()}` methods on
-    [`location`]($location) type
-  - Added symbols for double, triple, and quadruple dot accent
-  - Added smart quotes for Norwegian Bokmål
-  - Added Nix flake
-  - Fixed bibliography ordering in IEEE style
-  - Fixed parsing of decimals in math: `[$1.2/3.4$]`
-  - Fixed parsing of unbalanced delimiters in fractions: `[$1/(2 (x)$]`
-  - Fixed unexpected parsing of numbers as enumerations, e.g. in `[1.2]`
-  - Fixed combination of page fill and header
-  - Fixed compiler crash if [`repeat`]($repeat) is used in page with automatic
-    width
-  - Fixed [matrices]($math.mat) with explicit delimiter
-  - Fixed [`indent`]($terms.indent) property of term lists
-  - Numerous documentation fixes
-  - Links in bibliographies are now affected by link styling
-  - Fixed hovering over comments in web app
+以下是日期为 2023 年 3 月 28 日的更新内容的中文翻译：
+
+markdown
+Copy code
+## 2023年3月28日 { #_ }
+- **重大变更:**
+  - 枚举现在需要在它们的标记后面加一个空格，也就是说，`[1.ok]` 现在必须写成 `[1. ok]`。
+  - 更改了[术语列表]($terms)的默认样式：不再包含冒号，并且缩进更多。
+
+- 命令行界面
+  - 为 CLI 添加了 `--font-path` 参数。
+  - 在 CLI 二进制文件中嵌入了默认字体。
+  - 修复了如果未安装 `git` 则 CLI 无法构建的问题。
+
+- 其他改进
+  - 添加了禁用 [矩阵]($math.mat) 和 [向量]($math.vec) 分隔符的支持。通常使用 `[#set math.mat(delim: none)]` 或单独使用 `[$mat(delim: #none, 1, 2; 3, 4)$]`。
+  - 为术语列表添加了 [`separator`]($terms.separator) 参数。
+  - 为等式添加了 [`round`]($math.round) 函数。
+  - 编号现在允许零。要重置计数器，您可以编写 `[#counter(..).update(0)]`。
+  - 添加了 [`location`]($location) 类型上的 `{page()}` 和 `{position()}` 方法的文档。
+  - 添加了双点、三点和四点重音符号的符号。
+  - 为挪威博克马尔语添加了智能引号支持。
+  - 添加了 Nix flake。
+  - 修复了 IEEE 样式下的参考文献排序问题。
+  - 修复了数学中小数的解析：`[$1.2/3.4$]`。
+  - 修复了分数中不平衡分隔符的解析问题：`[$1/(2 (x)$]`。
+  - 修复了将数字意外解析为枚举，例如 `[1.2]`。
+  - 修复了页面填充和页眉的组合问题。
+  - 修复了如果在具有自动宽度的页面中使用 [`repeat`]($repeat) 会导致编译器崩溃的问题。
+  - 修复了具有显式分隔符的[矩阵]($math.mat)。
+  - 修复了术语列表的 [`indent`]($terms.indent) 属性。
+  - 大量文档修复。
+  - 参考文献中的链接现在受到链接样式的影响。
+  - 修复了在 Web 应用程序中悬停在注释上的问题。

 <contributors from="v23-03-21" to="v23-03-28" />

-## March 21, 2023 { #_ }
-- Reference and bibliography management
-  - [Bibliographies]($bibliography) and [citations]($cite) (currently supported
-    styles are APA, Chicago Author Date, IEEE, and MLA)
-  - You can now [reference]($ref) sections, figures, formulas, and works from
-    the bibliography with `[@label]`
-  - You can make an element referenceable with a label:
+## 2023年3月21日 { #_ }
+- 引用和参考文献管理
+  - [参考文献]($bibliography) 和 [引用]($cite)（目前支持的样式包括 APA、芝加哥作者日期、IEEE 和 MLA）
+  - 您现在可以使用 `[@label]` 来[引用]($ref)章节、图形、公式和文献。
+  - 您可以通过标签使元素具有引用功能：
     - `[= Introduction <intro>]`
     - `[$ A = pi r^2 $ <area>]`

-- Introspection system for interactions between different parts of the document
-  - [`counter`]($counter) function
-    - Access and modify counters for pages, headings, figures, and equations
-    - Define and use your own custom counters
-    - Time travel: Find out what the counter value was or will be at some other
-      point in the document (e.g. when you're building a list of figures, you
-      can determine the value of the figure counter at any given figure).
-    - Counters count in layout order and not in code order
-  - [`state`]($state) function
-    - Manage arbitrary state across your document
-    - Time travel: Find out the value of your state at any position in the
-      document
-    - State is modified in layout order and not in code order
-  - [`query`]($query) function
-    - Find all occurrences of an element or a label, either in the whole
-      document or before/after some location
-    - Link to elements, find out their position on the pages and access their
-      fields
-    - Example use cases: Custom list of figures or page header with current
-      chapter title
-  - [`locate`]($locate) function
-    - Determines the location of itself in the final layout
-    - Can be accessed to get the `page` and `x`, `y` coordinates
-    - Can be used with counters and state to find out their values at that
-      location
-    - Can be used with queries to find elements before or after its location
-
-- New [`measure`]($measure) function
-  - Measure the layouted size of elements
-  - To be used in combination with the new [`style`]($style) function that lets
-    you generate different content based on the style context something is
-    inserted into (because that affects the measured size of content)
-
-- Exposed content representation
-  - Content is not opaque anymore
-  - Content can be compared for equality
-  - The tree of content elements can be traversed with code
-  - Can be observed in hover tooltips or with [`repr`]($repr)
-  - New [methods]($content) on content: `func`, `has`, `at`, and `location`
-  - All optional fields on elements are now settable
-  - More uniform field names (`heading.title` becomes `heading.body`,
-    `list.items` becomes `list.children`, and a few more changes)
-
-- Further improvements
-  - Added [`figure`]($figure) function
-  - Added [`numbering`]($math.equation.numbering) parameter on equation function
-  - Added [`numbering`]($page.numbering) and
-    [`number-align`]($page.number-align) parameters on page function
-  - The page function's [`header`]($page.header) and [`footer`]($page.footer)
-    parameters do not take functions anymore. If you want to customize them
-    based on the page number, use the new [`numbering`]($page.numbering)
-    parameter or [`counter`]($counter) function instead.
-  - Added [`footer-descent`]($page.footer-descent) and
-    [`header-ascent`]($page.header-ascent) parameters
-  - Better default alignment in header and footer
-  - Fixed Arabic vowel placement
-  - Fixed PDF font embedding issues
-  - Renamed `math.formula` to [`math.equation`]($math.equation)
-  - Font family must be a named argument now: `[#set text(font: "..")]`
-  - Added support for [hanging indent]($par.hanging-indent)
-  - Renamed paragraph `indent` to [`first-line-indent`]($par.first-line-indent)
-  - More accurate [logarithm]($calc.log) when base is `2` or `10`
-  - Improved some error messages
-  - Fixed layout of [`terms`]($terms) list
-
-- Web app improvements
-  - Added template gallery
-  - Added buttons to insert headings, equations, raw blocks, and references
-  - Jump to the source of something by clicking on it in the preview panel
-    (works for text, equations, images, and more)
-  - You can now upload your own fonts and use them in your project
-  - Hover debugging and autocompletion now takes multiple files into account and
-    works in show rules
-  - Hover tooltips now automatically collapse multiple consecutive equal values
-  - The preview now automatically scrolls to the right place when you type
-  - Links are now clickable in the preview area
-  - Toolbar, preview, and editor can now all be hidden
-  - Added autocompletion for raw block language tags
-  - Added autocompletion in SVG files
-  - New back button instead of four-dots button
-  - Lots of bug fixes
-
-## February 25, 2023 { #_ }
-- Font changes
-  - New default font: Linux Libertine
-  - New default font for raw blocks: DejaVu Sans Mono
-  - New default font for math: Book weight of New Computer Modern Math
-  - Lots of new math fonts available
-  - Removed Latin Modern fonts in favor of New Computer Modern family
-  - Removed unnecessary smallcaps fonts which are already accessible through the
-    corresponding main font and the [`smallcaps`]($smallcaps) function
-- Improved default spacing for headings
-- Added [`panic`]($panic) function
-- Added [`clusters`]($str.clusters) and [`codepoints`]($str.codepoints) methods
-  for strings
-- Support for multiple authors in [`set document`]($document.author)
-- Fixed crash when string is accessed at a position that is not a char boundary
-- Fixed semicolon parsing in `[#var ;]`
-- Fixed incremental parsing when inserting backslash at end of `[#"abc"]`
-- Fixed names of a few font families (including Noto Sans Symbols and New
-  Computer Modern families)
-- Fixed autocompletion for font families
-- Improved incremental compilation for user-defined functions
-
-## February 15, 2023 { #_ }
-- [Box]($box) and [block]($block) have gained `fill`, `stroke`, `radius`, and
-  `inset` properties
-- Blocks may now be explicitly sized, fixed-height blocks can still break across
-  pages
-- Blocks can now be configured to be [`breakable`]($block.breakable) or not
-- [Numbering style]($enum.numbering) can now be configured for nested enums
-- [Markers]($list.marker) can now be configured for nested lists
-- The [`eval`]($eval) function now expects code instead of markup and returns an
-  arbitrary value. Markup can still be evaluated by surrounding the string with
-  brackets.
-- PDFs generated by Typst now contain XMP metadata
-- Link boxes are now disabled in PDF output
-- Tables don't produce small empty cells before a pagebreak anymore
-- Fixed raw block highlighting bug
-
-## February 12, 2023 { #_ }
-- Shapes, images, and transformations (move/rotate/scale/repeat) are now
-  block-level. To integrate them into a paragraph, use a [`box`]($box) as with
-  other elements.
-- A colon is now required in an "everything" show rule: Write `{show: it => ..}`
-  instead of `{show it => ..}`. This prevents intermediate states that ruin your
-  whole document.
-- Non-math content like a shape or table in a math formula is now centered
-  vertically
-- Support for widow and orphan prevention within containers
-- Support for [RTL]($text.dir) in lists, grids, and tables
-- Support for explicit `{auto}` sizing for boxes and shapes
-- Support for fractional (i.e. `{1fr}`) widths for boxes
-- Fixed bug where columns jump to next page
-- Fixed bug where list items have no leading
-- Fixed relative sizing in lists, squares and grid auto columns
-- Fixed relative displacement in [`place`]($place) function
-- Fixed that lines don't have a size
-- Fixed bug where `{set document(..)}` complains about being after content
-- Fixed parsing of `{not in}` operation
-- Fixed hover tooltips in math
-- Fixed bug where a heading show rule may not contain a pagebreak when an
-  outline is present
-- Added [`baseline`]($box.baseline) property on [`box`]($box)
-- Added [`tg`]($math.op) and [`ctg`]($math.op) operators in math
-- Added delimiter setting for [`cases`]($math.cases) function
-- Parentheses are now included when accepting a function autocompletion
-
-## February 2, 2023 { #_ }
-- Merged text and math symbols, renamed a few symbols (including `infty` to
-  `infinity` with the alias `oo`)
-- Fixed missing italic mappings
-- Math italics correction is now applied properly
-- Parentheses now scale in `[$zeta(x/2)$]`
-- Fixed placement of large root index
-- Fixed spacing in `[$abs(-x)$]`
-- Fixed inconsistency between text and identifiers in math
-- Accents are now ignored when positioning superscripts
-- Fixed vertical alignment in matrices
-- Fixed `text` set rule in `raw` show rule
-- Heading and list markers now parse consistently
-- Allow arbitrary math directly in content
-
-## January 30, 2023 { #_ }
-[Go to the announcement blog post.](https://typst.app/blog/2023/january-update)
-- New expression syntax in markup/math
-  - Blocks cannot be directly embedded in markup anymore
-  - Like other expressions, they now require a leading hash
-  - More expressions available with hash, including literals (`[#"string"]`)
-    as well as field access and method call without space: `[#emoji.face]`
-- New import syntax
-  - `[#import "module.typ"]` creates binding named `module`
-  - `[#import "module.typ": a, b]` or `[#import "module.typ": *]` to import
-    items
-  - `[#import emoji: face, turtle]` to import from already bound module
-- New symbol handling
-  - Removed symbol notation
-  - Symbols are now in modules: `{sym}`, `{emoji}`, and `{math}`
-  - Math module also reexports all of `{sym}`
-  - Modified through field access, still order-independent
-  - Unknown modifiers are not allowed anymore
-  - Support for custom symbol definitions with `symbol` function
-  - Symbols now listed in documentation
-- New `{math}` module
-  - Contains all math-related functions
-  - Variables and function calls directly in math (without hash) access this
-    module instead of the global scope, but can also access local variables
-  - Can be explicitly used in code, e.g. `[#set math.vec(delim: "[")]`
-- Delimiter matching in math
-   - Any opening delimiters matches any closing one
-   - When matched, they automatically scale
-   - To prevent scaling, escape them
-   - To forcibly match two delimiters, use `lr` function
-   - Line breaks may occur between matched delimiters
-   - Delimiters may also be unbalanced
-   - You can also use the `lr` function to scale the brackets (or just one
-     bracket) to a specific size manually
-- Multi-line math with alignment
-  - The `\` character inserts a line break
-  - The `&` character defines an alignment point
-  - Alignment points also work for underbraces, vectors, cases, and matrices
-  - Multiple alignment points are supported
-- More capable math function calls
-  - Function calls directly in math can now take code expressions with hash
-  - They can now also take named arguments
-  - Within math function calls, semicolons turn preceding arguments to arrays to
-    support matrices: `[$mat(1, 2; 3, 4)$]`
-- Arbitrary content in math
-  - Text, images, and other arbitrary content can now be embedded in math
-  - Math now also supports font fallback to support e.g. CJK and emoji
-- More math features
-  - New text operators: `op` function, `lim`, `max`, etc.
-  - New matrix function: `mat`
-  - New n-ary roots with `root` function: `[$root(3, x)$]`
-  - New under- and overbraces, -brackets, and -lines
-  - New `abs` and `norm` functions
-  - New shorthands: `[|`, `|]`, and `||`
-  - New `attach` function, overridable attachments with `script` and `limit`
-  - Manual spacing in math, with `h`, `thin`, `med`, `thick` and `quad`
-  - Symbols and other content may now be used like a function, e.g.
-    `[$zeta(x)$]`
-  - Added Fira Math font, removed Noto Sans Math font
-  - Support for alternative math fonts through `[#show math.formula: set
-    text("Fira Math")]`
-- More library improvements
-  - New `calc` module, `abs`, `min`, `max`, `even`, `odd` and `mod` moved there
-  - New `message` argument on `{assert}` function
-  - The `pairs` method on dictionaries now returns an array of length-2 arrays
-    instead of taking a closure
-  - The method call `{dict.at("key")}` now always fails if `"key"` doesn't exist
-    Previously, it was allowed in assignments. Alternatives are `{dict.key = x}`
-    and `{dict.insert("key", x)}`.
-- Smarter editor functionality
-  - Autocompletion for local variables
-  - Autocompletion for methods available on a value
-  - Autocompletion for symbols and modules
-  - Autocompletion for imports
-  - Hover over an identifier to see its value(s)
-- Further editor improvements
-  - New Font menu with previews
-  - Single projects may now be shared with share links
-  - New dashboard experience if projects are shared with you
-  - Keyboard Shortcuts are now listed in the menus and there are more of them
-  - New Offline indicator
-  - Tooltips for all buttons
-  - Improved account protection
-  - Moved Status indicator into the error list button
-- Further fixes
-  - Multiple bug fixes for incremental parser
-  - Fixed closure parameter capturing
-  - Fixed tons of math bugs
-  - Bugfixes for performance, file management, editing reliability
-  - Added redirection to the page originally navigated to after signin
+- 文档不同部分之间的交互检测系统
+  - [`counter`]($counter) 函数
+    - 访问和修改页面、标题、图形和方程的计数器
+    - 定义并使用自定义计数器
+    - 时间旅行：查找文档中其他位置（例如，在构建图表时，您可以确定在给定图表的任何位置的图表计数器的值）的计数器值。
+    - 计数器按布局顺序计数，而不是按代码顺序计数。
+  - [`state`]($state) 函数
+    - 管理文档中的任意状态
+    - 时间旅行：查找文档中任何位置的状态值
+    - 状态按布局顺序修改，而不是按代码顺序。
+  - [`query`]($query) 函数
+    - 查找元素或标签的所有出现位置，可以是整个文档或某个位置之前/之后。
+    - 链接到元素，查找其在页面上的位置并访问其字段。
+    - 示例用例：自定义图表或包含当前章节标题的页面页眉。
+  - [`locate`]($locate) 函数
+    - 确定自身在最终布局中的位置。
+    - 可以访问以获取 `page` 和 `x`、`y` 坐标。
+    - 可以与计数器和状态一起使用，以查找其在该位置的值。
+    - 可以与查询一起使用，以查找其位置之前或之后的元素。
+
+- 新的 [`measure`]($measure) 函数
+  - 测量元素的布局尺寸。
+  - 与新的 [`style`]($style) 函数一起使用，该函数使您能够基于将要插入的内容的样式上下文生成不同的内容（因为这会影响内容的测量尺寸）。
+
+- 暴露的内容表示
+  - 内容不再是不透明的。
+  - 内容可以进行比较以确定是否相等。
+  - 内容元素的树可以通过代码进行遍历。
+  - 可以在悬停提示中或使用 [`repr`]($repr) 查看内容。
+  - 内容上的新方法: `func`、`has`、`at` 和 `location`。
+  - 现在可以设置元素上的所有可选字段。
+  - 更统一的字段名称（例如，`heading.title` 变成了 `heading.body`，`list.items` 变成了 `list.children`，还有其他一些更改）。
+
+- 进一步的改进
+  - 添加了 [`figure`]($figure) 函数。
+  - 在方程函数上添加了 [`numbering`]($math.equation.numbering) 参数。
+  - 在页面函数上添加了 [`numbering`]($page.numbering) 和 [`number-align`]($page.number-align) 参数。
+  - 页面函数的 [`header`]($page.header) 和 [`footer`]($page.footer) 参数不再接受函数。如果要根据页码自定义它们，请改用新的 [`numbering`]($page.numbering) 参数或 [`counter`]($counter) 函数。
+  - 添加了 [`footer-descent`]($page.footer-descent) 和 [`header-ascent`]($page.header-ascent) 参数。
+  - 改进了页眉和页脚的默认对齐方式。
+  - 修复了阿拉伯语元音的位置。
+  - 修复了 PDF 字体嵌入问题。
+  - 将 `math.formula` 重命名为 [`math.equation`]($math.equation)。
+  - 现在必须将字体系列作为命名参数：`[#set text(font: "..")]`。
+  - 添加了 [悬挂缩进]($par.hanging-indent) 的支持。
+  - 将段落 `indent` 重命名为 [`first-line-indent`]($par.first-line-indent)。
+  - 当基数为 `2` 或 `10` 时，[对数]($calc.log) 更加准确。
+  - 改进了一些错误消息。
+  - 修复了[`terms`]($terms) 列表的布局。
+
+- Web 应用程序改进
+  - 添加了模板库。
+  - 添加了插入标题、方程、原始块和引用的按钮。
+  - 通过单击预览面板中的内容（适用于文本、方程、图像等）可以跳转到其源。
+  - 您现在可以上传自己的字体并在项目中使用它们。
+  - 悬停调试和自动完成现在考虑了多个文件，并在显示规则中工作。
+  - 悬停工具提示现在会自动折叠多个连续相等的值。
+  - 当输入时，预览现在会自动滚动到正确的位置。
+  - 预览区域中的链接现在可以点击。
+  - 工具栏、预览和编辑器现在都可以隐藏。
+  - 添加了原始块语言标签的自动完成。
+  - 在 SVG 文件中添加了自动完成。
+  - 新的返回按钮替代了四点按钮。
+  - 大量错误修复。
+
+## 2023年2月25日 { #_ }
+- 字体变更
+  - 新的默认字体：Linux Libertine
+  - 原始块的新默认字体：DejaVu Sans Mono
+  - 数学公式的新默认字体：New Computer Modern Math 的 Book 版本
+  - 提供了许多新的数学字体
+  - 删除了 Latin Modern 字体，采用了 New Computer Modern 字体系列
+  - 移除了不必要的小型大写字母字体，因为它们已经可以通过相应的主要字体和 [`smallcaps`]($smallcaps) 函数访问
+- 改进了标题的默认间距
+- 添加了 [`panic`]($panic) 函数
+- 为字符串添加了 [`clusters`]($str.clusters) 和 [`codepoints`]($str.codepoints) 方法
+- 在 [`set document`]($document.author) 中支持多个作者
+- 修复了访问字符串的位置不是字符边界时的崩溃问题
+- 修复了在 `[#"abc"]` 末尾插入反斜杠时的增量解析问题
+- 修复了一些字体系列的名称（包括 Noto Sans Symbols 和 New Computer Modern 等系列）
+- 修复了字体系列的自动完成
+- 改进了用户自定义函数的增量编译
+
+## 2023年2月15日 { #_ }
+- [盒子]($box) 和 [块]($block) 现在具有 `fill`、`stroke`、`radius` 和 `inset` 属性
+- 块现在可以显式设置大小，固定高度的块仍然可以跨页面分页
+- 块现在可以配置为可分页或不可分页，使用 [`breakable`]($block.breakable) 属性
+- 现在可以为嵌套的枚举配置 [编号样式]($enum.numbering)
+- 现在可以为嵌套的列表配置 [标记]($list.marker)
+- [`eval`]($eval) 函数现在需要代码而不是标记，并返回任意值。仍然可以通过用括号括起字符串来评估标记。
+- Typst 生成的 PDF 现在包含 XMP 元数据
+- PDF 输出中现在禁用了链接框
+- 表格在分页之前不再生成小的空单元格
+- 修复了原始块高亮显示的错误问题
+
+## 2023年2月12日 { #_ }
+- 形状、图像和变换（移动/旋转/缩放/重复）现在都是块级元素。要将它们整合到段落中，使用 [`box`]($box) 与其他元素一样。
+- "everything" 展示规则现在需要冒号：写成 `{show: it => ..}`，而不是 `{show it => ..}`。这样可以防止中间状态破坏整个文档。
+- 数学公式中的非数学内容，如形状或表格，现在在垂直方向上居中显示。
+- 容器内的孤行和孤字防止支持
+- 列表、网格和表格支持 [RTL（从右到左）]($text.dir)
+- 盒子和形状现在支持显式的 `{auto}` 大小设置
+- 盒子支持分数宽度（例如 `{1fr}`）
+- 修复列跳到下一页的错误问题
+- 修复列表项没有行首间距的问题
+- 修复列表、正方形和网格自动列的相对大小问题
+- 修复 [`place`]($place) 函数中的相对位移问题
+- 修复行没有大小的问题
+- 修复`{set document(..)}` 后跟内容的错误问题
+- 修复 `{not in}` 操作的解析问题
+- 修复数学中的悬停工具提示问题
+- 修复当大纲存在时，标题显示规则可能不包含分页符的错误问题
+- 在 [`box`]($box) 上添加了 [`baseline`]($box.baseline) 属性
+- 在数学中添加了 [`tg`]($math.op) 和 [`ctg`]($math.op) 运算符
+- 为 [`cases`]($math.cases) 函数添加了分隔符设置
+- 在接受函数自动完成时现在包括括号
+
+## 2023年2月2日 { #_ }
+- 合并文本和数学符号，重命名了一些符号（包括将 `infty` 重命名为 `infinity`，并使用别名 `oo`）
+- 修复了缺失的斜体映射
+- 数学斜体校正现在应用正确
+- 括号现在在 `[$zeta(x/2)$]` 中按比例缩放
+- 修复了大型根指数的位置
+- 修复了 `[$abs(-x)$]` 中的间距问题
+- 修复了数学中文本和标识符之间的不一致性
+- 当定位上标时，现在会忽略重音符号
+- 修复了矩阵中的垂直对齐问题
+- 修复了 `raw` 显示规则中的 `text` 设置规则
+- 标题和列表标记现在解析一致
+- 允许在内容中直接使用任意数学公式
+
+## 2023年1月30日 { #_ }
+[查看发布博客帖子。](https://typst.app/blog/2023/january-update)
+- 在标记/数学中的新表达式语法
+  - 不再可以直接嵌入块到标记中
+  - 与其他表达式一样，现在需要以井号（#）开头
+  - 井号（#）可用于更多的表达式，包括字面量（`[#"string"]`）以及字段访问和方法调用，无需空格：`[#emoji.face]`
+- 新的导入语法
+  - `[#import "module.typ"]` 创建名为 `module` 的绑定
+  - `[#import "module.typ": a, b]` 或 `[#import "module.typ": *]` 以导入项目
+  - `[#import emoji: face, turtle]` 以从已绑定的模块导入
+- 新的符号处理方式
+  - 移除了符号表示法
+  - 现在符号位于模块中：`{sym}`，`{emoji}` 和 `{math}`
+  - 数学模块也重新导出了 `{sym}` 的所有内容
+  - 通过字段访问进行修改，仍然不受顺序影响
+  - 不再允许未知修饰符
+  - 通过 `symbol` 函数支持自定义符号定义
+  - 现在在文档中列出了符号
+- 新的 `{math}` 模块
+  - 包含所有与数学相关的函数
+  - 直接位于数学中的变量和函数调用（无需井号）将访问此模块，但也可以访问本地变量
+  - 可以在代码中明确使用，例如 `[#set math.vec(delim: "[")]`
+- 数学中的分隔符匹配
+  - 任何开放分隔符都匹配任何闭合分隔符
+  - 当匹配时，它们会自动缩放
+  - 为了防止缩放，可以对它们进行转义
+  - 为了强制匹配两个分隔符，请使用 `lr` 函数
+  - 匹配的分隔符之间可以发生换行
+  - 分隔符也可以不平衡
+  - 您还可以使用 `lr` 函数手动将括号（或只有一个括号）缩放到特定大小
+- 具有对齐的多行数学
+  - 反斜杠（\）字符插入换行符
+  - `&` 字符定义对齐点
+  - 对齐点还适用于下标、矢量、分情况和矩阵
+  - 支持多个对齐点
+- 更多功能丰富的数学函数调用
+  - 数学中的函数调用现在可以使用带有井号的代码表达式
+  - 现在还可以接受命名参数
+  - 在数学函数调用内部，分号将前面的参数转换为数组，以支持矩阵：`[$mat(1, 2; 3, 4)$]`
+- 数学中的任意内容
+  - 现在可以在数学中嵌入文本、图像和其他任意内容
+  - 数学现在还支持字体回退以支持例如 CJK 和表情符号
+- 更多数学功能
+  - 新的文本运算符：`op` 函数，`lim`，`max` 等
+  - 新的矩阵函数：`mat`
+  - 使用 `root` 函数的新的 n 元根：`[$root(3, x)$]`
+  - 新的下标上标、上下括号、上下线
+  - 新的 `abs` 和 `norm` 函数
+  - 新的快捷方式：`[|`，`|]` 和 `||`
+  - 新的 `attach` 函数，可通过 `script` 和 `limit` 进行覆盖附件
+  - 数学中的手动间距，使用 `h`，`thin`，`med`，`thick` 和 `quad`
+  - 符号和其他内容现在可以像函数一样使用，例如 `[$zeta(x)$]`
+  - 添加了 Fira Math 字体，移除了 Noto Sans Math 字体
+  - 通过 `[#show math.formula: set text("Fira Math")]` 支持替代数学字体
+- 更多库改进
+  - 新的 `calc` 模块，`abs`，`min`，`max`，`even`，`odd` 和 `mod` 移动到该模块
+  - `{assert}` 函数上的新的 `message` 参数
+  - 字典上的 `pairs` 方法现在返回长度为 2 的数组数组，而不是使用闭包
+  - 方法调用 `{dict.at("key")}` 如果 `"key"` 不存在，现在总是失败，以前允许在赋值中使用。替代方法是 `{dict.key = x}` 和 `{dict.insert("key", x)}`
+- 更智能的编辑器功能
+  - 本地变量的自动补全
+  - 值可用的方法的自动补全
+  - 符号和模块的自动补全
+  - 导入的自动补全
+  - 在标识符上悬停以查看其值
+- 更多编辑器改进
+  - 新的离线指示器
+  - 所有按钮都有工具提示
+  - 改进的账户保护
+  - 将状态指示器移动到错误列表按钮内
+- 更多修复
+  - 增量解析器的多个错误修复
+  - 修复了闭包参数捕获问题
+  - 修复了大量数学错误
+  - 性能、文件管理和编辑可靠性的错误修复
+  - 添加了登录后重新导航到原始导航页面的重定向
\ No newline at end of file
diff --git a/docs/community.md b/docs/community.md
index c8c84e5d..e09057cc 100644
--- a/docs/community.md
+++ b/docs/community.md
@@ -1,70 +1,39 @@
 ---
 description: |
-  Join the Typst community, get help from other users and have a say in the
-  future of Typst.
+  加入 Typst 社区，与其他用户互助，并对 Typst 的未来发表你的意见。
 ---

-# Community
-Hey and welcome to the Community page! We're so glad you're here. Typst is
-developed by an early-stage startup and is still in its infancy, but it would be
-pointless without people like you who are interested in it.
+# 社区
+嗨，欢迎来到社区页面！我们非常高兴你在这里。Typst 是一个早期初创公司开发的项目，目前还处于起步阶段，但如果没有像你这样对它感兴趣的人，它就没有意义。

-We would love to not only hear from you but to also provide spaces where you can
-discuss any topic around Typst, typesetting, writing, the sciences, and
-typography with other likeminded people.
+我们不仅希望听到你的声音，还希望为你提供讨论 Typst、排版、写作、科学和印刷术等各种主题的空间，让你可以与其他志同道合的人交流。

-For the time being, **we would like to invite you to our [Discord
-server](https://discord.gg/2uDybryKPe).** The server is open for everyone.
-Of course, you are also very welcome to connect with us on social media
+目前，**我们想邀请你加入我们的 [Discord 服务器](https://discord.gg/2uDybryKPe)。** 该服务器对所有人开放。当然，你也非常欢迎与我们在社交媒体上联系
 ([Twitter](https://twitter.com/typstapp/),
 [Instagram](https://instagram.com/typstapp/),
-[LinkedIn](https://linkedin.com/company/typst), and
-[GitHub](https://github.com/typst)).
+[LinkedIn](https://linkedin.com/company/typst) 和
+[GitHub](https://github.com/typst))。

-## What to share?
-For our community, we want to foster versatility and inclusivity. You are
-welcome to post about any topic that you think would interest other community
-members, but if you need a little inspiration, here are a few ideas:
+## 有什么可以分享的吗？ { #want-to-share }
+对于我们的社区，我们希望促进多样性和包容性。你可以发布关于任何你认为会吸引其他社区成员的主题，但如果你需要一点灵感，以下是一些想法：

-- Share and discuss your thoughts and ideas for new features or improvements
-  you'd like to see in Typst
-- Showcase documents you've created with Typst, or share any unique or creative
-  ways you've used the platform
-- Share importable files or templates that you use to style your documents
-- Alert us of bugs you encounter while using Typst
+- 分享并讨论你对 Typst 中想看到的新功能或改进的想法和想法
+- 展示你使用 Typst 创建的文档，或分享你如何使用该平台的独特或创意方式
+- 分享可导入的文件或用于样式化文档的模板
+- 在使用 Typst 时提醒我们遇到的错误

-## Beta test
-We are starting a public beta test of our product on March 21st, 2023. The Typst
-compiler is still under active development and breaking changes can occur at any
-point. The compiler is developed in the open on
-[GitHub](https://github.com/typst/typst).
+## Beta 测试
+我们将于 2023 年 3 月 21 日开始公开测试我们的产品。Typst 编译器仍在积极开发中，随时可能发生重大变化。编译器在 [GitHub](https://github.com/typst/typst) 上开放开发。

-We will update the members of our Discord server and our social media followers
-when new features become available. We'll also update you on the development
-progress of large features.
+当新功能可用时，我们将更新我们的 Discord 服务器成员和社交媒体关注者。我们还将向您更新大型功能的开发进度。

-## How to support Typst { #support-typst }
-If you want to support Typst, there are multiple ways to do that! You can
-[contribute to the code](https://github.com/typst/typst) or
-[translate the strings in Typst](https://github.com/search?q=repo%3Atypst%2Ftypst+impl+LocalName+for&type=code)
-to your native language if it's not supported yet. You can also help us by
-[sponsoring us!](https://github.com/sponsors/typst) Multiple recurring
-sponsorship tiers are available and all of them come with a set of goodies.
-No matter how you contribute, thank you for your support!
+## 如何支持 Typst { #support-typst }
+如果您想支持 Typst，有多种方法可以做到！您可以 [贡献代码](https://github.com/typst/typst) 或者，如果您的母语尚未支持，您还可以[翻译 Typst 中的字符串](https://github.com/search?q=repo%3Atypst%2Ftypst+impl+LocalName+for&type=code)。您还可以通过 [赞助我们！](https://github.com/sponsors/typst) 来帮助我们。有多种可重复赞助的等级可供选择，每个等级都附带一系列好处。无论您如何贡献，感谢您的支持！

-## Community Rules { #rules }
-We want to make our community a safe and inclusive space for everyone.
-Therefore, we will not tolerate any sexual harassment, sexism, political
-attacks, derogatory language or personal insults, racism, doxing, and other
-inappropriate behavior. We pledge to remove members that are in violation of
-these rules. [Contact us](https://typst.app/contact/) if you think another
-community member acted inappropriately towards you. All complaints will be
-reviewed and investigated promptly and fairly.
+## 社区规则 { #rules }
+我们希望将我们的社区打造成一个安全和包容的空间，面向所有人。因此，我们将不容忍任何性骚扰、性别歧视、政治攻击、侮辱性语言或人身侮辱、种族主义、曝光隐私和其他不当行为。我们承诺将移除违反这些规则的成员。如果您认为其他社区成员对您采取了不适当的行为，请[联系我们](https://typst.app/contact/)。所有投诉将得到及时和公正的审查和调查。

-In addition, our [privacy policy](https://typst.app/privacy/) applies on all
-community spaces operated by us, such as the Discord server. Please also note
-that the terms of service and privacy policies of the respective services apply.
+此外，我们的[隐私政策](https://typst.app/privacy/)适用于我们经营的所有社区空间，例如 Discord 服务器。请注意，各自服务的服务条款和隐私政策也适用。

-## See you soon! { #see-you }
-Thanks again for learning more about Typst. We would be delighted to meet you on
-our [Discord server](https://discord.gg/2uDybryKPe)!
+## 再见！ { #see-you }
+再次感谢您了解 Typst。我们将非常高兴在我们的 [Discord 服务器](https://discord.gg/2uDybryKPe) 上见到你！
diff --git a/docs/dev/architecture.md b/docs/dev/architecture.md
index 947796af..a0b3d997 100644
--- a/docs/dev/architecture.md
+++ b/docs/dev/architecture.md
@@ -1,200 +1,91 @@
-# Typst Compiler Architecture
-Wondering how to contribute or just curious how Typst works? This document
-covers the general structure and architecture of Typst's compiler, so you get an
-understanding of what's where and how everything fits together.
-
-
-## Directories
-Let's start with a broad overview of the directories in this repository:
-
-- `crates/typst`: The main compiler crate which defines the complete language
-  and library.
-- `crates/typst-cli`: Typst's command line interface. This is a relatively small
-  layer on top of the compiler and the exporters.
-- `crates/typst-docs`: Generates the content of the official
-  [documentation][docs] from the content of the `docs` folder and the inline
-  Rust documentation. Only generates the content and structure, not the concrete
-  HTML (that part is currently closed source).
-- `crates/typst-ide`: Exposes IDE functionality.
-- `crates/typst-macros`: Procedural macros for the compiler.
-- `crates/typst-pdf`: The PDF exporter.
-- `crates/typst-render`: A renderer for Typst frames.
-- `crates/typst-svg`: The SVG exporter.
-- `crates/typst-syntax`: Home to the parser and syntax tree definition.
-- `docs`: Source files for longer-form parts of the documentation. Individual
-  elements and functions are documented inline with the Rust source code.
-- `assets`: Fonts and files used for tests and the documentation.
-- `tests`: Integration tests for Typst compilation.
-- `tools`: Tooling for development.
-
-
-## Compilation
-The source-to-PDF compilation process of a Typst file proceeds in four phases.
-
-1. **Parsing:** Turns a source string into a syntax tree.
-2. **Evaluation:** Turns a syntax tree and its dependencies into content.
-4. **Layout:** Layouts content into frames.
-5. **Export:** Turns frames into an output format like PDF or a raster graphic.
-
-The Typst compiler is _incremental:_ Recompiling a document that was compiled
-previously is much faster than compiling from scratch. Most of the hard work is
-done by [`comemo`], an incremental compilation framework we have written for
-Typst. However, the compiler is still carefully written with incrementality in
-mind. Below we discuss the four phases and how incrementality affects each of
-them.
-
-
-## Parsing
-The syntax tree and parser are located in `crates/typst-syntax`. Parsing is
-a pure function `&str -> SyntaxNode` without any further dependencies. The
-result is a concrete syntax tree reflecting the whole file structure, including
-whitespace and comments. Parsing cannot fail. If there are syntactic errors, the
-returned syntax tree contains error nodes instead. It's important that the
-parser deals well with broken code because it is also used for syntax
-highlighting and IDE functionality.
-
-**Typedness:**
-The syntax tree is untyped, any node can have any `SyntaxKind`. This makes it
-very easy to (a) attach spans to each node (see below), (b) traverse the tree
-when doing highlighting or IDE analyses (no extra complications like a visitor
-pattern). The `typst::syntax::ast` module provides a typed API on top of
-the raw tree. This API resembles a more classical AST and is used by the
-interpreter.
-
-**Spans:**
-After parsing, the syntax tree is numbered with _span numbers._ These numbers
-are unique identifiers for syntax nodes that are used to trace back errors in
-later compilation phases to a piece of syntax. The span numbers are ordered so
-that the node corresponding to a number can be found quickly.
-
-**Incremental:**
-Typst has an incremental parser that can reparse a segment of markup or a
-code/content block. After incremental parsing, span numbers are reassigned
-locally. This way, span numbers further away from an edit stay mostly stable.
-This is important because they are used pervasively throughout the compiler,
-also as input to memoized functions. The less they change, the better for
-incremental compilation.
-
-
-## Evaluation
-The evaluation phase lives in `crates/typst/src/eval`. It takes a parsed
-`Source` file and evaluates it to a `Module`. A module consists of the `Content`
-that was written in it and a `Scope` with the bindings that were defined within
-it.
-
-A source file may depend on other files (imported sources, images, data files),
-which need to be resolved. Since Typst is deployed in different environments
-(CLI, web app, etc.) these system dependencies are resolved through a general
-interface called a `World`. Apart from files, the world also provides
-configuration and fonts.
-
-**Interpreter:**
-Typst implements a tree-walking interpreter. To evaluate a piece of source, you
-first create a `Vm` with a scope stack. Then, the AST is recursively evaluated
-through trait impls of the form `fn eval(&self, vm: &mut Vm) -> Result<Value>`.
-An interesting detail is how closures are dealt with: When the interpreter sees
-a closure / function definition, it walks the body of the closure and finds all
-accesses to variables that aren't defined within the closure. It then clones the
-values of all these variables (it _captures_ them) and stores them alongside the
-closure's syntactical definition in a closure value. When the closure is called,
-a fresh `Vm` is created and its scope stack is initialized with the captured
-variables.
-
-**Incremental:**
-In this phase, incremental compilation happens at the granularity of the module
-and the closure. Typst memoizes the result of evaluating a source file across
-compilations. Furthermore, it memoizes the result of calling a closure with a
-certain set of parameters. This is possible because Typst ensures that all
-functions are pure. The result of a closure call can be recycled if the closure
-has the same syntax and captures, even if the closure values stems from a
-different module evaluation (i.e. if a module is reevaluated, previous calls to
-closures defined in the module can still be reused).
-
-
-## Layout
-The layout phase takes `Content` and produces one `Frame` per page for it. To
-layout `Content`, we first have to _realize_ it by applying all relevant show
-rules to the content. Since show rules may be defined as Typst closures,
-realization can trigger closure evaluation, which in turn produces content that
-is recursively realized. Realization is a shallow process: While collecting list
-items into a list that we want to layout, we don't realize the content within
-the list items just yet. This only happens lazily once the list items are
-layouted.
-
-When we a have realized the content into a layoutable element, we can then
-layout it into _regions,_ which describe the space into which the content shall
-be layouted. Within these, an element is free to layout itself as it sees fit,
-returning one `Frame` per region it wants to occupy.
-
-**Introspection:**
-How content layouts (and realizes) may depend on how _it itself_ is layouted
-(e.g., through page numbers in the table of contents, counters, state, etc.).
-Typst resolves these inherently cyclical dependencies through the _introspection
-loop:_ The layout phase runs in a loop until the results stabilize. Most
-introspections stabilize after one or two iterations. However, some may never
-stabilize, so we give up after five attempts.
-
-**Incremental:**
-Layout caching happens at the granularity of the element. This is important
-because overall layout is the most expensive compilation phase, so we want to
-reuse as much as possible.
-
-
-## Export
-Exporters live in separate crates. They turn layouted frames into an output file
-format.
-
-- The PDF exporter takes layouted frames and turns them into a PDF file.
-- The SVG exporter takes a frame and turns it into an SVG.
-- The built-in renderer takes a frame and turns it into a pixel buffer.
-- HTML export does not exist yet, but will in the future. However, this requires
-  some complex compiler work because the export will start with `Content`
-  instead of `Frames` (layout is the browser's job).
+# Typst 编译器架构
+想要了解如何贡献或者只是对 Typst 的工作原理好奇吗？本文档介绍了 Typst 编译器的一般结构和架构，以便您了解各个部分的位置和相互关系。

+## 目录
+我们首先从了解存储库中的目录的大致概述开始：
+
+- `crates/typst`：定义了完整语言和库的主要编译器 crate。
+- `crates/typst-cli`：Typst 的命令行界面。它是在编译器和导出工具之上的相对较小的一层。
+- `crates/typst-docs`：从 `docs` 文件夹的内容和 Rust 内联文档生成官方 [文档][docs] 的内容生成器。只生成内容和结构，而不是具体的 HTML（这部分当前是闭源的）。
+- `crates/typst-ide`：暴露 IDE 功能。
+- `crates/typst-macros`：编译器的过程宏。
+- `crates/typst-pdf`：PDF 导出工具。
+- `crates/typst-render`：Typst 帧的渲染器。
+- `crates/typst-svg`：SVG 导出工具。
+- `crates/typst-syntax`：解析器和语法树定义的所在位置。
+- `docs`：文档的长格式部分的源文件。个别的元素和函数是通过 Rust 源代码进行内联文档的。
+- `assets`：用于测试和文档的字体和文件。
+- `tests`：Typst 编译的集成测试。
+- `tools`：开发工具。
+
+## 编译
+Typst 文件的源代码到 PDF 的编译过程分为四个阶段。
+
+1. **解析：**将源代码字符串转换为语法树。
+2. **评估：**将语法树及其依赖项转换为内容。
+4. **布局：**将内容布局到帧中。
+5. **导出：**将帧转换为 PDF 等输出格式。
+
+Typst 编译器是 _增量的_：重新编译先前编译过的文档比从头开始编译要快得多。大部分的工作是由我们为 Typst 开发的增量编译框架 [`comemo`] 完成的。然而，编译器仍然是为增量性而精心编写的。下面我们将讨论这四个阶段及增量性对每个阶段的影响。
+
+## 解析
+语法树和解析器位于 `crates/typst-syntax` 中。解析是一个纯函数 `&str -> SyntaxNode`，没有任何其他依赖项。结果是一个具体的语法树，反映了整个文件的结构，包括空格和注释。解析不会失败。如果存在语法错误，则返回的语法树将包含错误节点。解析器对错误的代码处理得好很重要，因为它还用于语法高亮和 IDE 功能。
+
+**类型：**
+语法树是无类型的，任何节点都可以具有任何 `SyntaxKind`。这样做的好处是（a）为每个节点附加范围（见下文），（b）在进行语法高亮或者 IDE 分析时遍历树时不会出现额外的复杂性，如访问者模式之类的。`typst::syntax::ast` 模块在原始树之上提供了一个有类型的 API。该 API 类似于传统的抽象语法树，并且由解释器使用。
+
+**范围：**
+解析完成后，会为语法树分配 _范围编号_。这些编号是语法节点的唯一标识符，用于将后续编译阶段的错误追溯到特定的语法部分。范围编号是按顺序排列的，这样快速找回与编号对应的节点。
+
+**增量：**
+Typst 有一个增量解析器，可以重新解析标记段或代码/内容块。增量解析后，范围编号会被重新分配。这样远离编辑位置的范围编号就保持稳定。这非常重要，因为它们广泛用于整个编译器，甚至作为记忆化函数的输入。它们发生变化越少，对增量编译就越有利。
+
+## 评估
+评估阶段位于 `crates/typst/src/eval` 中。它将已解析的 `Source` 文件评估为一个 `Module`。模块由在其内部编写的 `Content` 和在其中定义的绑定组成。
+
+一个源文件可能依赖于其他文件（导入的源文件、图像、数据文件），这些文件需要解析。由于 Typst 部署在不同的环境中（CLI、Web 应用等），因此这些系统依赖通过称为 `World` 的通用接口来解析。除了文件，该环境还提供配置和字体。
+
+**解释器：**
+Typst 实现了一种树遍历解释器。要评估一段源代码，首先要用一个作用域栈创建一个 `Vm`。然后，通过形如 `fn eval(&self, vm: &mut Vm) -> Result<Value>` 的 trait 实现递归地对 AST 进行评估。一个有趣的细节是如何处理闭包：当解释器遇到闭包/函数定义时，它遍历闭包的体并找到所有对在闭包内未定义的变量的访问。然后，它复制（_捕捉_）所有这些变量的值，并将它们与闭包的语法定义一起存储在闭包值中。当调用闭包时，会创建一个新的 `Vm`，并且在它的作用域栈中初始化捕获的变量。
+
+**增量：**
+在这个阶段，增量编译在模块和闭包的粒度上进行。Typst 在多次编译中记忆化评估源文件的结果。此外，它还记忆化了使用特定参数调用闭包的结果。这是可能的，因为 Typst 确保所有的函数都是纯函数。闭包调用的结果可以重用，如果闭包具有相同的语法和捕捉，即使闭包值来自于不同的模块评估（即，如果重新评估模块，前面对模块中定义的闭包的调用仍然可以重用）。
+
+## 布局
+布局阶段将每个页的内容转换为对应的帧。为了对内容进行布局，我们首先需要通过应用所有相关的显示规则将其“实现”。由于显示规则可以作为 Typst 的闭包定义，实现可能会触发闭包的评估，而闭包评估又会产生递归实现的内容。实现是一个浅层次的过程：当我们将列表项收集到想要进行布局的列表中时，我们尚未实现列表项内部的内容。只有在列表项进行布局时，它们才会延迟实现。
+
+当我们将内容实现为可布局元素后，然后可以将它们布局到“区域”中，用于描述希望将内容布局到其中的空间。在这些区域中，一个元素可以根据自己的意愿布局自己，返回每个它想要占用的区域一个 `Frame`。
+
+**内省：**
+内容布局（和实现）可能取决于它自身的布局方式（例如，通过目录中的页码、计数器、状态等）。Typst 通过 _内省循环_ 解决这些固有的循环依赖关系：布局阶段在循环中运行，直到结果稳定。大多数内省在一到两次迭代后就会稳定下来。但是，有些可能永远无法稳定，所以我们放弃在五次尝试后停止。
+
+**增量：**
+布局缓存的粒度是元素级别。这一点非常重要，因为整体布局是编译过程中最昂贵的阶段，我们希望尽可能地重用。
+
+## 导出
+导出工具位于单独的 crate 中。它们将布局的帧转换为输出文件格式。
+
+- PDF 导出工具将布局的帧转换为 PDF 文件。
+- SVG 导出工具将帧转换为 SVG。
+- 内置渲染器将帧转换为像素缓冲区。
+- HTML 的导出目前还不存在，但将来会有。然而，这需要一些复杂的编译工作，因为导出将从 `Content` 而不是 `Frames` 开始（布局是浏览器的工作）。

 ## IDE
-The `crates/typst-ide` crate implements IDE functionality for Typst. It
-builds heavily on the other modules (most importantly, `syntax` and `eval`).
-
-**Syntactic:**
-Basic IDE functionality is based on a file's syntax. However, the standard
-syntax node is a bit too limited for writing IDE tooling. It doesn't provide
-access to its parents or neighbours. This is a fine for an evaluation-like
-recursive traversal, but impractical for IDE use cases. For this reason, there
-is an additional abstraction on top of a syntax node called a `LinkedNode`,
-which is used pervasively across the `ide` module.
-
-**Semantic:**
-More advanced functionality like autocompletion requires semantic analysis of
-the source. To gain semantic information for things like hover tooltips, we
-directly use other parts of the compiler. For instance, to find out the type of
-a variable, we evaluate and realize the full document equipped with a `Tracer`
-that emits the variable's value whenever it is visited. From the set of
-resulting values, we can then compute the set of types a value takes on. Thanks
-to incremental compilation, we can recycle large parts of the compilation that
-we had to do anyway to typeset the document.
-
-**Incremental:**
-Syntactic IDE stuff is relatively cheap for now, so there are no special
-incrementality concerns. Semantic analysis with a tracer is relatively
-expensive. However, large parts of a traced analysis compilation can reuse
-memoized results from a previous normal compilation. Only the module evaluation
-of the active file and layout code that somewhere within evaluates source code
-in the active file needs to re-run. This is all handled automatically by
-`comemo` because the tracer is wrapped in a `comemo::TrackedMut` container.
-
-
-## Tests
-Typst has an extensive suite of integration tests. A test file consists of
-multiple tests that are separated by `---`. For each test file, we store a
-reference image defining what the compiler _should_ output. To manage the
-reference images, you can use the VS code extension in `tools/test-helper`.
-
-The integration tests cover parsing, evaluation, realization, layout and
-rendering. PDF output is sadly untested, but most bugs are in earlier phases of
-the compiler; the PDF output itself is relatively straight-forward. IDE
-functionality is also mostly untested. PDF and IDE testing should be added in
-the future.
+`crates/typst-ide` crate 实现了 Typst 的 IDE 功能。它主要依赖于其他模块（尤其是 `syntax` 和 `eval`）。
+
+**语法：**
+基本的 IDE 功能基于文件的语法。然而，标准语法节点对于编写 IDE 工具来说有些局限性。它不提供对其父节点或兄弟节点的访问。这对于类似于递归遍历的评估来说是可以的，但对于 IDE 的使用场景来说是不实用的。因此，基于语法节点之上还有一个额外的抽象称为 `LinkedNode`，在 `ide` 模块中广泛使用。
+
+**语义：**
+更高级的功能，比如自动完成，需要对源代码进行语义分析。为了获取关于事物的语义信息，如悬停提示，我们直接使用编译器的其他部分。例如，要查找变量的类型，我们评估和实现带有 `Tracer` 的完整文档，该文档在访问变量时发出了该变量的值。从结果值集合中，我们可以计算出一个值所涉及的类型集合。由于增量编译，我们可以重用编译的大部分内容，这在我们必须为了排版文档而做的工作中是可能的。
+
+**增量：**
+目前，语法 IDE 功能相对较为廉价，因此没有特殊的增量性问题。使用追溯器的语义分析相对较昂贵。然而，追溯分析编译的大部分组件可以重用上一次正常编译的记忆化结果。只有活动文件的模块评估以及在活动文件中求值源代码的布局代码需要重新运行。这一切都由 `comemo` 自动处理，因为追溯器包装在 `comemo::TrackedMut` 容器中。
+
+## 测试
+Typst 有一个广泛的集成测试套件。一个测试文件由多个以 `---` 分隔的测试组成。对于每个测试文件，我们存储一个定义了编译器应该输出的参考图像。要管理这些参考图像，您可以在 `tools/test-helper` 中使用 VS Code 扩展。
+
+集成测试涵盖了解析、评估、实现、布局和渲染。PDF 输出遗憾地没有经过测试，但大多数错误出现在编译器的早期阶段；PDF 输出本身相对简单。IDE 功能也基本没有经过测试。将来应该添加 PDF 和 IDE 测试。

 [docs]: https://typst.app/docs/
-[`comemo`]: https://github.com/typst/comemo/
+[`comemo`]: https://github.com/typst/comemo/
\ No newline at end of file
diff --git a/docs/guides/guide-for-latex-users.md b/docs/guides/guide-for-latex-users.md
index df1704fa..38c9307f 100644
--- a/docs/guides/guide-for-latex-users.md
+++ b/docs/guides/guide-for-latex-users.md
@@ -1,39 +1,25 @@
 ---
 description: |
-  Are you a LaTeX user? This guide explains the differences and
-  similarities between Typst and LaTeX so you can get started quickly.
+  您是 LaTeX 用户吗？本指南解释了 Typst 和 LaTeX 之间的差异和相似之处，以便您可以快速入门。
 ---

-# Guide for LaTeX users { # }
-This page is a good starting point if you have used LaTeX before and want to try
-out Typst. We will explore the main differences between these two systems from a
-user perspective. Although Typst is not built upon LaTeX and has a different
-syntax, you will learn how to use your LaTeX skills to get a head start.
+# LaTeX 用户指南
+这篇文章是写给那些已经有过 LaTeX 使用经验，并想要尝试 Typst 的用户。
+我们将从用户的角度出发，解释这两套系统之间主要的不同。
+虽然 Typst 并不是基于 LaTeX 构建的，语法也完全不同，但通过这篇文章，你可以方便地将 LaTeX 的使用经验转化过来。

 <!-- Mention that Typst is not built upon LaTeX -->

-Just like LaTeX, Typst is a markup-based typesetting system: You compose your
-document in a text file and mark it up with commands and other syntax. Then, you
-use a compiler to typeset the source file into a PDF. However, Typst also
-differs from LaTeX in several aspects: For one, Typst uses more dedicated syntax
-(like you may know from Markdown) for common tasks. Typst's commands are also
-more principled: They all work the same, so unlike in LaTeX, you just need to
-understand a few general concepts instead of learning different conventions for
-each package. Moreover Typst compiles faster than LaTeX: Compilation usually
-takes milliseconds, not seconds, so the web app and the compiler can both
-provide instant previews.
-
-In the following, we will cover some of the most common questions a user
-switching from LaTeX will have when composing a document in Typst. If you prefer
-a step-by-step introduction to Typst, check out our [tutorial]($tutorial).
-
-## How do I create a new, empty document? { #getting-started }
-That's easy. You just create a new, empty text file (the file extension is
-`.typ`). No boilerplate is needed to get started. Simply start by writing your
-text. It will be set on an empty A4-sized page. If you are using the web app,
-click "+ Empty document" to create a new project with a file and enter the
-editor. [Paragraph breaks]($parbreak) work just as they do in LaTeX, just use a
-blank line.
+跟 LaTeX 一样，Typst 是一门基于标记的排版系统。首先在纯文本里编写自己的文档，然后通过一些命令和语法对其进行修饰，最后使用编译器将源文件排版并渲染成 PDF 文件。在以下几个方面，Typst 跟 LaTeX 之间也存在区别：日常任务上，Typst 使用更为专用的语法，这一点可以类比 Markdown。Typst 的命令也更有「原则性」：在 LaTeX 中，你可能需要为不同软件包学习不同的语法和约定，但在 Typst 中，命令总是保持一致，所以你只需要理解一些基本的概念。并且 Typst 比 LaTeX 快得多：Typst 文件的编译通常只需要几毫秒，而不是几秒，因此 Typst 可以实现实时增量渲染。
+
+在接下来的部分，我们将回答从 LaTeX 切换到 Typst 时一些常见的问题。
+如果你更喜欢一步一步地介绍 Typst，请阅读我们的 [教程]($tutorial)。
+
+## 如何创建一个新的空文档？{ #getting-started }
+很简单，你只需要创建一个空的文本文档（文件后缀是.typ），无需额外的模板，你就可以直接开始编写。
+如果您使用的是 Web App，请单击“+ Empty document”以创建一个带有文件的新项目，然后进入编辑器。
+
+[段落分隔符]($parbreak) 和 LaTeX 相同，空一行即可：

 ```example
 Hey there!
@@ -42,43 +28,44 @@ Here are two paragraphs. The
 output is shown to the right.
 ```

-## How do I create section headings, emphasis, ...? { #elements }
-LaTeX uses the command `\section` to create a section heading. Nested headings
-are indicated with `\subsection`, `\subsubsection`, etc. Depending on your
-document class, there is also `\part` or `\chapter`.
-
-In Typst, [headings]($heading) are less verbose: You prefix the line with the
-heading on it with an equals sign and a space to get a first-order heading:
-`[= Introduction]`. If you need a second-order heading, you use two equals
-signs: `[== In this paper]`. You can nest headings as deeply as you'd like by
-adding more equals signs.
-
-Emphasis (usually rendered as italic text) is expressed by enclosing text in
-`[_underscores_]` and strong emphasis (usually rendered in boldface) by using
-`[*stars*]` instead.
-
-Here is a list of common markup commands used in LaTeX and their Typst
-equivalents. You can also check out the [full syntax cheat sheet]($syntax).
-
-| Element          | LaTeX                     | Typst                  | See
-|:-----------------|:--------------------------|:-----------------------|:--------------------
-| Strong emphasis  | `\textbf{strong}`         | `[*strong*]`           | [`strong`]($strong) |
-| Emphasis         | `\emph{emphasis}`         | `[_emphasis_]`         | [`emph`]($emph)     |
-| Monospace / code | `\texttt{print(1)}`       | ``[`print(1)`]``       | [`raw`]($raw)       |
-| Link             | `\url{https://typst.app}` | `[https://typst.app/]` | [`link`]($link)     |
-| Label            | `\label{intro}`           | `[<intro>]`            | [`label`]($label)   |
-| Reference        | `\ref{intro}`             | `[@intro]`             | [`ref`]($ref)       |
-| Citation         | `\cite{humphrey97}`       | `[@humphrey97]`        | [`cite`]($cite)     |
-| Bullet list      | `itemize` environment     | `[- List]`             | [`list`]($list)     |
-| Numbered list    | `enumerate` environment   | `[+ List]`             | [`enum`]($enum)     |
-| Term list        | `description` environment | `[/ Term: List]`       | [`terms`]($terms)   |
-| Figure           | `figure` environment      | `figure` function      | [`figure`]($figure) |
-| Table            | `table` environment       | `table` function       | [`table`]($table)   |
-| Equation         | `$x$`, `align` / `equation` environments | `[$x$]`, `[$ x = y $]` | [`equation`]($math.equation) |
-
-[Lists]($list) do not rely on environments in Typst. Instead, they have
-lightweight syntax like headings. To create an unordered list (`itemize`),
-prefix each line of an item with a hyphen:
+## 我如何创建章节标题，强调，...？{ #elements }
+LaTeX 使用 `\section` 命令创建章节标题。多级标题分别用 `\subsection`、`\subsection` 等表示。根据文档种类的不同，还有 `\part` 和 `\chapter`。
+
+在 Typst 中，标题设置更简洁：在标题所在的行前面加上一个等号和一个空格，便得到了一级标题：`[= Introduction]`。
+如果你需要一个二级标题，则可以使用两个等号：`[== In this paper]`。
+通过在前面加上更多的等号，你可以嵌套任意层级的标题。
+
+<div class="info-box">
+译者注：
+这一点上更接近 Markdown 中 `#` 的作用，在接下来的阅读中你会不断看到这种「Markdown + LaTeX」杂糅的产物，结合这两者分别的痛点，可以更加深入了解 Typst 设计这些语法的原因。
+</div>
+
+强调（通常以斜体字呈现）是通过用`[_underscores_]`来表达，
+而着重的强调（通常以黑体字呈现）是通过使用`[*Star*]`来代替。
+
+强调（英文中以斜体呈现）只需要把文本包含在 `_下划线_` 中，
+粗体则需要包含在 `*单个星号*` 之中。
+
+下面是 LaTeX 中使用的常见标记命令及其 Typst 对应的表示方式。你也可以查看[完整的语法备忘单]($syntax)。
+
+| 元素              | LaTeX                     | Typst                  | See                      |
+|:-----------------|:--------------------------|:-----------------------|:-------------------------|
+| 着重强调          | `\textbf{strong}`         | `[*strong*]`           | [`strong`]($strong) |
+| 强调             | `\emph{emphasis}`         | `[_emphasis_]`         | [`emph`]($emph)     |
+| 等宽文字 / 代码    | `\texttt{print(1)}`       | ``[`print(1)`]``       | [`raw`]($raw)       |
+| 链接             | `\url{https://typst.app}` | `[https://typst.app/]` | [`link`]($link)     |
+| 标签             | `\label{intro}`           | `[<intro>]`            | [`label`]($label)   |
+| 交叉引用          | `\ref{intro}`             | `[@intro]`             | [`ref`]($ref)       |
+| 文献引用          | `\cite{humphrey97}`       | `[@humphrey97]`        | [`cite`]($cite)     |
+| 无序列表          | `itemize` 环境            | `[- List]`             | [`list`]($list)     |
+| 有序列表          | `enumerate` 环境          | `[+ List]`             | [`enum`]($enum)     |
+| 术语列表          | `description` 环境        | `[/ Term: List]`       | [`terms`]($terms)   |
+| 图片             | `figure` 环境             | `figure` 函数           | [`figure`]($figure) |
+| 表格             | `table` 环境              | `table` 函数            | [`table`]($table)   |
+| 公式             | `$x$`, `align` / `equation` 环境 | `[$x$]`, `[$ x = y $]` | [`equation`]($math.equation) |
+
+在 Typst 中，使用 [列表]($list) 并不需要「环境」，而采用一种更为轻量的语法。
+只需要在每行开头前，加入连字符 `-`，就可以创建一个无序列表：

 ````example
 To write this list in Typst...
@@ -99,32 +86,22 @@ To write this list in Typst...

 ````

-Nesting lists works just by using proper indentation. Adding a blank line in
-between items results in a more [widely]($list.tight) spaced list.
-
-To get a [numbered list]($enum) (`enumerate`) instead, use a `+` instead of the
-hyphen. For a [term list]($terms) (`description`), write `[/ Term: Description]`
-instead.
-
-## How do I use a command? { #commands }
-LaTeX heavily relies on commands (prefixed by backslashes). It uses these
-_macros_ to affect the typesetting process and to insert and manipulate content.
-Some commands accept arguments, which are most frequently enclosed in curly
-braces: `\cite{rasmus}`.
-
-Typst differentiates between [markup mode and code mode]($scripting/#blocks).
-The default is markup mode, where you compose text and apply syntactic
-constructs such as `[*stars for bold text*]`. Code mode, on the other hand,
-parallels programming languages like Python, providing the option to input and
-execute segments of code.
-
-Within Typst's markup, you can switch to code mode for a single command (or
-rather, _expression_) using a hash (`#`). This is how you call functions to, for
-example, split your project into different [files]($scripting/#modules) or
-render text based on some [condition]($scripting/#conditionals). Within code
-mode, it is possible to include normal markup [_content_]($content) by using
-square brackets. Within code mode, this content is treated just as any other
-normal value for a variable.
+使用正确的缩进，可以实现嵌套列表。且在每项间添加空行，可以得到一个行间距更大的列表
+
+要获得一个 [有序列表]($enum)（ `enumerate` ），可以用 `+` 代替连字符。
+对于一个 [术语列表]($terms)（ `description` ），可以用 `[/ Term: Description]` 来表示。
+
+## 我如何使用一个命令？ { #commands }
+LaTeX 十分依赖以反斜杠 `\` 开头的命令，它需要通过这些 _宏_ 来排版、插入或改变内容。
+有些命令可以传入参数，这些参数通常使用大括号括起来。`\cite{rasmus}`
+
+Typst 区分两种模式：[「标记模式」和「脚本模式」]($scripting/#blocks)。
+默认是「标记模式」。此模式下，你可以直接编排文本、使用不同的语法结构，如 `*使用星号标记粗体文本* `。
+而「代码模式」下，则更类似像 Python 一样的编程语言，提供了输入、执行代码的选项。
+
+在 Typst 的标记模式中，你可以使用井号（`#`）来使用单个命令（或者表达式）。
+例如，你可以通过这种方式来分割不同的 [文件]($scripting/#modules)，或者基于某些 [条件]($scripting/#conditionals) 渲染文字。在「脚本模式」下，也可以通过方括号来包含正常的（「标记模式」下的）[内容块]($content)。
+在「脚本模式」下，内容（标记模式的整体）会被跟其他变量一样，当作一个值本身进行处理。

 ```example
 First, a rectangle:
@@ -142,19 +119,28 @@ And finally a little loop:
 ]
 ```

-A function call always involves the name of the function ([`rect`]($rect),
-[`underline`]($underline), [`calc.max`]($calc.max), [`range`]($array.range))
-followed by parentheses (as opposed to LaTeX where the square brackets and curly
-braces are optional if the macro requires no arguments). The expected list of
-arguments passed within those parentheses depends on the concrete function and
-is specified in the [reference]($reference).
+<div class="info-box">
+译者注：这段英文原文就表述的很不清晰，这里提供一点解释。
+
+标记模式，如同 Markdown，不需要额外的内容，默认就处在这个标记模式下：可以直接使用 `_text_` 或者 `*text*` 来实现斜体/粗体（参考上文）
+
+脚本模式，以 `#` 开头（类比 LaTeX 中以 `\` 开头来书写命令），仅仅存在于一个命令（表达式）中，当这个表达式结束之后，一切又回到标记模式中。
+在脚本模式中，无需额外使用 `#`（命令/关键字会直接识别，不同于 LaTeX），同时在命令中也可以使用标记模式（使用 `[]`，比如例子给出的 `[Hi #x]`）
+
+另外：
+
+- 在标记模式中，可以引用脚本模式的函数、值，都通过 `#` 进行标记
+- 在脚本模式中，函数返回值为 `content` 的会在当前位置渲染出来如果没有显示指明返回值，则默认会将函数体内的所有内容块相加并返回
+- 在脚本模式中，使用标记模式的内容 (Content)，也可以作为变量的值
+</div>

-### Arguments
-A function can have multiple arguments. Some arguments are positional, i.e., you
-just provide the value: The function `[#lower("SCREAM")]` returns its argument
-in all-lowercase. Many functions use named arguments instead of positional
-arguments to increase legibility. For example, the dimensions and stroke of a
-rectangle are defined with named arguments:
+一个函数调用总是涉及到函数的名称（[`rect`]($rect), [`underline`]($underline),
+[`calc.max`]($calc.max), [`range`]($array.range)），后面是小括号（与 LaTeX 不同，如果宏不需要参数，方括号和大括号是可选的）。
+在这些圆括号内传递的参数的预期列表取决于具体的函数，并在 [引用]($reference) 中指定。
+
+### 参数 { #arguments }
+一个函数可以有多个传入参数，有些参数是位置参数，只需提供变量的值即可（不需要提供参数名）：函数 `[#lower("SCREAM")]` 以全小写的方式返回其传入值。
+很多函数使用命名参数来提高可读性，例如创建一个指定大小和描边的正方形，可以使用如下命名参数：

 ```example
 #rect(
@@ -164,21 +150,17 @@ rectangle are defined with named arguments:
 )
 ```

-You specify a named argument by first entering its name (above, it's `width`,
-`height`, and `stroke`), then a colon, followed by the value (`2cm`, `1cm`,
-`red`). You can find the available named arguments in the [reference
-page]($reference) for each function or in the autocomplete panel when typing.
-Named arguments are similar to how some LaTeX environments are configured, for
-example, you would type `\begin{enumerate}[label={\alph*)}]` to start a list
-with the labels `a)`, `b)`, and so on.
-
-Often, you want to provide some [content]($content) to a function. For example,
-the LaTeX command `\underline{Alternative A}` would translate to
-`[#underline([Alternative A])]` in Typst. The square brackets indicate that a
-value is [content]($content). Within these brackets, you can use normal markup.
-However, that's a lot of parentheses for a pretty simple construct. This is why
-you can also move trailing content arguments after the parentheses (and omit the
-parentheses if they would end up empty).
+你指定一个命名参数，首先输入它的名字（上文中是它`width`、`height`和`stroke`），然后是冒号，接着是值（`2cm`、`1cm`、`red`）。
+你可以在每个函数的参考页中找到可用的命名参数，或者在输入时的自动完成面板中找到。
+命名参数类似于一些 LaTeX 环境的配置方式，例如，你可以输入`\begin{enumerate}[label={alph*)}]`来启动一个带有标签`a)`、`b)`等的列表。
+
+指定命名参数时，你需要首先输入参数的名字，例如 `width`、`height` 和 `stroke` 等，接下来输入冒号和对应的值 (`2cm`、`1cm`、`red`) ，你可以在文档或者自动补全中找到可以传入的参数。
+命名参数有些类似 LaTeX 中配置环境的办法，比如 `\begin{enumerate}[label={alph*)}]` 可以作为一个带有标签`a)`、`b)`等的列表的起始标志。
+
+大多数情况下，你会希望向函数传递一些 [内容块]($content)。
+例如，在 LaTeX 中的命令 `\underline{Alternative A}`
+在 Typst 中则可以写成 `#underline([Alternative A])`，方括号表示其中的值是一个内容块 。
+在这些方括号中，你可以使用正常的标记语法。然而，都这样写的话，需要嵌套的括号数量还是太多了，因此你可以把位于尾部的内容块放到括号后面（如果没有其他参数，甚至可以忽略 `()`）：

 ```example
 Typst is an #underline[alternative]
@@ -187,43 +169,34 @@ to LaTeX.
 #rect(fill: aqua)[Get started here!]
 ```

-### Data types
-You likely already noticed that the arguments have distinctive data types. Typst
-supports many [data types]($type). Below, there is a table with some of the most
-important ones and how to write them. In order to specify values of any of these
-types, you have to be in code mode!
-
-| Data type                       | Example                           |
-|:--------------------------------|:----------------------------------|
-| [Content]($content)             | `{[*fast* typesetting]}`          |
-| [String]($str)                  | `{"Pietro S. Author"}`            |
-| [Integer]($int)                 | `{23}`                            |
-| [Floating point number]($float) | `{1.459}`                         |
-| [Absolute length]($length)      | `{12pt}`, `{5in}`, `{0.3cm}`, ... |
-| [Relative length]($ratio)       | `{65%}`                           |
-
-The difference between content and string is that content can contain markup,
-including function calls, while a string really is just a plain sequence of
-characters.
-
-Typst provides [control flow constructs]($scripting/#conditionals) and
-[operators]($scripting/#operators) such as `+` for adding things or `==` for
-checking equality between two variables. You can also define your own
-[variables]($scripting/#bindings) and perform computations on them.
-
-### Commands to affect the remaining document { #rules }
-In LaTeX, some commands like `\textbf{bold text}` receive an argument in curly
-braces and only affect that argument. Other commands such as
-`\bfseries bold text` act as switches, altering the appearance of all subsequent
-content within the document or current scope.
-
-In Typst, the same function can be used both to affect the appearance for the
-remainder of the document, a block (or scope), or just its arguments. For
-example, `[#text(weight: "bold")[bold text]]` will only embolden its argument,
-while `[#set text(weight: "bold")]` will embolden any text until the end of the
-current block, or, if there is none, document. The effects of a function are
-immediately obvious based on whether it is used in a call or a
-[set rule.]($styling/#set-rules)
+### 数据类型 { #data-types }
+你很可能已经注意到了，上文提到的这些参数有着不同的数据类型。Typst支持多种 [数据类型]($type)，下表是其中一些比较重要的类型和以及声明他们的办法。
+
+注意：为了使用以下任何类型，你必须处在脚本模式中。
+
+| 数据类型                            | 示例                           |
+|:-------------------------------------|:----------------------------------|
+| [内容块 (content)]($content)             | `{[*fast* typesetting]}`          |
+| [字符串 (str)]($str)               | `{"Pietro S. Author"}`            |
+| [整型 (int)]($int)             | `{23}`                            |
+| [浮点数 (float)]($float) | `{1.459}`                         |
+| [绝对长度 (absolute length)]($length)      | `{12pt}`, `{5in}`, `{0.3cm}`, ... |
+| [相对长度 (relative length)]($ratio)       | `{65%}`                           |
+
+内容块和字符串的区别在于，内容可以包含标记，包括函数调用，而字符串实际上只是一个普通的字符序列。
+
+Typst 提供了 [条件分支、循环结构]($scripting/#conditionals)，以及常用的运算符，比如 `+` 和 `==`，你也可以定义你自己的变量，并在此基础上进行计算。
+
+### 影响后续内容的命令 { #rules }
+在 LaTeX 中，有些命令，例如 `\textbf{bold text}` 通过大括号传入参数，并且只影响括号内的内容。而有些命令，比如 `\bfseries bold text`「起到开关的作用」，在这行命令后的所有内容都会受这个命令的影响。
+
+在 Typst 中，同样的函数可以同时用来影响：
+
+- 文档的剩余部分
+- 一段区域（作用域）
+- 它的参数
+
+举例来说，`[#text(weight: "bold")[bold text]]` 仅仅会加粗传入的参数，而 `#set text(weight: "bold")` 会影响「到作用域结束」，（或者，如果不在作用域中，影响文档的剩余部分）。根据使用方式的不同（函数调用 / 使用 Set 规则），很容易区分它的作用域。

 ```example
 I am starting out with small text.
@@ -234,8 +207,7 @@ This is a bit #text(18pt)[larger,]
 don't you think?
 ```

-Set rules may appear anywhere in the document. They can be thought of as
-default argument values of their respective function:
+Set 规则可能出现在文档的任何部分。它们可以被认为是其各自函数的默认参数值：

 ```example
 #set enum(numbering: "I.")
@@ -247,25 +219,15 @@ Good results can only be obtained by
 + checking the data for biases
 ```

-The `+` is syntactic sugar (think of it as an abbreviation) for a call to the
-[`{enum}`]($enum) function, to which we apply a set rule above.
-[Most syntax is linked to a function in this way.]($syntax) If you need to style
-an element beyond what its arguments enable, you can completely redefine its
-appearance with a [show rule]($styling/#show-rules) (somewhat comparable to
-`\renewcommand`).
-
-## How do I load a document class? { #templates }
-In LaTeX, you start your main `.tex` file with the `\documentclass{article}`
-command to define how your document is supposed to look. In that command, you
-may have replaced `article` with another value such as `report` and `amsart` to
-select a different look.
-
-When using Typst, you style your documents with [functions]($function).
-Typically, you use a template that provides a function that styles your whole
-document. First, you import the function from a template file. Then, you apply
-it to your whole document. This is accomplished with a
-[show rule]($styling/#show-rules) that wraps the following document in a given
-function. The following example illustrates how it works:
+`+` 是调用 [`{enum}`]($enum) 函数的语法糖（可以把它看作是一种简写），我们在上面应用了一个 Set 规则。
+从这个意义上讲，[大多数的特殊语法都是只是某一个函数的简写]($syntax)。
+
+如果你需要重新定义一个组件的样式（超过了修改其参数所能提供的），你可以通过 [Show 规则]($styling/#show-rules) 完全重定义其样式（与 LaTeX 中 `\renewcommand` 相似，类似于定义了一个宏）.
+
+## 如何加载一个文档类 / 模板？ { #templates }
+在 LaTeX 中，你可以使用 `\documentclass{article}` 来定义文档的样式。通过这个命令，你也可以通过把 `article` 更换为 `report`和 `amsart` 来更换文档的样式。
+
+在使用 Typst 中，你可以通过 [函数]($function) 来修改文档的样式。通常情况下，你可以使用模板中提供的函数来修改整个文档，使用方式如下：你可以通过 `#import` 来导入模板函数，然后你使用这个函数来对文档使用样式。具体的做法是通过 [Show 规则]($styling/#show-rules) 来将整个文档包装在这个函数中，具体如下：

 ```example:single
 >>> #let conf(
@@ -355,89 +317,72 @@ article by putting insightful
 paragraphs right here!
 ```

-The [`{import}`]($scripting/#modules) statement makes
-[functions]($function) (and other definitions) from another file available.
-In this example, it imports the `conf` function from the `conf.typ` file. This
-function formats a document as a conference article. We use a show rule to apply
-it to the document and also configure some metadata of the article. After
-applying the show rule, we can start writing our article right away!
+这里的 [`import`]($scripting/#modules) 命令，导入了在其他文件中声明的函数。在这个例子中，它从 `conf.typ` 中导入了 `conf` 函数。这个函数会将整个文档展示为一个会议论文。我们通过 Show 规则讲这个样式应用到全局，同时设置了文档的一些元数据。在应用 Show 规则之后，我们就可以开始写文章了。

 <div class="info-box">

-Functions are Typst's "commands" and can transform their arguments to an output
-value, including document _content._ Functions are "pure", which means that they
-cannot have any effects beyond creating an output value / output content. This
-is in stark contrast to LaTeX macros that can have arbitrary effects on your
-document.
-
-To let a function style your whole document, the show rule processes everything
-that comes after it and calls the function specified after the colon with the
-result as an argument. The `.with` part is a _method_ that takes the `conf`
-function and pre-configures some if its arguments before passing it on to the
-show rule.
+在 Typst 中，函数被称为"命令"，它们可以将其参数转化为输出值，包括文档 _内容_。
+函数是"纯净"的，这意味着它们除了创建一个输出值/输出内容外，不能产生任何其他效果。
+这与 LaTeX 的宏形成了鲜明的对比，后者可以对你的文档产生任意的效果。
+
+函数算作 Typst 的一种命令，而且可以将输入的参数转换为所需要的输出，包括内容块。在 Typst 中函数都是「过程的、纯的」，意味着他们除了返回值外不能有任何其他的副作用。
+这与 LaTeX 的宏形成了鲜明的对比，后者可以对你的文档产生任意的效果。
+
+要让一个函数为你的整个文档提供样式，显示规则会处理它后面的所有内容，并以结果为参数调用冒号后面指定的函数。
+`.with` 部分是一个方法，它接收 `conf` 函数，并在传递给显示规则之前预先配置它的一些参数。
+
+为了将一个样式应用到整个文档，Show 规则会把后续的所有内容都作为参数，传递给冒号后面定义的函数。`.with` 是函数对象的一个方法，它可以预设一些其他的默认参数（类似于柯里化），在传递给 Show 规则之前进行一些设置更改。
+
+译者注：`#show: conf.with(title: [标题])` 等价于 Lambda 表达式形式的 `#show: it => conf(title: [标题], it)`
 </div>

-In the web app, you can choose from predefined templates or even
-create your own using the template wizard. You can also check out the
-[`awesome-typst` repository](https://github.com/qjcg/awesome-typst) to find
-templates made by the community. We plan to add support for templates to Typst's
-package manager in the future.
-
-You can also [create your own, custom templates.]($tutorial/making-a-template)
-They are shorter and more readable than the corresponding LaTeX `.sty` files by
-orders of magnitude, so give it a try!
-
-## How do I load packages? { #packages }
-Typst is "batteries included," so the equivalent of many popular LaTeX packages
-is built right-in. Below, we compiled a table with frequently loaded packages
-and their corresponding Typst functions.
-
-| LaTeX Package                   | Typst Alternative                                             |
-|:--------------------------------|:------------------------------------------------------------- |
-| graphicx, svg                   | [`image`]($image) function                                    |
-| tabularx                        | [`table`]($table), [`grid`]($grid) functions                  |
-| fontenc, inputenc, unicode-math | Just start writing!                                           |
-| babel, polyglossia              | [`text`]($text.lang) function: `[#set text(lang: "zh")]`      |
-| amsmath                         | [Math mode]($category/math)                                   |
-| amsfonts, amssymb               | [`sym`]($category/symbols) module and [syntax]($syntax/#math) |
-| geometry, fancyhdr              | [`page`]($page) function                                      |
-| xcolor                          | [`text`]($text.fill) function: `[#set text(fill: rgb("#0178A4"))]` |
-| hyperref                        | [`link`]($link) function                                      |
-| bibtex, biblatex, natbib        | [`cite`]($cite), [`bibliography`]($bibliography) functions    |
-| lstlisting, minted              | [`raw`]($raw) function and syntax                             |
-| parskip                         | [`block`]($block.spacing) and [`par`]($par.first-line-indent) functions |
-| csquotes                        | Set the [`text`]($text.lang) language and type `["]` or `[']` |
-| caption                         | [`figure`]($figure) function                                  |
-| enumitem                        | [`list`]($list), [`enum`]($enum), [`terms`]($terms) functions |
-
-Although _many_ things are built-in, not everything can be. That's why Typst has
-a built-in [package manager]($packages) where the community can share their
-creations and automations. Let's take, for instance, the _tablex_ package: This
-package allows you to customize your tables in ways the built-in table does not
-yet support. To use tablex in your document, you can just write:
+在 Web App 中，你可以选择一些预先定义好的模板，甚至可以通过模板向导创建自己的模板。
+你也可以访问 [Awesome Typst 仓库](https://github.com/qjcg/awesome-typst) 来查看一些社区提供的模板。我们正在筹备为包管理器增加托管模板的能力（目前只能托管工具类包），在那之后这一切都会更加容易分享！
+
+你也可以 [创建你自己的自定义的模板]($tutorial/making-a-template)。它们比相应的 LaTeX 的 `.sty` 文件短得多，可读性也高得多，所以不妨一试!
+
+## 如何导入包？ { #packages }
+Typst 是 "即插即用" 的，所以许多流行的 LaTeX 包的对应功能是直接内置到 Typst 里的。
+在下面我们列出一些 LaTeX 中常用的包，和他们对应的 Typst 命令：
+
+| LaTeX 包                        | Typst 替代                                                            |
+|:--------------------------------|:---------------------------------------------------------------------|
+| graphicx, svg                   | [`image`]($image) 函数                                           |
+| tabularx                        | [`table`]($table), [`grid`]($grid) 函数                     |
+| fontenc, inputenc, unicode-math | 直接编写!                                                              |
+| babel, polyglossia              | [`text`]($text.lang) 函数： `[#set text(lang: "zh")]`            |
+| amsmath                         | [数学模式]($category/math)                                            |
+| amsfonts, amssymb               | [`sym`]($category/symbols) 模块和 [syntax]($syntax/#math)             |
+| geometry, fancyhdr              | [`page`]($page) 函数                                            |
+| xcolor                          | [`text`]($text.fill) 函数： `[#set text(fill: rgb("#0178A4"))]`  |
+| hyperref                        | [`link`]($link) 函数                                            |
+| bibtex, biblatex, natbib        | [`cite`]($cite), [`bibliography`]($bibliography) 函数      |
+| lstlisting, minted              | [`raw`]($raw) 函数和语法                                         |
+| parskip                         | [`block`]($block.spacing) 和 [`par`]($par.first-line-indent) 函数 |
+| csquotes                        | 设置 [`text`]($text.lang) 语言，并输入 `["]` or `[']`             |
+| caption                         | [`figure`]($figure) 函数                                        |
+| enumitem                        | [`list`]($list), [`enum`]($enum), [`terms`]($terms) 函数 |
+
+
+尽管 _很多_ 东西是内置的，但并非所有东西都可以内置。这就是为什么 Typst 有一个内置的 [包管理器]($packages)，社区可以在其中共享他们的工作和自动化工具。让我们以 _tablex_ 包为例：此包允许您以内置的表格尚不支持的方式自定义表格。要在文档中使用 tablex，您只需编写：

 ```typ
-#import "@preview/tablex:0.0.5": tablex, gridx
+#import "@preview/tablex:0.0.6": tablex, gridx
 ```

-(The `@preview` is a _namespace_ that is used while the package manager is still
-in its early and experimental state. It will be replaced in the future.)
+(`@preview` 是一个 _namespace_，在包管理器还处于早期和实验状态时使用，它将在将来被替换。)
+
+除了官方的软件包存储库，您可能还会想看
+[Awesome Typst 仓库](https://github.com/qjcg/awesome-typst)，其中集合了为 Typst 创建的资源精选列表。

-Aside from the official package repository, you might also want to check out the
-[awesome-typst repository](https://github.com/qjcg/awesome-typst), which
-compiles a curated list of resources created for Typst.
+译者注：以及 [Awesome Typst 中文仓库](https://github.com/typst-doc-cn/awesome-typst-cn)。

-If you need to load functions and variables from another file within your
-project, for example to use a template, you can use use the same
-[`{import}`]($scripting/#modules) statement with a file name rather than a
-package specification. To instead include the textual content of another file,
-you can use an [`{include}`]($scripting/#modules) statement. It will retrieve
-the content of the specified file and put it in your document.
+如果您需要从项目中的另一个文档加载函数和变量，例如使用模板，则可以使用相同的
+[`{import}`]($scripting/#modules) 语句，其中应该包含文档名，而不是特定的包。要包含另一个文档的文本内容,
+您可以使用 [`{include}`]($scripting/#modules) 语句。它将读取指定文档的内容，并将其直接置入文档中。

-## How do I input maths? { #maths }
-To enter math mode in Typst, just enclose your equation in dollar signs. You can
-enter display mode by adding spaces or newlines between the equation's contents
-and its enclosing dollar signs.
+## 如何输入数学公式？ { #maths }
+要在 Typst 中进入数学模式，只需将数学公式用 `$` 符号括起来。你可以通过在方程内容和其周围的 `$` 符号之间添加空格或换行来书写块状公式（行间公式）。

 ```example
 The sum of the numbers from
@@ -446,48 +391,33 @@ $1$ to $n$ is:
 $ sum_(k=1)^n k = (n(n+1))/2 $
 ```

-[Math mode]($category/math) works differently than regular markup or code mode.
-Numbers and single characters are displayed verbatim, while multiple consecutive
-(non-number) characters will be interpreted as Typst variables.
+[数学模式]($category/math) 的工作方式与普通标记或代码模式不同。数字和单个字符被逐字显示，而多个连续（非数字）字符将被解释为 Typst 变量。

-Typst pre-defines a lot of useful variables in math mode. All Greek (`alpha`,
-`beta`, ...) and some Hebrew letters (`alef`, `bet`, ...) are available through
-their name. Some symbols are additionally available through shorthands, such as
-`<=`, `>=`, and `->`.
+Typst 在数学模式下预先定义了很多有用的变量。所有希腊字母（`alpha`, `beta`, ...）和一些希伯来字母（`alef`, `bet`, ...）都可以通过它们的名字直接使用。
+一些符号还可以通过缩写轻松使用，如 `<=`、`>=` 和 `->`。

-Refer to the [symbol pages]($reference/symbols) for a full list of the symbols.
-If a symbol is missing, you can also access it through a
-[Unicode escape sequence]($syntax/#escapes).
+符号的完整列表请参考 [符号页面]($symbol)。如果缺少某些符号，你也可以通过 [Unicode 转义序列]($syntax/#escapes) 访问它。

-Alternate and related forms of symbols can often be selected by
-[appending a modifier]($symbol) after a period. For example,
-`arrow.l.squiggly` inserts a squiggly left-pointing arrow. If you want to insert
-multiletter text in your expression instead, enclose it in double quotes:
+符号的变体通常可以通过在句点后附加一个 [`.` 点修饰符]($symbol) 来选择。例如，`arrow.l.squiggly` 插入了一个向左倾斜的箭头。
+如果你想在你的表达式中插入多字母纯文本，可以用双引号将其括起来：

 ```example
 $ delta "if" x <= 5 $
 ```

-In Typst, delimiters will scale automatically for their expressions, just as if
-`\left` and `\right` commands were implicitly inserted in LaTeX. You can
-customize delimiter behavior using the [`lr` function]($math.lr). To
-prevent a pair of delimiters from scaling, you can escape them with backslashes.
+在 Typst 中，定界符将根据内部表达式自动缩放大小，就像在 LaTeX 中自动添加了隐藏的 `\left` 和 `\right` 命令一样。
+你可以使用 [`lr`]($math.lr) 函数自定义定界符的行为。如果你不需要对定界符进行缩放，你可以用反斜线转义定界符。

-Typst will automatically set terms around a slash `/` as a fraction while
-honoring operator precedence. All round parentheses not made redundant by the
-fraction will appear in the output.
+在不破坏运算优先级的前提下，Typst 会自动将斜线 `/` 的两端内容识别成分数。所有没必要的括号将不会出现在编译结果中：

 ```example
 $ f(x) = (x + 1) / x $
 ```

-[Sub- and superscripts]($math.attach) work similarly in Typst and LaTeX.
-`{$x^2$}` will produce a superscript, `{$x_2$}` yields a subscript. If you want
-to include more than one value in a sub- or superscript, enclose their contents
-in parentheses: `{$x_(a -> epsilon)$}`.
+[下标和上标]($math.attach) 在 Typst 和 LaTeX 中的作用是相似的。`{$x^2$}` 将产生一个上标，`{$x_2$}` 产生一个下标。
+如果你想在下标或上标中包含一个以上的值，请把它们的内容放在括号里：`$x_(a -> epsilon)$`。

-Since variables in math mode do not need to be prepended with a `#` or a `/`,
-you can also call functions without these special characters:
+由于数学模式下的变量不需要在前面加上 `#` 或 `/` ，所以你也可以无需额外的井号字符来调用函数：

 ```example
 $ f(x, y) := cases(
@@ -498,10 +428,8 @@ $ f(x, y) := cases(
 ) $
 ```

-The above example uses the [`cases` function]($math.cases) to describe f. Within
-the cases function, arguments are delimited using commas and the arguments are
-also interpreted as math. If you need to interpret arguments as Typst
-values instead, prefix them with a `#`:
+上面的例子用 [`cases`]($math.cases) 函数来表述 `f`。在 `cases` 函数中，参数用逗号来分隔，参数也被解释为数学模式下的内容。
+如果你需要传递 Typst 变量，可以用 `#` 号作为前缀使用：

 ```example
 $ (a + b)^2
@@ -510,10 +438,7 @@ $ (a + b)^2
   + b^2 $
 ```

-You can use all Typst functions within math mode and insert any content. If you
-want them to work normally, with code mode in the argument list, you can prefix
-their call with a `#`. Nobody can stop you from using rectangles or emoji as
-your variables anymore:
+在数学模式下，你可以使用任意的 Typst 函数或者任何内容，如果你希望他们正常工作，只需要使用 `#` 前缀，没人可以阻止你把长方体或者 emoji 表情作为参数传入：

 ```example
 $ sum^10_(🥸=1)
@@ -521,12 +446,9 @@ $ sum^10_(🥸=1)
   = 🧠 maltese $
 ```

-If you'd like to enter your mathematical symbols directly as Unicode, that is
-possible, too!
+如果你希望直接以 Unicode 形式输入数学符号，也是可以的。

-Math calls can have two-dimensional argument lists using `;` as a delimiter. The
-most common use for this is the [`mat` function]($math.mat) that creates
-matrices:
+数学调用可以有二维参数列表，使用 `;` 作为分隔符。这方面最常见的用途是使用 [`mat`]($math.mat) 函数创建矩阵：

 ```example
 $ mat(
@@ -537,18 +459,16 @@ $ mat(
 ) $
 ```

-## How do I get the "LaTeX look?" { #latex-look }
-Papers set in LaTeX have an unmistakeable look. This is mostly due to their
-font, Computer Modern, justification, narrow line spacing, and wide margins.
+## 如何获得 "LaTeX 外观"？ { #latex-look }
+用 LaTeX 编写的论文有一种美观且易于识别的外观。这主要是由于它们的字体 [Computer Modern](https://zh.wikipedia.org/wiki/Computer_Modern)、对齐方式、窄行距和宽边距。

-The example below
-- sets wide [margins]($page.margin)
-- enables [justification]($par.justify), [tighter lines]($par.leading) and
-  [first-line-indent]($par.first-line-indent)
-- [sets the font]($text.font) to "New Computer Modern", an OpenType derivative of
-  Computer Modern for both text and [code blocks]($raw)
-- disables paragraph [spacing]($block.spacing)
-- increases [spacing]($block.spacing) around [headings]($heading)
+下面是一个示例：
+- 设置宽 [边距]($page.margin)
+- 启用 [两端对齐]($par.justify), [更紧密的行间距]($par.leading)
+  和 [首行缩进]($par.first-line-indent)
+- 设置 [字体]($text.font) 为 "New Computer Modern"，这是一个适用于文本和 [代码块]($raw) 的 OpenType 变体
+- 禁用段落 [间距]($block.spacing)
+- 增加 [标题]($heading) 周围的 [间距]($block.spacing)

 ```typ
 #set page(margin: 1.75in)
@@ -559,38 +479,26 @@ The example below
 #show heading: set block(above: 1.4em, below: 1em)
 ```

-This should be a good starting point! If you want to go further, why not create
-a reusable template?
-
-## What limitations does Typst currently have compared to LaTeX? { #limitations }
-Although Typst can be a LaTeX replacement for many today, there are still
-features that Typst does not (yet) support. Here is a list of them which, where
-applicable, contains possible workarounds.
-
-- **Native charts and plots.** LaTeX users often create charts along with their
-  documents in PGF/TikZ. Typst does not yet include tools to draw diagrams, but
-  the community is stepping up with solutions such as
-  [`cetz`](https://github.com/johannes-wolf/typst-canvas). You can add those
-  to your document to get started with drawing diagrams.
-
-- **Change page margins without a pagebreak.** In LaTeX, margins can always be
-  adjusted, even without a pagebreak. To change margins in Typst, you use the
-  [`page` function]($page) which will force a page break. If you just want a few
-  paragraphs to stretch into the margins, then reverting to the old margins, you
-  can use the [`pad` function]($pad) with negative padding.
-
-- **Include PDFs as images.** In LaTeX, it has become customary to insert vector
-  graphics as PDF or EPS files. Typst supports neither format as an image
-  format, but you can easily convert both into SVG files with
-  [online tools](https://cloudconvert.com/pdf-to-svg) or
-  [Inkscape](https://inkscape.org/). We plan to add automatic conversion for
-  these file formats to the Typst web app, too!
-
-- **Page break optimization.** LaTeX runs some smart algorithms to not only
-  optimize line but also page breaks. While Typst tries to avoid widows and
-  orphans, it uses less sophisticated algorithms to determine page breaks. You
-  can insert custom page breaks in Typst using `[#pagebreak(weak: true)]` before
-  submitting your document. The argument `weak` ensures that no double page
-  break will be created if this spot would be a natural page break anyways. You
-  can also use `[#v(1fr)]` to distribute space on your page. It works quite
-  similar to LaTeX's `\vfill`.
+这应该是一个很好的起点! 如果你想更进一步，为什么不创建一个可重复使用的模板呢？
+
+## 与 LaTeX 相比，Typst 目前有哪些不足？ { #limitations }
+尽管现在 Typst 已经可以成为许多人的 LaTeX 替代品，但仍有一些功能是 Typst （尚）不支持的。
+这里列出了相应的不足，在一些情况下，也包含了可能的变通方法。
+
+- **本地图表和绘图。** LaTeX 用户经常在 PGF/TikZ 中与他们的文档一起创建图表。
+  Typst 还不包括绘制图表的工具，但社区正在加紧提供解决方案，如
+  [`cetz`](https://github.com/johannes-wolf/typst-canvas)。你可以把这些工具添加到你的文档中，开始画图。
+
+- **在没有分页符的情况下改变页边距。** LaTeX 中，你可以在不换页的前提下，调整页边距。
+  要在 Typst 中改变页边距，你要使用 [`page`]($page) 函数（会强制换页）。
+  如果你只想让几个段落伸进页边距，然后再恢复到旧的页边距，你可以使用带负数填充的 [`pad`]($pad) 函数。
+
+- **将 PDF 作为图像。** 在 LaTeX 中，插入 PDF 或 EPS 文件的矢量图已经成为一种习惯。
+  Typst 不支持这两种格式作为图像格式，但你可以用 [在线工具](https://cloudconvert.com/pdf-to-svg)
+  或 [Inkscape](https://inkscape.org/) 轻松地将这两种文件转换成 SVG 文件。我们计划在 Typst 的 Web 应用程序中也加入这些文件格式的自动转换功能。
+
+- **分页符优化。** LaTeX 的算法会智能优化换行符和换页符。Typst 虽然也会避免「孤儿」和「寡妇」的出现，但它所使用的算法远远不及 LaTeX 所使用的复杂。
+  你可以在提交文档前使用 `[#pagebreak(weak: true)]` 在 Typst 中插入自定义分页。
+  参数 `weak` 会保证：如果这里本来就该是很自然的换页，则不会插入两个换页符。
+  你也可以使用 `[#v(1fr)]` 在页面末尾插入一些空白，它的工作原理与 LaTeX 的 `\vfill` 相当类似。
+
\ No newline at end of file
diff --git a/docs/guides/page-setup.md b/docs/guides/page-setup.md
index 046bf9f4..5a87e32e 100644
--- a/docs/guides/page-setup.md
+++ b/docs/guides/page-setup.md
@@ -1,26 +1,19 @@
 ---
 description: |
-  An in-depth guide to setting page dimensions, margins, and page numbers in
-  Typst. Learn how to create appealing and clear layouts and get there quickly.
+  在 Typst 中设置页面尺寸、边距和页码的深入指南。
+  了解如何创建吸引人且清晰的布局并快速实现目标。
 ---

-# Page setup guide
-Your page setup is a big part of the first impression your document gives. Line
-lengths, margins, and columns influence
-[appearance](https://practicaltypography.com/page-margins.html) and
-[legibility](https://designregression.com/article/line-length-revisited-following-the-research)
-while the right headers and footers will help your reader easily navigate your
-document. This guide will help you to customize pages, margins, headers,
-footers, and page numbers so that they are the right fit for your content and
-you can get started with writing.
-
-In Typst, each page has a width, a height, and margins on all four sides. The
-top and bottom margins may contain a header and footer. The set rule of the
-[`{page}`]($page) element is where you control all of the page setup. If you
-make changes with this set rule, Typst will ensure that there is a new and
-conforming empty page afterward, so it may insert a page break. Therefore, it is
-best to specify your [`{page}`]($page) set rule at the start of your document or
-in your template.
+# 页面设置指南
+你的页面设置在文档的第一印象中起着重要作用。
+行长度、页边距和栏目布局影响着文档的[外观](https://practicaltypography.com/page-margins.html)和[易读性](https://designregression.com/article/line-length-revisited-following-the-research)，而合适的页眉、页脚可以帮助读者轻松地导航文档。
+本指南将帮助您自定义页面、页边距、页眉、页脚和页码，使其与你的内容完美匹配，让你能够开始写作。
+
+在 Typst 中，每个页面都有宽度、高度以及四个方向上的页边距。
+顶部和底部的页边距可以包含页眉和页脚。
+页面元素的设置规则是你控制页面设置的地方。
+如果你在这个设置规则中进行了更改，Typst 会确保在之后插入一个新的符合规范的空白页面，因此可能会插入分页符。
+因此，最好在文档开始或模板中指定你的 [`{page}`]($page) 设置规则。

 ```example
 #set rect(
@@ -41,25 +34,20 @@ in your template.
 #rect(fill: aqua)
 ```

-This example visualizes the dimensions for page content, headers, and footers.
-The page content is the page size (ISO B7) minus each side's default margin. In
-the top and the bottom margin, there are stroked rectangles visualizing the
-header and footer. They do not touch the main content, instead, they are offset
-by 30% of the respective margin. You can control this offset by specifying the
-[`header-ascent`]($page.header-ascent) and
-[`footer-descent`]($page.footer-descent) arguments.
-
-Below, the guide will go more into detail on how to accomplish common page setup
-requirements with examples.
-
-## Customize page size and margins { #customize-margins }
-Typst's default page size is A4 paper. Depending on your region and your use
-case, you will want to change this. You can do this by using the
-[`{page}`]($page) set rule and passing it a string argument to use a common page
-size. Options include the complete ISO 216 series (e.g. `"iso-a4"`, `"iso-c2"`),
-customary US formats like `"us-legal"` or `"us-letter"`, and more. Check out the
-reference for the [page's paper argument]($page.paper) to learn about all
-available options.
+这个示例可视化了页面内容、页眉和页脚的尺寸。
+页面内容是页面尺寸（ISO B7）减去每个边的默认页边距。
+在顶部和底部边距中，用绘制的矩形来可视化页眉和页脚。
+它们不接触主要内容，而是通过各自边距的 30% 偏移。
+你可以通过指定 [`header-ascent`]($page.header-ascent) 和 [`footer-descent`]($page.footer-descent) 参数来控制这个偏移量。
+
+接下来，本指南将更详细地介绍如何通过示例来满足常见的页面设置要求。
+
+## 自定义页面尺寸和页边距 { #customize-margins }
+Typst 的默认页面大小是 A4 纸张。
+根据你所在的地区和使用情况，你可能希望进行更改。
+你可以通过使用 [`{page}`]($page) 设置规则，并传递一个字符串参数来使用常见的页面大小来实现这一点。
+选项包括完整的 ISO 216 系列（例如 `"iso-a4"`、`"iso-c2"`）、美国习惯格式如 `"us-legal"` 或 `"us-letter"`，以及其他选项。
+查阅有关 [page 的 paper 参数]($page.paper)的参考文档，了解所有可用选项。

 ```example
 >>> #set page(margin: auto)
@@ -68,8 +56,7 @@ available options.
 This page likes freedom.
 ```

-If you need to customize your page size to some dimensions, you can specify the
-named arguments [`width`]($page.width) and [`height`]($page.height) instead.
+如果你需要根据特定尺寸自定义页面大小，可以使用命名参数 [`width`]($page.width) 和 [`height`]($page.height) 进行指定。

 ```example
 >>> #set page(margin: auto)
@@ -78,18 +65,14 @@ named arguments [`width`]($page.width) and [`height`]($page.height) instead.
 This page is a square.
 ```

-### Change the page's margins { #change-margins }
-Margins are a vital ingredient for good typography:
-[Typographers consider lines that fit between 45 and 75 characters best length
-for legibility](http://webtypography.net/2.1.2) and your margins and
-[columns](#columns) help define line widths. By default, Typst will create
-margins proportional to the page size of your document. To set custom margins,
-you will use the [`margin`]($page.margin) argument in the [`{page}`]($page) set
-rule.
+### 更改页边距 { #change-margins }
+边距是一个良好排版的重要组成部分：[排版师认为每行容纳 45 到 75 个字符的长度最适合易读性](http://webtypography.net/2.1.2)，而边距和[栏目](#columns)则有助于定义行宽。
+默认情况下，Typst 将根据文档的页面大小创建比例适当的边距。
+要设置自定义边距，你可以在 [`{page}`]($page) 设置规则中使用 [`margin`]($page.margin) 参数。

-The `margin` argument will accept a length if you want to set all margins to the
-same width. However, you often want to set different margins on each side. To do
-this, you can pass a dictionary:
+如果你想将所有边距设置为相同的宽度，`margin` 参数接受一个长度值。
+然而，通常情况下你可能希望在每个边上设置不同的边距。
+为了实现这一点，你可以传递一个字典：

 ```example
 #set page(margin: (
@@ -101,76 +84,61 @@ this, you can pass a dictionary:
 #lorem(100)
 ```

-The page margin dictionary can have keys for each side (`top`, `bottom`, `left`,
-`right`), but you can also control left and right together by setting the `x`
-key of the margin dictionary, like in the example. Likewise, the top and bottom
-margins can be adjusted together by setting the `y` key.
-
-If you do not specify margins for all sides in the margin dictionary, the old
-margins will remain in effect for the unset sides. To prevent this and set all
-remaining margins to a common size, you can use the `rest` key. For example,
-`[#set page(margin: (left: 1.5in, rest: 1in))]` will set the left margin to 1.5
-inches and the remaining margins to one inch.
-
-### Different margins on alternating pages { #alternating-margins }
-Sometimes, you'll need to alternate horizontal margins for even and odd pages,
-for example, to have more room towards the spine of a book than on the outsides
-of its pages. Typst keeps track of whether a page is to the left or right of the
-binding. You can use this information and set the `inside` or `outside` keys of
-the margin dictionary. The `inside` margin points towards the spine, and the
-`outside` margin points towards the edge of the bound book.
+页边距字典可以有每个边的键（`top`、`bottom`、`left`、`right`），但你也可以通过设置页边距字典的 `x` 键来同时控制左右边距，就像示例中所示。同样地，通过设置 `y` 键，可以同时调整顶部和底部边距。
+
+如果在页边距字典中没有为所有边指定边距，那么未设置的边将保持原有的边距设置。
+为了防止这种情况，并将所有剩余的边距设置为相同的大小，你可以使用 `rest` 键。
+例如，`[#set page(margin: (left: 1.5in, rest: 1in))]` 将把左边距设置为1.5英寸，其余边距设置为1英寸。
+
+### 在交替的页面上设置不同的边距 { #alternating-margins }
+有时候，你需要在奇偶页之间交替设置水平边距，例如，在书籍的内侧（靠近书脊）需要更多的空间，而在页面的外侧需要较小的边距。
+Typst 会跟踪每个页面是在书脊的左侧还是右侧。
+你可以利用这个信息，并设置边距字典的 `inside` 或 `outside` 键。
+`inside` 边距是指向书脊的边距，`outside` 边距是指向装订书籍边缘的边距。

 ```typ
 #set page(margin: (inside: 2.5cm, outside: 2cm, y: 1.75cm))
 ```

-Typst will assume that documents written in Left-to-Right scripts are bound on
-the left while books written in Right-to-Left scripts are bound on the right.
-However, you will need to change this in some cases: If your first page is
-output by a different app, the binding is reversed from Typst's perspective.
-Also, some books, like English-language Mangas are customarily bound on the
-right, despite English using Left-to-Right script. To change the binding side
-and explicitly set where the `inside` and `outside` are, set the
-[`binding`]($page.binding) argument in the [`{page}`]($page) set rule.
+Typst 假设从左到右书写的文档左侧装订，而从右到左书写的书籍右侧装订。
+然而，在某些情况下，你需要进行更改：如果你的第一页由其他应用程序生成，则从Typst的角度来看，装订方式会相反。
+此外，一些书籍，如英语漫画，尽管使用从左到右的写作顺序，但习惯上是右侧装订。
+为了改变装订的一侧并明确设置 `inside` 和 `outside` 的位置，你可以在 [`{page}`]($page) 设置规则中使用 [`binding`]($page.binding) 参数。

 ```typ
-// Produce a book bound on the right,
-// even though it is set in Spanish.
+// 尽管是用西班牙语编写的，但是制作一本右侧装订的书籍。
 #set text(lang: "es")
 #set page(binding: right)
 ```

-If `binding` is `left`, `inside` margins will be on the left on odd pages, and
-vice versa.
+如果 `binding` 参数设置为 `left`, 则在奇数页上，`inside` 边距将位于左侧，而偶数页上则相反。

-## Add headers and footers { #headers-and-footers }
-Headers and footers are inserted in the top and bottom margins of every page.
-You can add custom headers and footers or just insert a page number.
+## 添加页眉和页脚 { #headers-and-footers }
+每个页面的顶部和底部边距中都可以插入页眉和页脚。
+你可以添加自定义的页眉和页脚，或者只插入页码。

-In case you need more than just a page number, the best way to insert a header
-and a footer are the [`header`]($page.header) and [`footer`]($page.footer)
-arguments of the [`{page}`]($page) set rule. You can pass any content as their
-values:
+如果你需要更多内容而不仅仅是页码，最好的方法是使用 [`{page}`]($page) 设置规则中的 [`header`]($page.header) 和 [`footer`]($page.footer) 参数来插入页眉和页脚。你可以传递任何内容作为它们的值：

 ```example
 >>> #set page("a5", margin: (x: 2.5cm, y: 3cm))
-#set page(header: [
-  _Lisa Strassner's Thesis_
-  #h(1fr)
-  National Academy of Sciences
-])
+#set page(header: locate(loc => {
+  if counter(page).at(loc).first() > 1 [
+    _Lisa Strassner's Thesis_
+    #h(1fr)
+    National Academy of Sciences
+  ]
+}))

 #lorem(150)
 ```

-Headers are bottom-aligned by default so that they do not collide with the top
-edge of the page. You can change this by wrapping your header in the
-[`{align}`]($align) function.
+默认情况下，页眉是底部对齐的，以避免与页面顶部边缘发生冲突。
+如果你想修改对齐方式，可以将页眉内容包裹在 [`{align}`]($align) 函数中。

-### Different header and footer on specific pages { #specific-pages }
-You'll need different headers and footers on some pages. For example, you may
-not want a header and footer on the title page. The example below shows how to
-conditionally remove the header on the first page:
+### 在特定页面上使用不同的页眉和页脚 { #specific-pages }
+你可能需要在某些页面上使用不同的页眉和页脚。
+例如，你可能不希望在标题页上显示页眉和页脚。
+下面的示例展示了如何根据条件在第一页上移除页眉：

 ```typ
 >>> #set page("a5", margin: (x: 2.5cm, y: 3cm))
@@ -185,24 +153,19 @@ conditionally remove the header on the first page:
 #lorem(150)
 ```

-This example may look intimidating, but let's break it down: We are telling
-Typst that the header depends on the current [location]($locate). The `loc`
-value allows other functions to find out where on the page we currently are. We
-then ask Typst if the page [counter]($counter) is larger than one at our current
-position. The page counter starts at one, so we are skipping the header on a
-single page. Counters may have multiple levels. This feature is used for items
-like headings, but the page counter will always have a single level, so we can
-just look at the first one.
-
-You can, of course, add an `else` to this example to add a different header to
-the first page instead.
-
-### Adapt headers and footers on pages with specific elements { #specific-elements }
-The technique described in the previous section can be adapted to perform more
-advanced tasks using Typst's labels. For example, pages with big tables could
-omit their headers to help keep clutter down. We will mark our tables with a
-`<big-table>` [label]($label) and use the [query system]($query) to find out if
-such a label exists on the current page:
+这个示例可能看起来有点复杂，但我们来逐步解释一下：我们告诉 Typst 页眉取决于当前的[位置]($locate)。
+`loc` 值允许其他函数了解我们当前所在页面的位置。
+然后，我们询问 Typst 当前位置的页面计数器是否大于 1。
+页面计数器从 1 开始，所以我们在只有一页的情况下跳过页眉。
+计数器可以有多个级别。
+这个功能用于类似标题的项目，但页面计数器始终只有一个级别，所以我们只需要查看第一个级别。
+
+当然，你可以在这个示例中添加一个 `else` 语句，以在第一页上添加不同的页眉。
+
+### 根据特定元素在页面上调整页眉和页脚 { #specific-elements }
+先前指南中描述的一种技术，可以根据 Typst 的标签执行更高级的任务。
+例如，具有大型表格的页面可以省略页眉，以减少混乱。
+我们可以使用 `<big-table>` [标签]($label)来标记我们的表格，并使用[查询系统]($query)来判断当前页面是否存在这样的标签：

 ```typ
 >>> #set page("a5", margin: (x: 2.5cm, y: 3cm))
@@ -231,17 +194,16 @@ such a label exists on the current page:
 ) <big-table>
 ```

-Here, we query for all instances of the `<big-table>` label. We then check that
-none of the tables are on the page at our current position. If so, we print the
-header. This example also uses variables to be more concise. Just as above, you
-could add an `else` to add another header instead of deleting it.
+在这个示例中，我们查询所有 `<big-table>` 标签的实例。
+然后，我们检查当前位置的页面上是否有任何表格。
+如果没有，则打印页眉。
+这个示例还使用了变量以使代码更简洁。
+就像之前一样，你可以添加一个 `else` 语句来添加另一个页眉，而不是删除它。

-## Add and customize page numbers { #page-numbers }
-Page numbers help readers keep track of and reference your document more easily.
-The simplest way to insert page numbers is the [`numbering`]($page.numbering)
-argument of the [`{page}`]($page) set rule. You can pass a
-[_numbering pattern_]($numbering.numbering) string that shows how you want your
-pages to be numbered.
+## 添加和自定义页码 { #page-numbers }
+页码可以帮助读者更轻松地跟踪和引用你的文档。
+插入脚注的最简单方法是使用 [`{page}`]($page) 设置规则的 [`numbering`]($page.numbering) 参数。
+你可以传递一个表示页码格式的[_编号模式_]($numbering.numbering)字符串。

 ```example
 >>> #set page("iso-b6", margin: 1.75cm)
@@ -250,11 +212,12 @@ pages to be numbered.
 This is a numbered page.
 ```

-Above, you can check out the simplest conceivable example. It adds a single
-Arabic page number at the center of the footer. You can specify other characters
-than `"1"` to get other numerals. For example, `"i"` will yield lowercase Roman
-numerals. Any character that is not interpreted as a number will be output
-as-is. For example, put dashes around your page number by typing this:
+在上面的示例中，你可以看到最简单的示例。
+它在页脚的中央添加了一个阿拉伯数字的页码。
+你可以指定除了 `"1"` 之外的其他字符来获取其他数字形式。
+例如，使用 `"i"` 将生成小写的罗马数字。
+任何不被解释为数字的字符都将按原样输出。
+例如，要在页码周围加上破折号，可以输入以下内容：

 ```example
 >>> #set page("iso-b6", margin: 1.75cm)
@@ -263,8 +226,7 @@ as-is. For example, put dashes around your page number by typing this:
 This is a — numbered — page.
 ```

-You can add the total number of pages by entering a second number character in
-the string.
+你可以通过在字符串中添加第二个数字字符来添加总页数。

 ```example
 >>> #set page("iso-b6", margin: 1.75cm)
@@ -273,21 +235,16 @@ the string.
 This is one of many numbered pages.
 ```

-Go to the [`{numbering}` function reference]($numbering.numbering) to learn more
-about the arguments you can pass here.
+要了解可以在此处传递的参数，请查阅 [`{numbering}`]($numbering.numbering) 函数的参考文档。

-In case you need to right- or left-align the page number, use the
-[`number-align`]($page.number-align) argument of the [`{page}`]($page) set rule.
-Alternating alignment between even and odd pages is not currently supported
-using this property. To do this, you'll need to specify a custom footer with
-your footnote and query the page counter as described in the section on
-conditionally omitting headers and footers.
+如果你需要将页码右对齐或左对齐，可以使用 [`{page}`]($page) 设置规则的 [`number-align`]($page.number-align) 参数。
+然而，请注意，目前无法使用此属性实现偶数页和奇数页之间的交替对齐。
+要实现这一点，你需要指定一个自定义的页脚，并按照在有关有条件省略页眉和页脚的部分中描述的方式查询页面计数器。

-### Custom footer with page numbers
-Sometimes, you need to add other content than a page number to your footer.
-However, once a footer is specified, the [`numbering`]($page.numbering) argument
-of the [`{page}`]($page) set rule is ignored. This section shows you how to add
-a custom footer with page numbers and more.
+### 自定义带页码的页脚
+有时候，你需要在页脚中添加除了页码以外的其他内容。
+然而，一旦指定了页脚，[`{page}`]($page) 设置规则的 [`numbering`]($page.numbering) 参数将被忽略。
+本节将向你展示如何添加带有页码和其他内容的自定义页脚。

 ```example
 >>> #set page("iso-b6", margin: 1.75cm)
@@ -303,14 +260,12 @@ a custom footer with page numbers and more.
 This page has a custom footer.
 ```

-First, we add some strongly emphasized text on the left and add free space to
-fill the line. Then, we call `counter(page)` to retrieve the page counter and
-use its `display` function to show its current value. We also set `both` to
-`{true}` so that our numbering pattern applies to the current _and_ final page
-number.
+首先，我们在左侧添加了一些强调文本，并添加了自由空间来填充行。
+然后，我们调用 `counter(page)` 来获取页面计数器，并使用其 `display` 函数来显示当前值。
+我们还将 `both` 设置为 `{true}`，以便我们的编号模式适用于当前页码和最终页码。

-We can also get more creative with the page number. For example, let's insert a
-circle for each page.
+我们还可以对页码进行更有创意的处理。
+例如，让我们为每个页面插入一个圆圈。

 ```example
 >>> #set page("iso-b6", margin: 1.75cm)
@@ -334,48 +289,37 @@ circle for each page.
 This page has a custom footer.
 ```

-In this example, we use the number of pages to create an array of
-[circles]($circle). The circles are wrapped in a [box]($box) so they can all
-appear on the same line because they are blocks and would otherwise create
-paragraph breaks. The length of this [array]($array) depends on the current page
-number.
-
-We then insert the circles at the right side of the footer, with 1pt of space
-between them. The join method of an array will attempt to
-[_join_]($scripting/#blocks) the different values of an array into a single
-value, interspersed with its argument. In our case, we get a single content
-value with circles and spaces between them that we can use with the align
-function. Finally, we use another box to ensure that the text and the circles
-can share a line and use the [`inset` argument]($box.inset) to raise the circles
-a bit so they line up nicely with the text.
-
-### Reset the page number and skip pages { #skip-pages }
-Do you, at some point in your document, need to reset the page number? Maybe you
-want to start with the first page only after the title page. Or maybe you need
-to skip a few page numbers because you will insert pages into the final printed
-product.
-
-The right way to modify the page number is to manipulate the page
-[counter]($counter). The simplest manipulation is to set the counter back to 1.
+在这个示例中，我们根据页面数量创建了一个包含[圆圈]($circle)的数组。
+圆圈被包装在一个 [box]($box) 中，这样它们就可以出现在同一行上，因为它们是块级元素，否则会创建段落换行。
+该数组的长度取决于当前页码。
+
+然后，我们将圆圈插入到页脚的右侧，并在它们之间留出 1pt 的空间。
+数组的 [`join`]($scripting/#blocks) 方法将尝试将数组的不同值连接成一个单一的值，并以其参数为间隔插入。
+在我们的示例中，我们获得了一个带有圆圈和它们之间空格的单一内容值，我们可以将其与 `align` 函数一起使用。
+最后，我们使用另一个 `box` 来确保文本和圆圈可以共享一行，并使用 [`inset`]($box.inset) 参数将圆圈稍微提高，以便与文本对齐。
+
+### 重置页码或跳过页码 { #skip-pages }
+你是否需要在文档中的某个地方重置页码？
+也许你想在标题页之后开始。或者你需要跳过一些页码，因为你将在最终的打印产品中插入页面。
+
+正确修改页码的方式是操作页面计数器 [`counter`]($counter)。
+最简单的操作是将计数器设置回 1。

 ```typ
 #counter(page).update(1)
 ```

-This line will reset the page counter back to one. It should be placed at the
-start of a page because it will otherwise create a page break. You can also
-update the counter given its previous value by passing a function:
+这行代码将页码计数器重置为 1。
+它应该放置在页面的开头，否则会创建一个页面分隔。
+你也可以通过传递一个函数来更新计数器，给定其先前的值：

 ```typ
 #counter(page).update(n => n + 5)
 ```

-In this example, we skip five pages. `n` is the current value of the page
-counter and `n + 5` is the return value of our function.
+在这个示例中，我们跳过了五页。`n` 是页面计数器的当前值，`n + 5` 是我们函数的返回值。

-In case you need to retrieve the actual page number instead of the value of the
-page counter, you can use the [`page`]($locate) method on the argument of the
-`{locate}` closure:
+如果你需要获取实际的页码而不是页面计数器的值，你可以在 `locate` 闭包的参数上使用 [`{page}`]($page) 方法：

 ```example
 #counter(page).update(n => n + 5)
@@ -385,16 +329,14 @@ page counter, you can use the [`page`]($locate) method on the argument of the
 #locate(loc => loc.page())
 ```

-You can also obtain the page numbering pattern from the `{locate}` closure
-parameter with the [`page-numbering`]($locate) method.
+你还可以通过 `locate` 闭包参数使用 [`page-numbering`]($locate) 方法获取页码编号模式。

-## Add columns { #columns }
-Add columns to your document to fit more on a page while maintaining legible
-line lengths. Columns are vertical blocks of text which are separated by some
-whitespace. This space is called the gutter.
+## 添加栏 { #columns }
+要在文档中保持易读行长度的同时适应更多内容，请使用栏。
+栏是由一些空白分隔的垂直文本块。
+这个空白区域被称为 gutter（装订线）。

-If all of your content needs to be laid out in columns, you can just specify the
-desired number of columns in the [`{page}`]($page.columns) set rule:
+如果你的所有内容都需要以栏的方式布局，你可以在 [`{page}`]($page.columns) 设置规则中指定所需的栏数：

 ```example
 >>> #set page(height: 120pt)
@@ -402,16 +344,13 @@ desired number of columns in the [`{page}`]($page.columns) set rule:
 #lorem(30)
 ```

-If you need to adjust the gutter between the columns, refer to the method used
-in the next section.
+如果你需要调整栏之间的装订线，请参考下一节中使用的方法。

-### Use columns anywhere in your document { #columns-anywhere }
-Very commonly, scientific papers have a single-column title and abstract, while
-the main body is set in two-columns. To achieve this effect, Typst includes a
-standalone [`{columns}` function]($columns) that can be used to insert columns
-anywhere on a page.
+### 在文档的任何位置使用栏 { #columns-anywhere }
+在科学论文中，非常常见的是标题和摘要以单栏形式呈现，而正文以双栏形式呈现。
+为了实现这种效果，Typst 包含了一个独立的 [`{columns}`]($columns) 函数，可以在页面的任何位置插入栏。

-Conceptually, the `columns` function must wrap the content of the columns:
+从概念上讲，`columns` 函数必须包含列的内容：

 ```example:single
 >>> #set page(height: 180pt)
@@ -425,8 +364,7 @@ Conceptually, the `columns` function must wrap the content of the columns:
 ]
 ```

-However, we can use the ["everything show rule"]($styling/#show-rules) to reduce
-nesting and write more legible Typst markup:
+然而，我们可以使用 ["everything show rule"]($styling/#show-rules) 来减少嵌套并编写更易读的 Typst 标记：

 ```example:single
 >>> #set page(height: 180pt)
@@ -440,12 +378,10 @@ nesting and write more legible Typst markup:
 #lorem(80)
 ```

-The show rule will wrap everything that comes after it in its function. The
-[`with` method]($function.with) allows us to pass arguments, in this case, the
-column count, to a function without calling it.
+显示规则将会将其后的所有内容包裹在它的函数中。
+[`with`]($function.with) 方法允许我们向函数传递参数，本例中是栏数，而无需调用该函数。

-Another use of the `columns` function is to create columns inside of a container
-like a rectangle or to customize gutter size:
+`columns` 函数的另一个用法是在类似矩形的容器内创建栏，或者自定义装订线的大小：

 ```example
 #rect(
@@ -462,23 +398,20 @@ like a rectangle or to customize gutter size:
 )
 ```

-### Balanced columns
-If the columns on the last page of a document differ greatly in length, they may
-create a lopsided and unappealing layout. That's why typographers will often
-equalize the length of columns on the last page. This effect is called balancing
-columns. Typst cannot yet balance columns automatically. However, you can
-balance columns manually by placing [`[#colbreak()]`]($colbreak) at an
-appropriate spot in your markup, creating the desired column break manually.
-
-
-## One-off modifications
-You do not need to override your page settings if you need to insert a single
-page with a different setup. For example, you may want to insert a page that's
-flipped to landscape to insert a big table or change the margin and columns for
-your title page. In this case, you can call [`{page}`]($page) as a function with
-your content as an argument and the overrides as the other arguments. This will
-insert enough new pages with your overridden settings to place your content on
-them. Typst will revert to the page settings from the set rule after the call.
+### 平衡栏的长度
+如果文档的最后一页上的栏长度差异很大，可能会产生不平衡和不吸引人的布局。
+这就是为什么排版师经常会在最后一页上平衡栏的长度。
+这种效果称为平衡栏。
+Typst 目前无法自动平衡栏。
+然而，你可以通过在你的标记中适当的位置放置 [`[#colbreak()]`]($colbreak) 来手动平衡栏，从而手动创建所需的栏分隔。
+
+
+## 单次修改
+如果你只需要插入一个具有不同设置的单独页面，就无需覆盖整个页面设置。
+例如，你可能想插入一个横向页面以插入一个大表格，或者为标题页更改边距和列数。
+在这种情况下，你可以将 [`{page}`]($page) 作为一个带有内容作为参数和其他参数为覆盖设置的函数进行调用。
+这将插入足够多的新页面，并使用你的覆盖设置来放置你的内容。
+在调用结束后，Typst 将恢复到设置规则中的页面设置。

 ```example
 >>> #set page("a6")
diff --git a/docs/guides/welcome.md b/docs/guides/welcome.md
index 9714518b..a69cd107 100644
--- a/docs/guides/welcome.md
+++ b/docs/guides/welcome.md
@@ -1,13 +1,11 @@
 ---
-description: Guides for Typst.
+description: Typst 指南。
 ---

-# Guides
-Welcome to the Guides section! Here, you'll find helpful material for specific
-user groups or use cases. Currently, two guides are available: An introduction
-to Typst for LaTeX users, and a detailed look at page setup. Feel free to
-propose other topics for guides!
+# 指南
+欢迎来到指南部分！在这里，您可以找到针对特定用户组或使用案例的有用资料。
+目前，仅有两个指南：面向 LaTeX 用户的 Typst 介绍，以及页面设置指南。欢迎为指南部分提出其他话题！

-## List of Guides
-- [Guide for LaTeX users]($guides/guide-for-latex-users)
-- [Page setup guide]($guides/page-setup-guide)
+## 指南列表 { #list-of-guides }
+- [LaTeX 用户指南]($guides/guide-for-latex-users)
+- [页面设置指南]($guides/page-setup)
diff --git a/docs/overview.md b/docs/overview.md
index bc7f14fc..d6a77550 100644
--- a/docs/overview.md
+++ b/docs/overview.md
@@ -1,18 +1,14 @@
 ---
 description: |
-  Learn how to use Typst to compose documents faster. Get started with the
-  tutorial, or dive into the reference.
+  了解如何更好地使用 Typst 撰写文档。开始阅读教程，或深入了解参考资料。
 ---

-# Overview
-Welcome to Typst's documentation! Typst is a new markup-based typesetting system
-for the sciences. It is designed to be an alternative both to advanced tools
-like LaTeX and simpler tools like Word and Google Docs. Our goal with Typst is
-to build a typesetting tool that is highly capable _and_ a pleasure to use.
+# 概览
+欢迎阅读 Typst 的中文文档！Typst 是为科学写作而诞生的基于标记的排版系统。
+它被设计之初就是作为一种替代品，用于替代像 LaTeX 这样的高级工具，又或者是像 Word 和 Google Docs 这样的简单工具。
+我们对 Typst 的目标是构建一个功能强大的排版工具，并且让用户可以愉快地使用它。

-This documentation is split into two parts: A beginner-friendly tutorial that
-introduces Typst through a practical use case and a comprehensive reference that
-explains all of Typst's concepts and features.

-We also invite you to join the community we're building around Typst. Typst is
-still a very young project, so your feedback is more than valuable.
+本文档分为两部分：一个适合初学者的教程，其通过实际用例介绍 Typst；以及一个全面的参考，以解释 Typst 的所有概念和功能。
+
+我们还邀请您加入我们为 Typst 建立的社区。Typst 仍是一个非常年轻的项目，因此我们非常希望能够得到您的反馈。
diff --git a/docs/reference/groups.yml b/docs/reference/groups.yml
index 5ae564b2..7ea0f0c1 100644
--- a/docs/reference/groups.yml
+++ b/docs/reference/groups.yml
@@ -1,42 +1,35 @@
-# This is responsible for the fact that certain math functions are grouped
-# together into one documentation page although they are not part of any scope.
-
 - name: variants
-  title: Variants
+  title: 变体
   category: math
   path: ["math"]
   filter: ["serif", "sans", "frak", "mono", "bb", "cal"]
   details: |
-    Alternate typefaces within formulas.
+    公式中的备用字体。

-    These functions are distinct from the [`text`]($text) function because math
-    fonts contain multiple variants of each letter.
+    这些函数与 [`text`]($text) 函数不同，因为数学字体包含每个字母的多个变体。

 - name: styles
-  title: Styles
+  title: 样式
   category: math
   path: ["math"]
   filter: ["upright", "italic", "bold"]
   details: |
-    Alternate letterforms within formulas.
+    公式中的备用字形。

-    These functions are distinct from the [`text`]($text) function because math
-    fonts contain multiple variants of each letter.
+    这些函数与 [`text`]($text) 函数不同，因为数学字体包含每个字母的多个变体。

 - name: sizes
-  title: Sizes
+  title: 大小
   category: math
   path: ["math"]
   filter: ["display", "inline", "script", "sscript"]
   details: |
-    Forced size styles for expressions within formulas.
+    强制公式中表达式的大小样式。

-    These functions allow manual configuration of the size of equation elements
-    to make them look as in a display/inline equation or as if used in a root or
-    sub/superscripts.
+    这些函数允许手动配置方程元素的大小，使其看起来像在显示/行内方程中使用或像在根或上/下标中使用一样。

 - name: underover
-  title: Under/Over
+  title: 下方/上方
   category: math
   path: ["math"]
   filter: [
@@ -48,63 +41,53 @@
     "overbracket",
   ]
   details: |
-    Delimiters above or below parts of an equation.
+    方程的部分上方或下方的定界符。

-    The braces and brackets further allow you to add an optional annotation
-    below or above themselves.
+    大括号和方括号还允许在它们自己的下方或上方添加可选的注释。

 - name: roots
-  title: Roots
+  title: 根
   category: math
   path: ["math"]
   filter: ["root", "sqrt"]
   details: |
-    Square and non-square roots.
+    平方根和非平方根。

-    # Example
+    # 示例
     ```example
     $ sqrt(3 - 2 sqrt(2)) = sqrt(2) - 1 $
     $ root(3, x) $
     ```

 - name: attach
-  title: Attach
+  title: 附加
   category: math
   path: ["math"]
   filter: ["attach", "scripts", "limits"]
   details: |
-    Subscript, superscripts, and limits.
+    下标、上标和限制。

-    Attachments can be displayed either as sub/superscripts, or limits. Typst
-    automatically decides which is more suitable depending on the base, but you
-    can also control this manually with the `scripts` and `limits` functions.
+    附件可以显示为上/下标或限制。Typst 会根据基数自动决定哪个更适合，但您还可以使用 `scripts` 和 `limits` 函数手动控制。

-    # Example
+    # 示例
     ```example
     $ sum_(i=0)^n a_i = 2^(1+i) $
     ```

-    # Syntax
-    This function also has dedicated syntax for attachments after the base: Use
-    the underscore (`_`) to indicate a subscript i.e. bottom attachment and the
-    hat (`^`) to indicate a superscript i.e. top attachment.
+    # 语法
+    此函数还具有用于在基数之后附加的专用语法：使用下划线 (`_`) 表示下标，即底部附件，使用脱帽 (`^`) 表示上标，即顶部附件。

 - name: lr
-  title: Left/Right
+  title: 左/右
   category: math
   path: ["math"]
   filter: ["lr", "mid", "abs", "norm", "floor", "ceil", "round"]
   details: |
-    Delimiter matching.
+    定界符匹配。

-    The `lr` function allows you to match two delimiters and scale them with the
-    content they contain. While this also happens automatically for delimiters
-    that match syntactically, `lr` allows you to match two arbitrary delimiters
-    and control their size exactly. Apart from the `lr` function, Typst provides
-    a few more functions that create delimiter pairings for absolute, ceiled,
-    and floored values as well as norms.
+    `lr` 函数允许您匹配两个定界符并按其包含的内容缩放它们。虽然在语法上匹配的定界符也会自动进行，但 `lr` 允许您匹配两个任意的定界符并精确控制它们的大小。除了 `lr` 函数外，Typst 还提供了一些创建绝对值、上取整和下取整值以及范数的定界符配对的其他函数。

-    # Example
+    # 示例
     ```example
     $ [a, b/2] $
     $ lr(]sum_(x=1)^n] x, size: #50%) $
@@ -112,48 +95,39 @@
     ```

 - name: calc
-  title: Calculation
+  title: 计算
   category: foundations
   path: ["calc"]
   details: |
-    Module for calculations and processing of numeric values.
+    用于计算和处理数字值的模块。

-    These definitions are part of the `calc` module and not imported by default.
-    In addition to the functions listed below, the `calc` module also defines
-    the constants `pi`, `tau`, `e`, `inf`, and `nan`.
+    这些定义是 `calc` 模块的一部分，不会默认导入。除了下面列出的功能之外，`calc` 模块还定义了常量 `pi`、`tau`、`e`、`inf` 和 `nan`。

 - name: sys
-  title: System
+  title: 系统
   category: foundations
   path: ["sys"]
   details: |
-    Module for system interactions.
+    用于系统交互的模块。

-    Currently, this module defines a single item: The `sys.version` constant
-    (of type [`version`]($version)), that specifies the currently active
-    Typst compiler version.
+    目前，此模块定义了一个项目：`sys.version` 常量（类型为 [`version`]($version)），指定当前活动的 Typst 编译器版本。

 - name: sym
-  title: General
+  title: 通用
   category: symbols
   path: ["sym"]
   details: |
-    Named general symbols.
+    命名的通用符号。

-    For example, `#sym.arrow` produces the → symbol. Within
-    [formulas]($category/math), these symbols can be used without the `#sym.`
-    prefix.
+    例如，`#sym.arrow` 生成 → 符号。在 [公式]($category/math) 中，这些符号可以在没有 `#sym.` 前缀的情况下使用。

-    The `d` in an integral's `dx` can be written as `[$dif x$]`.
-    Outside math formulas, `dif` can be accessed as `math.dif`.
+    积分中的 `dx` 中的 `d` 可以写为 `[$dif x$]`。在数学公式之外，`dif` 可以作为 `math.dif` 访问。

 - name: emoji
-  title: Emoji
+  title: 表情符号
   category: symbols
   path: ["emoji"]
   details: |
-    Named emoji.
+    命名的表情符号。

-    For example, `#emoji.face` produces the 😀 emoji. If you frequently use
-    certain emojis, you can also import them from the `emoji` module (`[#import
-    emoji: face]`) to use them without the `#emoji.` prefix.
+    例如，`#emoji.face` 生成 😀 表情符号。如果经常使用某些表情符号，还可以从 `emoji` 模块导入它们（`[#import emoji: face]`）以在没有 `#emoji.` 前缀的情况下使用它们。
diff --git a/docs/reference/scripting.md b/docs/reference/scripting.md
index 668fe1e7..4b854b41 100644
--- a/docs/reference/scripting.md
+++ b/docs/reference/scripting.md
@@ -1,20 +1,19 @@
 ---
-description: Automate your document with Typst's scripting capabilities.
+description: 使用 Typst 的脚本功能使得文档更加自动化。
 ---

-# Scripting
-Typst embeds a powerful scripting language. You can automate your documents and
-create more sophisticated styles with code. Below is an overview over the
-scripting concepts.
+# 脚本

-## Expressions
-In Typst, markup and code are fused into one. All but the most common elements
-are created with _functions._ To make this as convenient as possible, Typst
-provides compact syntax to embed a code expression into markup: An expression is
-introduced with a hash (`#`) and normal markup parsing resumes after the
-expression is finished. If a character would continue the expression but should
-be interpreted as text, the expression can forcibly be ended with a semicolon
-(`;`).
+Typst 内置了一个强大的脚本语言。可以使用代码自动生成文档，生成丰富多彩的样式。
+下面是关于脚本语言的综述。
+
+## 表达式 { #expressions }
+
+Typst 里面，标记和代码相互交融在一起。
+除了最常用的文档元素，其他所有均是由 _函数_ 生成。
+为了尽可能的便利，Typst 设计了精巧的语法，用来将代码嵌入在标记中：用 `#`(井号) 来引入一个代码表达式，
+表达式结束后，再恢复到正常的标记语法解析。
+有些字符能够使其后字符继续解析为表达式，如果想将其解释为文本，可以用分号(`;`)来强制结束表达式解析。

 ```example
 #emph[Hello] \
@@ -22,37 +21,31 @@ be interpreted as text, the expression can forcibly be ended with a semicolon
 #"hello".len()
 ```

-The example above shows a few of the available expressions, including
-[function calls]($function), [field accesses]($scripting/#fields), and
-[method calls]($scripting/#methods). More kinds of expressions are
-discussed in the remainder of this chapter. A few kinds of expressions are not
-compatible with the hash syntax (e.g. binary operator expressions). To embed
-these into markup, you can use parentheses, as in `[#(1 + 2)]`.
-
-## Blocks
-To structure your code and embed markup into it, Typst provides two kinds of
-_blocks:_
-
-- **Code block:** `{{ let x = 1; x + 2 }}` \
-  When writing code, you'll probably want to split up your computation into
-  multiple statements, create some intermediate variables and so on. Code blocks
-  let you write multiple expressions where one is expected. The individual
-  expressions in a code block should be separated by line breaks or semicolons.
-  The output values of the individual expressions in a code block are joined to
-  determine the block's value. Expressions without useful output, like `{let}`
-  bindings yield `{none}`, which can be joined with any value without effect.
-
-- **Content block:** `{[*Hey* there!]}` \
-  With content blocks, you can handle markup/content as a programmatic value,
-  store it in variables and pass it to [functions]($function). Content
-  blocks are delimited by square brackets and can contain arbitrary markup. A
-  content block results in a value of type [content]($content). An
-  arbitrary number of content blocks can be passed as trailing arguments to
-  functions. That is, `{list([A], [B])}` is equivalent to `{list[A][B]}`.
-
-Content and code blocks can be nested arbitrarily. In the example below,
-`{[hello]}` is joined with the output of  `{a + [ the ] + b}` yielding
-`{[hello from the *world*]}`.
+上面示例展示了一些用到的表达式，
+有[函数调用]($function)，
+[字段访问]($scripting/#fields)，
+[方法调用]($scripting/#methods)。
+本章余下部分讲解更多类型表达式。
+有几种表达式与井号语法不一致（比如二元运算表达式），
+如果需要插入标记模式中，需要使用圆括号，比如 `[#(1+2)]`。
+
+## 块 { #blocks }
+为了架构代码以及将标记嵌入代码中，Typst 设计了两种 _块_：
+
+- **代码块：** `{{ let x = 1; x + 2 }}` \
+  编写代码时，一个计算过程可能需要分解为多个语句，创建多个中间变量，等等。
+  可以将多个表达式组成一个代码块，就像一个表达式一样。在代码块中，多个表达式由换行符或者分号分割。
+  其中每个表达式的输出值被合并起来，作为代码块的值。
+  有些表达式没有有用的输出，比如 `{let}` 绑定返回 `{none}`，与其他值合并，没有任何效果。
+
+- **文档内容块** `{[*Hey* there!]}` \
+  使用文档内容块，可以将标记/文档内容作为可编程值，存储到变量，传送给[函数]($function)。
+  文档内容块由方括号包裹，可以包含任何标记。
+  一个文档内容块产生一个 [content 类型]($content)的值。
+  文档内容块可以后缀参数形式任意多个传递给函数，就是说，`{list[A][B]}` 等效于 `{list([A], [B])}`。
+
+文档内容块和代码块可以相互内嵌，下面示例中，`{[hello]}` 与 `{a + [ the ] + b}` 合并，生成 `{[hello from the *world*]}`。
+

 ```example
 #{
@@ -63,13 +56,12 @@ Content and code blocks can be nested arbitrarily. In the example below,
 }
 ```

-## Bindings and Destructuring { #bindings }
-As already demonstrated above, variables can be defined with `{let}` bindings.
-The variable is assigned the value of the expression that follows the `=` sign.
-The assignment of a value is optional, if no value is assigned, the variable
-will be initialized as `{none}`. The `{let}` keyword can also be used to create
-a [custom named function]($function/#defining-functions). Let bindings can be
-accessed for the rest of the containing block or document.
+## 绑定和解构 { #bindings }
+
+上面已经展示，变量由 `{let}` 绑定定义。
+= 符号后表达式的值被赋值给变量，这里赋值可以被省略，如果没有赋值，变量会初始化为 `{none}`。
+`{let}` 关键词也可以用来生成一个[自定义的有名函数]($function/#definitions)。
+let 绑定的变量可以在接下来的块中或者文档中被访问。

 ```example
 #let name = "Typst"
@@ -80,11 +72,9 @@ It explains #name.
 Sum is #add(2, 3).
 ```

-Let bindings can also be used to destructure [arrays]($array) and
-[dictionaries]($dictionary). In this case, the left-hand side of the
-assignment should mirror an array or dictionary. The `..` operator can be used
-once in the pattern to collect the remainder of the array's or dictionary's
-items.
+let 绑定也常用来解构[数组]($array)和[字典]($dictionary)，
+解构时，等号左边的形式需要与数组或字典相似，
+`..` 模式操作符只可被使用一次，用来指代数组或字典剩余的条目。

 ```example
 #let (x, y) = (1, 2)
@@ -112,14 +102,14 @@ Homer wrote #h.
 ]
 ```

-You can use the underscore to discard elements in a destructuring pattern:
+在解构匹配模式中，可以使用 _ 下划线来丢弃一个元素。

 ```example
 #let (_, y, _) = (1, 2, 3)
 The y coordinate is #y.
 ```

-Destructuring also work in argument lists of functions ...
+解构形式也可用于函数的参数列表中...

 ```example
 #let left = (2, 4, 5)
@@ -129,8 +119,7 @@ Destructuring also work in argument lists of functions ...
 )
 ```

-... and on the left-hand side of normal assignments. This can be useful to
-swap variables among other things.
+... 和普通赋值的左半部分，这通常用于交换两个变量的值。

 ```example
 #{
@@ -141,12 +130,11 @@ swap variables among other things.
 }
 ```

-## Conditionals
-With a conditional, you can display or compute different things depending on
-whether some condition is fulfilled. Typst supports `{if}`, `{else if}` and
-`{else}` expression. When the condition evaluates to `{true}`, the conditional
-yields the value resulting from the if's body, otherwise yields the value
-resulting from the else's body.
+## 条件控制 { #conditionals }
+
+使用条件控制语句，可以根据某种条件是否满足，来展示或计算不同的事情。
+Typst 设计了 `{if}`, `{else if}`, `{else}` 表达式。
+当条件值为 `{true}` 时，条件语句会返回 if 从句的值，否则返回 else 从句的值。

 ```example
 #if 1 < 2 [
@@ -156,23 +144,22 @@ resulting from the else's body.
 ]
 ```

-Each branch can have a code or content block as its body.
+每个分支从句可以写为语句块或者文档内容块。

 - `{if condition {..}}`
 - `{if condition [..]}`
 - `{if condition [..] else {..}}`
 - `{if condition [..] else if condition {..} else [..]}`

-## Loops
-With loops, you can repeat content or compute something iteratively. Typst
-supports two types of loops: `{for}` and `{while}` loops. The former iterate
-over a specified collection whereas the latter iterate as long as a condition
-stays fulfilled. Just like blocks, loops _join_ the results from each iteration
-into one value.
+## 循环控制 { #loops }

-In the example below, the three sentences created by the for loop join together
-into a single content value and the length-1 arrays in the while loop join
-together into one larger array.
+使用循环控制语句，可以反复的显示文档内容或者计算。
+Typst 支持两种循环控制： `{for}` 循环和 `{while}` 循环。
+`{for}` 循环用来遍历特定集合，`{while}` 循环根据某条件是否满足来决定是否再次迭代循环。
+和块类似，循环结构 _合并_ 每一次迭代循环的结果。
+
+下面示例中，for 循环生成了三句话，然后将其合并成一个文档内容。
+while 循环生成数个长度为1的数组，然后将其合并成一个大数组。

 ```example
 #for c in "ABC" [
@@ -186,26 +173,21 @@ together into one larger array.
 }
 ```

-For loops can iterate over a variety of collections:
+for 循环可以遍历多种集合：

 - `{for letter in "abc" {..}}` \
-  Iterates over the characters of the [string]($str).
-  (Technically, iterates over the grapheme clusters of the string. Most of the
-  time, a grapheme cluster is just a single character/codepoint. However, some
-  constructs like flag emojis that consist of multiple codepoints are still only
-  one cluster.)
+  遍历[字符串]($str)的每个字符。
+  （专业的说，是遍历字符串的每个形位符，大多时候，一个形位符对应一个字符/码位，
+  然而，有些表情标记符号由多个码位组成，但它仍然是一个形位符）。

 - `{for value in array {..}}` \
-  Iterates over the items in the [array]($array). The destructuring syntax
-  described in [Let binding]($scripting/#bindings) can also be used here.
+  遍历[数组]($array)中的条目。[let 绑定]($scripting/#bindings)中的解构语法也可使用于此。

 - `{for pair in dict {..}}` \
-  Iterates over the key-value pairs of the [dictionary]($dictionary).
-  The pairs can also be destructured by using `{for (key, value) in dict {..}}`.
+  遍历[字典]($dictionary)的键值对。键值对也可以用 `{for (key, value) in dict {..}}` 语法解构。

-To control the execution of the loop, Typst provides the `{break}` and
-`{continue}` statements. The former performs an early exit from the loop while
-the latter skips ahead to the next iteration of the loop.
+Typst 用 `{break}` 和 `{continue}` 语句来控制循环的执行，
+`{break}` 用来跳出循环，`{continue}` 用来提前结束本次循环，然后执行下一次循环。

 ```example
 #for letter in "abc nope" {
@@ -216,24 +198,19 @@ the latter skips ahead to the next iteration of the loop.
   letter
 }
 ```
-
-The body of a loop can be a code or content block:
+循环体可以是代码块，也可以是文档内容块：

 - `{for .. in collection {..}}`
 - `{for .. in collection [..]}`
 - `{while condition {..}}`
 - `{while condition [..]}`

-## Fields
-You can use _dot notation_ to access fields on a value. The value in question
-can be either:
-- a [dictionary]($dictionary) that has the specified key,
-- a [symbol]($symbol) that has the specified modifier,
-- a [module]($module) containing the specified definition,
-- [content]($content) consisting of an element that has the specified field. The
-  available fields match the arguments of the
-  [element function]($function/#element-functions) that were given when the
-  element was constructed.
+## 字段 { #fields }
+可以使用 _点号_ 来访问一个值的字段，这个值可以是：
+- 有特定键的[字典]($dictionary)，
+- 有变体的[符号]($symbol)，
+- 有定义的[模块]($module)，
+- 有特定字段的[文档元素]($content)，可访问的字段与文档元素的[构造函数]($function/#element-functions)参数相匹配。

 ```example
 #let dict = (greet: "Hello")
@@ -279,19 +256,17 @@ In some cases, when the method is only called for its side effect, its return
 value should be ignored (and not participate in joining). The canonical way to
 discard a value is with a let binding: `{let _ = array.remove(1)}`.

-## Modules
-You can split up your Typst projects into multiple files called _modules._ A
-module can refer to the content and definitions of another module in multiple
-ways:
+## 模块 { #modules }

-- **Including:** `{include "bar.typ"}` \
-  Evaluates the file at the path `bar.typ` and returns the resulting
-  [content]($content).
+一个 Typst 工程项目可以拆解为多个 _模块_ 文件。
+一个模块可以使用多种方式引用其他模块的文档内容和定义。

-- **Import:** `{import "bar.typ"}` \
-  Evaluates the file at the path `bar.typ` and inserts the resulting
-  [module]($module) into the current scope as `bar` (filename without
-  extension). You can use the `as` keyword to rename the imported module:
+- **插入：** `{include "bar.typ"}` \
+  计算 `bar.typ` 路径文件，返回其[文档内容]($content)结果。
+
+- **导入：** `{import "bar.typ"}` \
+  在路径 `bar.typ` 处加载文档并插入结果
+  [模块]($module) 作为 `bar` 进入当前范围（不带后缀拓展名的文档名）。您可以使用 `as` 关键字重命名导入的模块：
   `{import "bar.typ" as baz}`

 - **Import items:** `{import "bar.typ": a, b}` \
@@ -301,18 +276,23 @@ ways:
   loads all variables defined in a module. You can use the `as` keyword to
   rename the individual items: `{import "bar.typ": a as one, b as two}`

-Instead of a path, you can also use a [module value]($module), as shown in the
-following example:
+- **导入项目:** `{import "bar.typ": a, b}` \
+  加载路径为 `bar.typ` 的文档，提取变量
+  `a` 和 `b` (需要在 `bar.typ` 中定义，例如通过 `{let}`
+  绑定) 的值，并在当前文档中定义它们。将 `a, b` 替换为 `*`
+  可以加载模块中定义的所有变量。您可以使用 `as` 关键字来
+  重命名各个项目: `{import "bar.typ": a as one, b as two}`
+
+除了使用路径，也可以使用 [模块值]($module)，如下面示例：

 ```example
 #import emoji: face
 #face.grin
 ```

-## Packages
-To reuse building blocks across projects, you can also create and import Typst
-_packages._ A package import is specified as a triple of a namespace, a name,
-and a version.
+## 包 { #packages }
+可以创建并导入 Typst _包_，在多个工程项目中进行复用。
+一个包的导入需有三部分指定：包命名空间，包名称，包版本号。

 ```example
 >>> #let add(x, y) = x + y
@@ -320,41 +300,37 @@ and a version.
 #add(2, 7)
 ```

-The `preview` namespace contains packages shared by the community. You can find
-a searchable list of available community packages in the [packages]($packages)
-section.
+`preview` 包命名空间包含了 Typst 社区分享的包。可以在 [package]($packages) 章节搜索可用的社区分享包。
+
+在本地使用 Typst 时，可以创建本地包。更多详情参考 [包仓库](https://github.com/typst/packages)。

-If you are using Typst locally, you can also create your own system-local
-packages. For more details on this, see the
-[package repository](https://github.com/typst/packages).
+## 操作符 { #operators }

-## Operators
-The following table lists all available unary and binary operators with effect,
-arity (unary, binary) and precedence level (higher binds stronger).
+下表类出了所有一元和二元操作符的作用、参数数量(一元、二元)和优先级（优先级越高，越优先执行)

-| Operator   | Effect                          | Arity  | Precedence |
+| 操作符   | 作用说明                           | 参数数量  | 优先级 |
 |:----------:|---------------------------------|:------:|:----------:|
-|  `{-}`     | Negation                        | Unary  |     7      |
-|  `{+}`     | No effect (exists for symmetry) | Unary  |     7      |
-|  `{*}`     | Multiplication                  | Binary |     6      |
-|  `{/}`     | Division                        | Binary |     6      |
-|  `{+}`     | Addition                        | Binary |     5      |
-|  `{-}`     | Subtraction                     | Binary |     5      |
-|  `{==}`    | Check equality                  | Binary |     4      |
-|  `{!=}`    | Check inequality                | Binary |     4      |
-|  `{<}`     | Check less-than                 | Binary |     4      |
-|  `{<=}`    | Check less-than or equal        | Binary |     4      |
-|  `{>}`     | Check greater-than              | Binary |     4      |
-|  `{>=}`    | Check greater-than or equal     | Binary |     4      |
-|  `{in}`    | Check if in collection          | Binary |     4      |
-| `{not in}` | Check if not in collection      | Binary |     4      |
-|  `{not}`   | Logical "not"                   | Unary  |     3      |
-|  `{and}`   | Short-circuiting logical "and"  | Binary |     3      |
-|  `{or}`    | Short-circuiting logical "or    | Binary |     2      |
-|  `{=}`     | Assignment                      | Binary |     1      |
-|  `{+=}`    | Add-Assignment                  | Binary |     1      |
-|  `{-=}`    | Subtraction-Assignment          | Binary |     1      |
-|  `{*=}`    | Multiplication-Assignment       | Binary |     1      |
-|  `{/=}`    | Division-Assignment             | Binary |     1      |
+|  `{-}`     | 负号                            | 一元  |     7      |
+|  `{+}`     | 正号，无作用，仅仅为了对称性      | 一元  |     7      |
+|  `{*}`     | 乘号                            | 二元 |     6      |
+|  `{/}`     | 除号                            | 二元 |     6      |
+|  `{+}`     | 加号                            | 二元 |     5      |
+|  `{-}`     | 减号                            | 二元 |     5      |
+|  `{==}`    | 等号                            | 二元 |     4      |
+|  `{!=}`    | 不等于号                        | 二元 |     4      |
+|  `{<}`     | 小于号                          | 二元 |     4      |
+|  `{<=}`    | 小于等于号                      | 二元 |     4      |
+|  `{>}`     | 大于号                         | 二元 |     4      |
+|  `{>=}`    | 大于等于号                     | 二元 |     4      |
+|  `{in}`    | 属于                          | 二元 |     4      |
+| `{not in}` | 不属于                        | 二元 |     4      |
+|  `{not}`   | 逻辑非                        | 一元  |     3      |
+|  `{and}`   | 短路式逻辑并                   | 二元 |     3      |
+|  `{or}`    | 短路式逻辑或                   | 二元 |     2      |
+|  `{=}`     | 赋值                          | 二元 |     1      |
+|  `{+=}`    | 相加赋值                      | 二元 |     1      |
+|  `{-=}`    | 相减赋值                      | 二元 |     1      |
+|  `{*=}`    | 相乘赋值                      | 二元 |     1      |
+|  `{/=}`    | 相除赋值                      | 二元 |     1      |

 [semver]: https://semver.org/
diff --git a/docs/reference/styling.md b/docs/reference/styling.md
index 687fed79..d4280b9e 100644
--- a/docs/reference/styling.md
+++ b/docs/reference/styling.md
@@ -1,23 +1,20 @@
 ---
-description: All concepts needed to style your document with Typst.
+description: Typst 中所有有关文档样式设置概念。
 ---

-# Styling
-Typst includes a flexible styling system that automatically applies styling of
-your choice to your document. With _set rules,_ you can configure basic
-properties of elements. This way, you create most common styles. However, there
-might not be a built-in property for everything you wish to do. For this reason,
-Typst further supports _show rules_ that can completely redefine the appearance
-of elements.
-
-## Set rules
-With set rules, you can customize the appearance of elements. They are written
-as a [function call]($function) to an [element
-function]($function/#element-functions) preceded by the `{set}` keyword (or
-`[#set]` in markup). Only optional parameters of that function can be provided
-to the set rule. Refer to each function's documentation to see which parameters
-are optional. In the example below, we use two set rules to change the
-[font family]($text.font) and [heading numbering]($heading.numbering).
+# 样式
+
+Typst 有一个自由的样式设置系统，可以按需自动格式化文档。
+_set 规则_ 可以配置文档元素的基本属性，用来设置大多常用文档样式，
+但是有些样式设置并没有属性可设，因此 Typst 引入 _show 规则_，进而可以彻底的重设文档元素外观。
+
+## set 规则 { #set-rules }
+
+使用 set 规则，可以自定义文档元素的外观，
+这些规则以 `{set}` 关键字作为开始标记（在标记模式下使用 `[#set]`），
+紧随一个文档元素的[函数调用]($function)，
+set 函数调用时，仅有特定参数可被允许使用，可以参考该函数文档查看有那些参数可以用于 set 规则。
+下面示例，使用了两个 set 规则来改变[文档字体]($text.font)和[标题数字]($heading.numbering)。

 ```example
 #set heading(numbering: "I.")
@@ -30,11 +27,9 @@ With set rules, you can style
 your document.
 ```

-A top level set rule stays in effect until the end of the file. When nested
-inside of a block, it is only in effect until the end of that block. With a
-block, you can thus restrict the effect of a rule to a particular segment of
-your document. Below, we use a content block to scope the list styling to one
-particular list.
+顶层 set 规则一直作用到文件结束，当在块内使用时，只作用到块结束。
+这样使用块，可以限制 set 规则只总用于文档的特定片段。
+下面示例使用了文档内容块来限制列表样式设置只作用于特定列表。

 ```example
 This list is affected: #[
@@ -46,8 +41,7 @@ This one is not:
 - Bullet
 ```

-Sometimes, you'll want to apply a set rule conditionally. For this, you can use
-a _set-if_ rule.
+有时，想要实现特定条件下 set 规则才有效，可以使用 _set-if_ 规则。

 ```example
 #let task(body, critical: false) = {
@@ -59,14 +53,13 @@ a _set-if_ rule.
 #task(critical: false)[Work deadline]
 ```

-## Show rules
-With show rules, you can deeply customize the look of a type of element. The
-most basic form of show rule is a _show-set rule._ Such a rule is written as the
-`{show}` keyword followed by a [selector]($selector), a colon and then a set
-rule. The most basic form of selector is an
-[element function]($function/#element-functions). This lets the set rule only
-apply to the selected element. In the example below, headings become dark blue
-while all other text stays black.
+## show 规则 { #show-rules }
+
+使用 show 规则可以深度定制特定类型文档元素的外观，最常用的基本形式是 _show-set 规则_，
+以 `{show}` 关键字作为开始标记，紧随一个[选择器]($selector)，一个冒号，最后是一个 set 规则。
+最常见的选择器是一个[文档元素函数名]($function/#element-functions)，
+是 set 规则用来选择相关文档元素的。
+下面示例中，标题变为深蓝色，其他文本保持黑色。

 ```example
 #show heading: set text(navy)
@@ -75,19 +68,15 @@ while all other text stays black.
 But this stays black.
 ```

-With show-set rules you can mix and match properties from different functions to
-achieve many different effects. But they still limit you to what is predefined
-in Typst. For maximum flexibility, you can instead write a show rule that
-defines how to format an element from scratch. To write such a show rule,
-replace the set rule after the colon with an arbitrary [function]($function).
-This function receives the element in question and can return arbitrary content.
-Different [fields]($scripting/#fields) are available on the element passed to
-the function. Below, we define a show rule that formats headings for a fantasy
-encyclopedia.
+使用 show-set 规则，可以混搭各种函数属性，来实现各种不同的效果，但这也仍然局限于 Typst 预定义的功能。
+为了最大限度的灵活设置，可以使用函数式 show 规则，用来定义如何从 0 开始格式化文档元素。
+使用一个 [函数]($function) 来替换 show-set 规则中的 set 规则，
+这个函数以未知文档元素作为参数，返回任意文档内容，函数的文档元素参数有各种不同的[属性字段]($scripting/#fields)。
+下面示例中用一个函数式 show 规则格式化一个虚构的百科全书标题。

 ```example
 #set heading(numbering: "(I)")
-#show heading: it => [
+#show heading: it => block[
   #set align(center)
   #set text(font: "Inria Serif")
   \~ #emph(it.body)
@@ -105,34 +94,25 @@ dragon, the manticore gets
 extra style points.
 ```

-Like set rules, show rules are in effect until the end of the current block or
-file.
+与 set 规则类似， show 规则也一直作用到文档或者当前块的结束。

-Instead of a function, the right-hand side of a show rule can also take a
-literal string or content block that should be directly substituted for the
-element. And apart from a function, the left-hand side of a show rule can also
-take a number of other _selectors_ that define what to apply the transformation
-to:
+show 规则的右边部分不仅可以是一个函数，也可以是一个字符串常量或者文档内容块，用来直接替换文档元素。
+show 规则的左边部分也可以是 _下面类型的选择器_，用来定义哪些文档元素会被转换：

-- **Everything:** `{show: rest => ..}` \
-  Transform everything after the show rule. This is useful to apply a more
-  complex layout to your whole document without wrapping everything in a giant
-  function call.
+- **所有文档：** `{show: rest => ..}` \
+  转换 show 规则后的所有文档元素，这样就免于将所有文档元素都包含在一个巨大的函数调用中，来实现更复杂的布局。

-- **Text:** `{show "Text": ..}` \
-  Style, transform or replace text.
+- **特定文本：** `{show "Text": ..}` \
+  设置特定文本样式，转变或替换特定文本。

-- **Regex:** `{show regex("\w+"): ..}` \
-  Select and transform text with a regular expression for even more flexibility.
-  See the documentation of the [`regex` type]($regex) for details.
+- **正则表达式：** `{show regex("\w+"): ..}` \
+  更自由的选择并转换匹配特定正则表达式的文本，详见于 [regex 函数]($regex)文档。

-- **Function with fields:** `{show heading.where(level: 1): ..}` \
-  Transform only elements that have the specified fields. For example, you might
-  want to only change the style of level-1 headings.
+- **字段选择函数：** `{show heading.where(level: 1): ..}` \
+  转换具有特定字段的文档元素。比如，可以只设置文档一级标题样式。

-- **Label:** `{show <intro>: ..}` \
-  Select and transform elements that have the specified label. See the
-  documentation of the [`label` type]($label) for more details.
+- **标签：** `{show <intro>: ..}` \
+  选择并转换具有特定标签的文档元素，详见于[标签函数]($label)文档。

 ```example
 #show "Project": smallcaps
diff --git a/docs/reference/syntax.md b/docs/reference/syntax.md
index c03d6ab3..94807e9e 100644
--- a/docs/reference/syntax.md
+++ b/docs/reference/syntax.md
@@ -1,113 +1,116 @@
 ---
 description: |
-   A compact reference for Typst's syntax. Learn more about the language within
-   markup, math, and code mode.
+   Typst 语法简略参考索引。更多请参考语言的标记模式，数学公式模式和代码模式。
 ---

-# Syntax
-Typst is a markup language. This means that you can use simple syntax to
-accomplish common layout tasks. The lightweight markup syntax is complemented by
-set and show rules, which let you style your document easily and automatically.
-All this is backed by a tightly integrated scripting language with built-in and
-user-defined functions.
-
-## Markup
-Typst provides built-in markup for the most common document elements. Most of
-the syntax elements are just shortcuts for a corresponding function. The table
-below lists all markup that is available and links to the  best place to learn
-more about their syntax and usage.
-
-| Name               | Example                  | See                          |
-| ------------------ | ------------------------ | ---------------------------- |
-| Paragraph break    | Blank line               | [`parbreak`]($parbreak)      |
-| Strong emphasis    | `[*strong*]`             | [`strong`]($strong)          |
-| Emphasis           | `[_emphasis_]`           | [`emph`]($emph)              |
-| Raw text           | ``[`print(1)`]``         | [`raw`]($raw)                |
-| Link               | `[https://typst.app/]`   | [`link`]($link)              |
-| Label              | `[<intro>]`              | [`label`]($label)            |
-| Reference          | `[@intro]`               | [`ref`]($ref)                |
-| Heading            | `[= Heading]`            | [`heading`]($heading)        |
-| Bullet list        | `[- item]`               | [`list`]($list)              |
-| Numbered list      | `[+ item]`               | [`enum`]($enum)              |
-| Term list          | `[/ Term: description]`  | [`terms`]($terms)            |
-| Math               | `[$x^2$]`                | [Math]($category/math)       |
-| Line break         | `[\]`                    | [`linebreak`]($linebreak)    |
-| Smart quote        | `['single' or "double"]` | [`smartquote`]($smartquote)  |
-| Symbol shorthand   | `[~, ---]`               | [Symbols]($category/symbols/sym) |
-| Code expression    | `[#rect(width: 1cm)]`    | [Scripting]($scripting/#expressions) |
-| Character escape   | `[Tweet at us \#ad]`     | [Below](#escapes)            |
-| Comment            | `[/* block */, // line]` | [Below](#comments)           |
-
-## Math mode { #math }
-Math mode is a special markup mode that is used to typeset mathematical
-formulas. It is entered by wrapping an equation in `[$]` characters. The
-equation will be typeset into its own block if it starts and ends with at least
-one space (e.g. `[$ x^2 $]`). Inline math can be produced by omitting the
-whitespace (e.g. `[$x^2$]`). An overview over the syntax specific to math mode
-follows:
-
-| Name                   | Example                  | See                      |
-| ---------------------- | ------------------------ | ------------------------ |
-| Inline math            | `[$x^2$]`                | [Math]($category/math)   |
-| Block-level math       | `[$ x^2 $]`              | [Math]($category/math)   |
-| Bottom attachment      | `[$x_1$]`                | [`attach`]($category/math/attach) |
-| Top attachment         | `[$x^2$]`                | [`attach`]($category/math/attach) |
-| Fraction               | `[$1 + (a+b)/5$]`        | [`frac`]($math.frac)     |
-| Line break             | `[$x \ y$]`              | [`linebreak`]($linebreak) |
-| Alignment point        | `[$x &= 2 \ &= 3$]`      | [Math]($category/math)   |
-| Variable access        | `[$#x$, $pi$]`           | [Math]($category/math)   |
-| Field access           | `[$arrow.r.long$]`       | [Scripting]($scripting/#fields) |
-| Implied multiplication | `[$x y$]`                | [Math]($category/math)   |
-| Symbol shorthand       | `[$->, !=$]`             | [Symbols]($category/symbols/sym) |
-| Text/string in math    | `[$a "is natural"$]`     | [Math]($category/math)   |
-| Math function call     | `[$floor(x)$]`           | [Math]($category/math)   |
-| Code expression        | `[$#rect(width: 1cm)$]`  | [Scripting]($scripting/#expressions) |
-| Character escape       | `[$x\^2$]`               | [Below](#escapes)        |
-| Comment                | `[$/* comment */$]`      | [Below](#comments)       |
-
-## Code mode { #code }
-Within code blocks and expressions, new expressions can start without a leading
-`#` character. Many syntactic elements are specific to expressions. Below is
-a table listing all syntax that is available in code mode:
-
-| Name                     | Example                       | See                                |
+# 语法
+
+Typst 是一种标记语言。
+这意味着，使用简单的语法就可以进行常用的布局操作，
+再辅以 set 和 show 规则，格式化文档更加简单，更加自动化，
+这些均是基于紧密集成在 Typst 内的脚本语言，
+其内置大量常用函数，用户亦可根据需求自定义函数。
+
+## 标记模式 { #markup }
+
+Typst 为常用文档元素内置了语法标记。
+这些语法标记大多只是相关函数的快捷表达方式，
+下表列出了所有语法标记，以及它们的详细使用的链接地址。
+
+| 名称            | 示例                      | 详情链接                     |
+| --------------- | ------------------------ | ---------------------------- |
+| 段落中断        | 空行                      | [`parbreak`]($parbreak) |
+| 着重强调        | `[*strong*]`             | [`strong`]($strong)     |
+| 强调            | `[_emphasis_]`           | [`emph`]($emph)         |
+| 代码段          | ``[`print(1)`]``         | [`raw`]($raw)           |
+| 链接            | `[https://typst.app/]`   | [`link`]($link)         |
+| 标签            | `[<intro>]`              | [`label`]($label)       |
+| 引用            | `[@intro]`               | [`ref`]($ref)           |
+| 标题            | `[= Heading]`            | [`heading`]($heading)   |
+| 无序列表        | `[- item]`               | [`list`]($list)         |
+| 有序列表        | `[+ item]`               | [`enum`]($enum)         |
+| 术语列表        | `[/ Term: description]`  | [`terms`]($terms)       |
+| 数学公式        | `[$x^2$]`                | [Math]($category/math)       |
+| 行中断          | `[\]`                    | [`linebreak`]($linebreak) |
+| 智能引号        | `['single' or "double"]` | [`smartquote`]($smartquote) |
+| 快捷符号        | `[~, ---]`               | [Symbols]($category/symbols/sym) |
+| 代码表达式      | `[#rect(width: 1cm)]`    | [Scripting]($scripting/#expressions) |
+| 转义字符        | `[Tweet at us \#ad]`     | [Below](#escapes)            |
+| 注释            | `[/* block */, // line]` | [Below](#comments)           |
+
+## 数学模式 { #math }
+
+数学模式是一种特殊的语法标记模式，专门用来输入数学公式。
+通过 `[$]` 字符包裹一个数学公式，
+如果这个公式头尾都至少一个空格（例如`[$ x^2 $]`），这个公式将会形成一个文档块，单独占用一行，
+如果头尾没有空格（例如`[$x^2$]`），这个公式将会排版在行内，
+下面是针对数学模式的语法概述：
+
+| 名称                  | 示例                    | 详情链接                      |
+| --------------------- | ------------------------ | ------------------------ |
+| 行内数学公式           | `[$x^2$]`                | [Math]($category/math)   |
+| 块级数学公式           | `[$ x^2 $]`              | [Math]($category/math)   |
+| 底部附缀              | `[$x_1$]`                | [`attach`]($category/math/attach) |
+| 顶部附缀              | `[$x^2$]`                | [`attach`]($category/math/attach) |
+| 分数                  | `[$1 + (a+b)/5$]`        | [`frac`]($math.frac) |
+| 行中断                | `[$x \ y$]`              | [`linebreak`]($linebreak) |
+| 对齐点                | `[$x &= 2 \ &= 3$]`      | [Math]($category/math)   |
+| 变量访问              | `[$#x$, $pi$]`           | [Math]($category/math)   |
+| 字段访问              | `[$arrow.r.long$]`       | [Scripting]($scripting/#fields) |
+| 隐式乘积              | `[$x y$]`                | [Math]($category/math)   |
+| 快捷符号              | `[$->, !=$]`             | [Symbols]($category/symbols/sym) |
+| 数学公式内字符串       | `[$a "is natural"$]`     | [Math]($category/math)   |
+| 数学函数调用          | `[$floor(x)$]`           | [Math]($category/math)   |
+| 代码表达式            | `[$#rect(width: 1cm)$]`  | [Scripting]($scripting/#expressions) |
+| 转义字符              | `[$x\^2$]`               | [Below](#escapes)        |
+| 注释                 | `[$/* comment */$]`      | [Below](#comments)       |
+
+## 代码模式 { #code }
+
+在代码块和表达式中，新的表达式不再前缀 `#` 字符。
+许多代码语法元素是表达式特有的，
+下面列出了代码模式下所有可用的语法：
+
+
+| 名称                     | 示例                          | 详情链接                              |
 | ------------------------ | ----------------------------- | ---------------------------------- |
-| Variable access          | `{x}`                         | [Scripting]($scripting/#blocks)    |
-| Any literal              | `{1pt, "hey"}`                | [Scripting]($scripting/#expressions) |
-| Code block               | `{{ let x = 1; x + 2 }}`      | [Scripting]($scripting/#blocks)    |
-| Content block            | `{[*Hello*]}`                 | [Scripting]($scripting/#blocks)    |
-| Parenthesized expression | `{(1 + 2)}`                   | [Scripting]($scripting/#blocks)    |
-| Array                    | `{(1, 2, 3)}`                 | [Array]($array)                    |
-| Dictionary               | `{(a: "hi", b: 2)}`           | [Dictionary]($dictionary)          |
-| Unary operator           | `{-x}`                        | [Scripting]($scripting/#operators) |
-| Binary operator          | `{x + y}`                     | [Scripting]($scripting/#operators) |
-| Assignment               | `{x = 1}`                     | [Scripting]($scripting/#operators) |
-| Field access             | `{x.y}`                       | [Scripting]($scripting/#fields)    |
-| Method call              | `{x.flatten()}`               | [Scripting]($scripting/#methods)   |
-| Function call            | `{min(x, y)}`                 | [Function]($function)              |
-| Argument spreading       | `{min(..nums)}`               | [Arguments]($arguments)            |
-| Unnamed function         | `{(x, y) => x + y}`           | [Function]($function)              |
-| Let binding              | `{let x = 1}`                 | [Scripting]($scripting/#bindings)  |
-| Named function           | `{let f(x) = 2 * x}`          | [Function]($function)              |
-| Set rule                 | `{set text(14pt)}`            | [Styling]($styling/#set-rules)     |
-| Set-if rule              | `{set text(..) if .. }`       | [Styling]($styling/#set-rules)     |
-| Show-set rule            | `{show par: set block(..)}`   | [Styling]($styling/#show-rules)    |
-| Show rule with function  | `{show raw: it => {..}}`      | [Styling]($styling/#show-rules)    |
-| Show-everything rule     | `{show: columns.with(2)}`     | [Styling]($styling/#show-rules)    |
-| Conditional              | `{if x == 1 {..} else {..}}`  | [Scripting]($scripting/#conditionals) |
-| For loop                 | `{for x in (1, 2, 3) {..}}`   | [Scripting]($scripting/#loops)     |
-| While loop               | `{while x < 10 {..}}`         | [Scripting]($scripting/#loops)     |
-| Loop control flow        | `{break, continue}`           | [Scripting]($scripting/#loops)     |
-| Return from function     | `{return x}`                  | [Function]($function)              |
-| Include module           | `{include "bar.typ"}`         | [Scripting]($scripting/#modules)   |
-| Import module            | `{import "bar.typ"}`          | [Scripting]($scripting/#modules)   |
-| Import items from module | `{import "bar.typ": a, b, c}` | [Scripting]($scripting/#modules)   |
-| Comment                  | `[/* block */, // line]`      | [Below](#comments)                 |
-
-## Comments
-Comments are ignored by Typst and will not be included in the output. This is
-useful to exclude old versions or to add annotations. To comment out a single
-line, start it with `//`:
+| 变量访问                 | `{x}`                         | [Scripting]($scripting/#blocks)    |
+| 字面常量                 | `{1pt, "hey"}`                | [Scripting]($scripting/#expressions) |
+| 代码块                   | `{{ let x = 1; x + 2 }}`      | [Scripting]($scripting/#blocks)    |
+| 文档内容块               | `{[*Hello*]}`                 | [Scripting]($scripting/#blocks)    |
+| 括号表达式               | `{(1 + 2)}`                   | [Scripting]($scripting/#blocks)    |
+| 数组                    | `{(1, 2, 3)}`                 | [Array]($array)               |
+| 字典                    | `{(a: "hi", b: 2)}`           | [Dictionary]($dictionary)     |
+| 一元运算符              | `{-x}`                        | [Scripting]($scripting/#operators) |
+| 二元运算符              | `{x + y}`                     | [Scripting]($scripting/#operators) |
+| 赋值                   | `{x = 1}`                     | [Scripting]($scripting/#operators) |
+| 字段访问               | `{x.y}`                       | [Scripting]($scripting/#fields)    |
+| 方法调用               | `{x.flatten()}`               | [Scripting]($scripting/#methods)   |
+| 函数调用               | `{min(x, y)}`                 | [Function]($function)         |
+| 匿名函数               | `{(x, y) => x + y}`           | [Function]($function)         |
+| let 绑定               | `{let x = 1}`                 | [Scripting]($scripting/#bindings)  |
+| 命名函数               | `{let f(x) = 2 * x}`          | [Function]($function)         |
+| set 规则               | `{set text(14pt)}`            | [Styling]($styling/#set-rules)     |
+| set-if 规则            | `{set text(..) if .. }`       | [Styling]($styling/#set-rules)     |
+| show-set 规则          | `{show par: set block(..)}`   | [Styling]($styling/#show-rules)    |
+| 函数式 show 规则        | `{show raw: it => {..}}`      | [Styling]($styling/#show-rules)    |
+| show-everything 规则   | `{show: columns.with(2)}`     | [Styling]($styling/#show-rules)    |
+| 条件表语句             | `{if x == 1 {..} else {..}}`  | [Scripting]($scripting/#conditionals) |
+| for 循环               | `{for x in (1, 2, 3) {..}}`   | [Scripting]($scripting/#loops)     |
+| while 循环             | `{while x < 10 {..}}`         | [Scripting]($scripting/#loops)     |
+| 循环流程控制            | `{break, continue}`           | [Scripting]($scripting/#loops)     |
+| 函数返回                | `{return x}`                  | [Function]($function)         |
+| include 模块           | `{include "bar.typ"}`         | [Scripting]($scripting/#modules)   |
+| import 模块            | `{import "bar.typ"}`          | [Scripting]($scripting/#modules)   |
+| 从模块内 import 条目   | `{import "bar.typ": a, b, c}` | [Scripting]($scripting/#modules)   |
+| 注释                  | `[/* block */, // line]`      | [Below](#comments)                 |
+
+## 注释 { #comments }
+
+Typst 会忽略注释，最终生成的文档不会包含它们。
+它们通常被用于剔除旧版本，或者添加标注说明。
+如果一行开头是 `//`，这行就会被认为是注释：
+
 ```example
 // our data barely supports
 // this claim
@@ -117,8 +120,8 @@ that the difference is
 significant.
 ```

-Comments can also be wrapped between `/*` and `*/`. In this case, the comment
-can span over multiple lines:
+也可以通过 `/*` 和 `*/` 来包裹注释，这种方式，注释可以分布于多行：
+
 ```example
 Our study design is as follows:
 /* Somebody write this up:
@@ -126,14 +129,14 @@ Our study design is as follows:
    - 2x2 data design. */
 ```

-## Escape sequences { #escapes }
-Escape sequences are used to insert special characters that are hard to type or
-otherwise have special meaning in Typst. To escape a character, precede it with
-a backslash. To insert any Unicode codepoint, you can write a hexadecimal escape
-sequence: `[\u{1f600}]`. The same kind of escape sequences also work in
-[strings]($str).
+## 转义序列 { #escapes }
+
+转义序列可以用来插入难于输入的特殊字符，或者 Typst 内有特殊含义的字符。
+前缀一个反斜杠转义一个字符，转移序列如果是十六进制，
+比如 `[\u{1f600}]`，就会插入一个 Unicode 码点。
+这些类型的转义序列也作用于[字符串]($str)中。

 ```example
 I got an ice cream for
 \$1.50! \u{1f600}
-```
+```
\ No newline at end of file
diff --git a/docs/reference/welcome.md b/docs/reference/welcome.md
index d312ba07..6f6592f0 100644
--- a/docs/reference/welcome.md
+++ b/docs/reference/welcome.md
@@ -1,28 +1,43 @@
 ---
 description: |
-  The Typst reference is a systematic and comprehensive guide to the Typst
-  typesetting language.
+  Typst 参考索引文档是关于 Typst 排版语言的详细文档。
 ---

-# Reference
-This reference documentation is a comprehensive guide to all of Typst's
-syntax, concepts, types, and functions. If you are completely new to Typst, we
-recommend starting with the [tutorial]($tutorial) and then coming back to
-the reference to learn more about Typst's features as you need them.
-
-## Language
-The reference starts with a language part that gives an overview over
-[Typst's syntax]($syntax) and contains information about concepts involved in
-[styling documents,]($styling) using
-[Typst's scripting capabilities.]($scripting)
-
-## Functions
-The second part includes chapters on all functions used to insert, style, transform,
-and layout content in Typst documents. Each function is documented with a
-description of its purpose, a list of its parameters, and examples of how to use
-it.
-
-The final part of the reference explains all functions that are used within
-Typst's code mode to manipulate and transform data. Just as in the previous
-part, each function is documented with a description of its purpose, a list of
-its parameters, and examples of how to use it.
+# 参考
+
+本参考索引是一个综合指南文档，包括 Typst 的语法，概念，类型和函数。
+如果你初识 Typst，建议从 [学习指南]($tutorial) 开始，然后再按需回来学习更多的 Typst 特性。
+
+## 语言 { #language }
+
+本参考索引第一部分粗略介绍 [Typst 语法]($syntax)，
+包括 [文档样式]($styling) 概念，以及 [Typst 脚本功能]($scripting) 详细文档。
+
+
+## 函数 { #functions }
+
+第二部分引入所有能用到的函数，
+有插入文档内容的，有设置文档内容样式的，有文档内容变换的，有布局文档内容的。
+每一个函数均已同样的形式表述，
+有些是表述函数基本功能，有些列举函数参数，有些举例如何使用函数。
+
+参考索引最后一部分描述的 Typst 代码模式内的函数，用来操作及转换数据的。
+和第二部分一样，每一个函数均已同样的形式表述，
+有些是表述函数基本功能，有些列举函数参数，有些举例如何使用函数。
+
+## 进阶 { #advanced }
+
+译者注：这部分官方文档没有，是译者自主添加的。
+
+除了参考，还可以考虑阅读 [typst-examples-book](https://sitandr.github.io/typst-examples-book/book/)，里面包含了一些 Typst 的高级知识、简单示例，以及一些最佳实践。
+
+例如简单地实现类似 Markdown 中的引用文本样式：
+
+```example
++ #lorem(10) \
+  #rect(fill: luma(240), stroke: (left: 0.25em))[
+    *Solution:* #lorem(10)
+
+    $ a_(n+1)x^n = 2... $
+  ]
+```
\ No newline at end of file
diff --git a/docs/roadmap.md b/docs/roadmap.md
index fc9a0483..56f46f5e 100644
--- a/docs/roadmap.md
+++ b/docs/roadmap.md
@@ -1,129 +1,125 @@
 ---
-description: What we have planned for Typst.
+description: 我们准备做什么。
 ---

-# Roadmap
-This page lists planned features for the Typst language, compiler, library and
-web app. Since priorities and development realities change, this roadmap is not
-set in stone. Features that are listed here will not necessarily be implemented
-and features that will be implemented might be missing here. As for bug fixes,
-this roadmap will only list larger, more fundamental ones.
+# 路线图
+本页列出了 Typst 语言、编译器、库和 Web App 的计划功能。
+由于优先事项和发展现实可能发生变化，这一路线图并非一成不变。
+另外此处列出的功能不一定会实现，并且此处可能没有写完全将要实现的功能。
+至于 bug 修复，本路线图只会列出更大、更基本的路线图。

-Are you missing something on the roadmap? Typst relies on your feedback as a
-user to plan for and prioritize new features. Get started by filing a new issue
-on [GitHub](https://github.com/typst/typst/issues) or discuss your feature
-request with the [community]($community).
+在路线图上是否有遗漏的内容？Typst 需要您作为用户的反馈来规划和优先考虑新功能。
+您可以在 [GitHub](https://github.com/typst/typst/issues) 上提交新问题或与 [社区]($community) 讨论您的功能请求。

-## Language and Compiler
-- **Structure and Styling**
-  - Fix show rule recursion
-  - Fix show-set order
-  - Fix show-set where both show and set affect the same kind of element
-    (to set properties on elements that match a selector)
-  - Ancestry selectors (e.g., within)
-  - Custom elements (that work with set and show rules)
-  - Possibly a capability system, e.g. to make your own element referenceable
-- **Layout**
-  - Advanced floating layout
-  - Rework layout engine to a more flexible model that has first-class support
-    for both "normal" text layout and more canvas-like layout
-  - Unified layout primitives across normal content and math
-  - Named alignment to synchronize alignment across different layout hierarchies
-  - Chained layout regions
-  - Page adjustment from within flow
-  - Advanced page break optimization
-  - Grid-based typesetting
-  - Layout with collision
-- **Export**
-  - Implement emoji export
-  - HTML export
-  - EPUB export
-  - Tagged PDF for Accessibility
-  - PDF/A and PDF/X support
-- **Text and Fonts**
-  - Font fallback warnings
-  - Proper foundations for i18n
-  - Bold, italic, and smallcaps synthesis
-  - Variable fonts support
-  - Ruby and Warichu
-  - Kashida justification
-- **Scripting**
-  - Function hoisting if possible
-  - Get values of set rules
-  - Doc comments
-  - Type hints
-- **Visualization**
-  - Arrows
-  - Better path drawing
-  - Color management
-- **Tooling**
-  - Autoformatter
-  - Linter
-  - Documentation generator
-- **Development**
-  - Benchmarking
-  - Better contributor documentation

-## Library
-- **Customization**
-  - Richer built-in outline customization
-  - Table stroke customization
-- **Numbering**
-  - Relative counters, e.g. for figure numbering per section
-  - Improve equation numbering
-  - Fix issues with numbering patterns
-  - Enum continuation
-- **Layout**
-  - Row span and column span in table
-  - Balanced columns
-  - Drop caps
-  - End notes, maybe margin notes
-- **Math**
-  - Fix syntactic quirks
-  - Fix font handling
-  - Provide more primitives
-  - Big fractions
-- **Other**
-  - Plotting
+## 语言和编译器
+- **结构和样式**
+  - 修复 show 规则递归
+  - 修复 show 和 set 规则的顺序
+  - 修复 show 和 set 规则中 show 和 set 影响相同类型的元素（用于在匹配选择器的元素上设置属性）
+  - 祖先选择器（例如，在内部）
+  - 自定义元素（能够与 set 和 show 规则一起使用）
+  - 可能有一个 capability 系统，例如，使您自己的元素可引用
+- **布局**
+  - 高级浮动布局
+  - 重新设计布局引擎，使其具有对“正常”文本布局和更类似画布的布局的一流支持
+  - 在正常内容和数学中统一布局基元
+  - 命名对齐以同步不同布局层次结构中的对齐
+  - 链式布局区域
+  - 在流内进行页面调整
+  - 高级分页优化
+  - 基于网格的排版
+  - 具有碰撞检测的布局
+- **导出**
+  - 实现 emoji 导出
+  - HTML 导出
+  - EPUB 导出
+  - 用于无障碍性的标记 PDF
+  - PDF/A 和 PDF/X 支持
+- **文本和字体**
+  - 字体 fallback 警告
+  - 国际化（i18n）
+  - 粗体、斜体和小型大写字母的合成
+  - 可变字体支持
+  - 注音（Ruby）和割注（Warichu）
+  - Kashida 对齐
+- **脚本**
+  - 如果可能的话，函数提升
+  - 获取 set 规则的值
+  - 文档注释
+  - 类型提示
+- **可视化**
+  - 箭头
+  - 更好的路径绘制
+  - 颜色管理
+- **工具**
+  - 自动格式化程序
+  - 代码检查工具（Linter）
+  - 文档生成器
+- **开发**
+  - 基准测试
+  - 更好的贡献者文档

-## Web App
-- **Editing**
-  - Smarter & more action buttons
-  - Basic, built-in image editor (cropping, etc.)
-  - Color Picker
-  - Symbol picker
-  - GUI inspector for editing function calls
-  - Preview autocomplete entry
-  - Cursor in preview
-  - Inline documentation
-  - More export options
-  - Preview in a separate window
-- **Writing**
-  - Spell check
-  - Word count
-  - Structure view
-  - Pomodoro
-  - Text completion by LLM
-- **Collaboration**
-  - Chat-like comments
-  - Change tracking
-  - Version history
-  - Git integration
-- **Project management**
-  - Drag-and-drop for projects
-  - Thumbnails for projects
-  - Template generation by LLM
-  - LaTeX, Word, Markdown import
-- **Settings**
-  - Keyboard shortcuts configuration
-  - Better project settings
-  - System Theme setting
-  - Avatar Cropping
-- **Other**
-  - Offline PWA
-  - Single sign-on
-  - Two-Factor Authentication
-  - Advanced search in projects
-  - Private packages in teams
-  - On-Premise deployment
-  - Mobile improvements
+## 库
+- **自定义**
+  - 更强大的内置大纲自定义能力
+  - 表格线条自定义
+- **编号**
+  - 相对计数器，例如，每节的图表编号
+  - 改进数学公式编号
+  - 修复编号模式问题
+  - 枚举延续
+- **布局**
+  - 表格中的行 span 和列 span
+  - 平衡列
+  - 首字下沉
+  - 尾注，也许是边注
+- **数学**
+  - 修复句法怪癖
+  - 修复字体处理
+  - 提供更多基元
+  - 大分数
+- **其他**
+  - 绘图
+
+## Web 应用程序
+- **编辑**
+  - 更智能和更多操作按钮
+  - 基本内置图像编辑器（裁剪等）
+  - 色彩选择器
+  - 符号选择器
+  - 用于编辑函数调用的 GUI 检查器
+  - 预览自动完成条目
+  - 预览中的光标
+  - 内联文档
+  - 更多导出选项
+  - 在单独窗口中预览
+- **写作**
+  - 拼写检查
+  - 字数统计
+  - 结构视图
+  - 番茄工作法
+  - 由 LLM 完成的文本自动完成
+- **协作**
+  - 类似聊天的评论
+  - 更改跟踪
+  - 版本历史
+  - Git 集成
+- **项目管理**
+  - 项目的拖放
+  - 项目的缩略图
+  - 由 LLM 生成的模板
+  - LaTeX、Word、Markdown 导入
+- **设置**
+  - 键盘快捷键配置
+  - 更好的项目设置
+  - 系统主题设置
+  - 头像裁剪
+- **其他**
+  - 离线渐进式 Web 应用程序（PWA）
+  - 单一登录
+  - 双因素认证
+  - 项目中的高级搜索
+  - 团队中的私有包
+  - 本地部署
+  - 移动端改进
diff --git a/docs/tutorial/1-writing.md b/docs/tutorial/1-writing.md
index 0235032e..9c0d427e 100644
--- a/docs/tutorial/1-writing.md
+++ b/docs/tutorial/1-writing.md
@@ -1,19 +1,16 @@
 ---
-description: Typst's tutorial.
+description: Typst 的教程。
 ---
+# 使用 Typst 写作

-# Writing in Typst
-Let's get started! Suppose you got assigned to write a technical report for
-university. It will contain prose, maths, headings, and figures. To get started,
-you create a new project on the Typst app. You'll be taken to the editor where
-you see two panels: A source panel where you compose your document and a
-preview panel where you see the rendered document.
+让我们开始吧！假设你被要求为大学写一份技术报告，报告将包含文字、数学公式、标题和图表。
+首先，请在 Typst App 上创建一个新项目。你将会看见一个分为两个面板的编辑器：
+用于撰写文档的代码面板和查看渲染文档的预览面板。

 ![Typst app screenshot](1-writing-app.png)

-You already have a good angle for your report in mind. So let's start by writing
-the introduction. Enter some text in the editor panel. You'll notice that the
-text immediately appears on the previewed page.
+您在心中对报告内容的方向已经有了不错的想法。那么，让我们从写报告的介绍开始。
+在编辑器面板中输入一些文本，您会注意到文本会立即显示在预览的页面上。

 ```example
 In this report, we will explore the
@@ -23,12 +20,10 @@ contribute to the formation and
 behavior of these natural structures.
 ```

-_Throughout this tutorial, we'll show code examples like this one. Just like in the app, the first panel contains markup and the second panel shows a preview. We shrunk the page to fit the examples so you can see what's going on._
+_在本教程中，我们将展示与此类似的代码示例。就像在 App 中一样，第一个面板包含标记文本，第二个面板显示文稿预览。我们缩小了页面以适应示例，以便您看得更清楚。_

-The next step is to add a heading and emphasize some text. Typst uses simple
-markup for the most common formatting tasks. To add a heading, enter the `=`
-character and to emphasize some text with italics, enclose it in
-`[_underscores_]`.
+下一步是添加标题并对一些文本进行强调。
+Typst 对最常见的格式使用简单的标记。要添加标题，请输入 `=` 字符，要用斜体强调某些文本，请将其括在 `[_下划线_]` 中。

 ```example
 = Introduction
@@ -39,15 +34,13 @@ contribute to the formation and
 behavior of these natural structures.
 ```

-That was easy! To add a new paragraph, just add a blank line in between two
-lines of text. If that paragraph needs a subheading, produce it by typing `==`
-instead of `=`. The number of `=` characters determines the nesting level of the
-heading.
+这很简单！要添加新段落，只需在两行文本之间添加一个空行即可。
+如果该段落需要副标题，请输入 `==` 而非 `=` 来生成它。
+`=` 字符的数量决定了标题的嵌套级别。

-Now we want to list a few of the circumstances that influence glacier dynamics.
-To do that, we use a numbered list. For each item of the list, we type a `+`
-character at the beginning of the line. Typst will automatically number the
-items.
+现在我们想列出一些影响冰川动力学的因素。
+为此，我们使用有序列表。对于列表中的每个项目，我们在行首输入 `+` 字符。
+Typst 将自动对项目进行编号。

 ```example
 + The climate
@@ -55,9 +48,9 @@ items.
 + The geology
 ```

-If we wanted to add a bulleted list, we would use the `-` character instead of
-the `+` character. We can also nest lists: For example, we can add a sub-list to
-the first item of the list above by indenting it.
+如果我们想添加一个无序列表，我们使用 `-` 字符而不是 `+` 字符。
+我们还可以嵌套列表：
+例如，我们可以通过缩进将无序列表作为一个子列表，添加到上面列表的第一项中。

 ```example
 + The climate
@@ -67,66 +60,60 @@ the first item of the list above by indenting it.
 + The geology
 ```

-## Adding a figure { #figure }
-You think that your report would benefit from a figure. Let's add one. Typst
-supports images in the formats PNG, JPEG, GIF, and SVG. To add an image file to
-your project, first open the _file panel_ by clicking the box icon in the left
-sidebar. Here, you can see a list of all files in your project. Currently, there
-is only one: The main Typst file you are writing in. To upload another file,
-click the button with the arrow in the top-right corner. This opens the upload
-dialog, in which you can pick files to upload from your computer. Select an
-image file for your report.
+## 加入图表
+
+您认为图表对一份优秀的报告至关重要，所以让我们添加一个图表。
+Typst 支持 PNG、JPEG、GIF 和 SVG 格式的图像。
+要将图像文件添加到项目中，请先通过单击左侧边栏中的箱子图标打开 _文件面板_ 。
+在这里，您可以看到项目中所有文件的列表。
+目前，这里只有一个文件：您正在编辑的 Typst 主文件。
+要上传其他文件，请单击右上角带有箭头的按钮。
+这将打开一个上传对话框，您可以在其中选择要从计算机上传的文件。
+请为你的报告选择一个图像文件。

 ![Upload dialog](1-writing-upload.png)

-We have seen before that specific symbols (called _markup_) have specific
-meaning in Typst. We can use `=`, `-`, `+`, and `_` to create headings, lists
-and emphasized text, respectively. However, having a special symbol for
-everything we want to insert into our document would soon become cryptic and
-unwieldy. For this reason, Typst reserves markup symbols only for the most
-common things. Everything else is inserted with _functions._ For our image to
-show up on the page, we use Typst's [`image`]($image) function.
+我们之前已经看到，特定的符号（称为 _标记_ ）在 Typst 中具有特定的含义。
+我们可以使用 `=`、`-`、`+` 和 `_` 分别创建标题、列表和强调文本。
+但是，若是为我们想要插入到文档中的所有内容都设置一个特殊符号，很快语法就会变得怪异且笨拙。
+为此，Typst 只为最常见的内容保留标记符号。
+其他所有内容都将通过 _函数_ 来插入。
+为了使图像显示在页面上，我们使用 Typst 的 [`image`]($image) 函数。

 ```example
 #image("glacier.jpg")
 ```

-In general, a function produces some output for a set of _arguments_. When you
-_call_ a function within markup, you provide the arguments and Typst inserts the
-result (the function's _return value_) into the document. In our case, the
-`image` function takes one argument: The path to the image file. To call a
-function in markup, we first need to type the `#` character, immediately
-followed by the name of the function. Then, we enclose the arguments in
-parentheses. Typst recognizes many different data types within argument lists.
-Our file path is a short [string of text]($str), so we need to enclose it in
-double quotes.
-
-The inserted image uses the whole width of the page. To change that, pass the
-`width` argument to the `image` function. This is a _named_ argument and
-therefore specified as a `name: value` pair. If there are multiple arguments,
-they are separated by commas, so we first need to put a comma behind the path.
+通常，函数会为一组 _参数_ 生成一些输出。
+当您在标记模式中 _调用_ 函数时，读取到您输入的参数后，Typst 会将结果（函数的 _返回值_ ）插入到文档中。
+在我们的例子中， `image` 函数接受一个参数：图像文件的路径。
+要在标记模式中调用函数，我们首先需要键入 `#` 字符，并且紧跟函数的名称。
+然后，我们将参数括在括号中。
+Typst 可识别参数列表中的许多不同数据类型，
+我们的文件路径是一个较短的 [文本字符串]($str)，所以我们需要用双引号括起来。
+
+插入的图像默认宽度为页面宽度。要更改宽度，请将 `width` 参数传递给 `image` 函数。
+这是一个 _命名_ 参数，因此被指定为 `name: value` 对。
+如果有多个参数，则逗号分隔它们，所以我们首先需要在路径参数后面加上一个逗号。

 ```example
 #image("glacier.jpg", width: 70%)
 ```

-The `width` argument is a [relative length]($relative). In our case, we
-specified a percentage, determining that the image shall take up `{70%}` of the
-page's width. We also could have specified an absolute value like `{1cm}` or
-`{0.7in}`.
+`width` 参数是一个 [相对长度]($relative)。
+在我们的例子中，我们指定了一个百分比，确定图像应占据页面宽度的 `{70%}`。
+我们也可以指定一个绝对值，如 `{1cm}` 或 `{0.7in}`。

-Just like text, the image is now aligned at the left side of the page by
-default. It's also lacking a caption. Let's fix that by using the
-[figure]($figure) function. This function takes the figure's contents as a
-positional argument and an optional caption as a named argument.
+就像文本一样，默认情况下，图像现在在页面左侧对齐，并且它也缺少说明（caption）。
+让我们使用 [figure]($figure) 函数来解决这个问题。
+该函数将图表的内容作为位置参数，将可选的说明（caption）作为命名参数。

-Within the argument list of the `figure` function, Typst is already in code
-mode. This means, you can now remove the hash before the image function call.
-The hash is only needed directly in markup (to disambiguate text from function
-calls).
+在 `figure` 函数的参数列表中，Typst 已经处于代码模式。
+这意味着，您现在可以在 `image` 函数调用的前面删除井号。
+井号仅在标记模式中需要（以消除函数调用中的文本歧义）。

-The caption consists of arbitrary markup. To give markup to a function, we
-enclose it in square brackets. This construct is called a _content block._
+标题由任意标记文本组成。
+为了给函数提供标记文本，我们将其括在方括号中。此被称为 _内容块_ 。

 ```example
 #figure(
@@ -138,12 +125,11 @@ enclose it in square brackets. This construct is called a _content block._
 )
 ```

-You continue to write your report and now want to reference the figure. To do
-that, first attach a label to figure. A label uniquely identifies an element in
-your document. Add one after the figure by enclosing some name in angle
-brackets. You can then reference the figure in your text by writing an `[@]`
-symbol followed by that name. Headings and equations can also be labelled to
-make them referenceable.
+您继续编写报告，现在想要引用该图表。
+为此，首先在图表上贴上标签。
+标签用于唯一标识文档中的元素，你只需要通过在尖括号中将标签名称括起来，并在图表后加入。
+然后，您可以通过在文本中键入 `[@]` 符号，后面跟标签名称来引用该图表。
+标题和表达式也可以加入标签，以使其可引用。

 ```example
 Glaciers as the one shown in
@@ -161,37 +147,32 @@ we don't take action soon!

 <div class="info-box">

-So far, we've passed content blocks (markup in square brackets) and strings
-(text in double quotes) to our functions. Both seem to contain text. What's the
-difference?
+到目前为止，我们已经将内容块（方括号中的标记文本）和字符串（双引号中的文本）传递给我们的函数。
+两者都似乎包含文本，它们有什么区别呢？

-A content block can contain text, but also any other kind of markup, function
-calls, and more, whereas a string is really just a _sequence of characters_ and
-nothing else.
+内容块可以包含文本，也可以包含任何其他类型的标记、函数调用等，
+而字符串实际上只是 _字符构成的串_，不包含其他内容。
+
+例如，`image` 函数需要图像文件的路径，而将一段文本或另一张图像，作为图像的路径参数传递是没有意义的。
+这就是为什么这里只允许输入字符串作为参数。
+相反，字符串适用于任何需要内容块的地方，因为文本是一种有效的内容块。

-For example, the image function expects a path to an image file.
-It would not make sense to pass, e.g., a paragraph of text or another image as
-the image's path parameter. That's why only strings are allowed here.
-On the contrary, strings work wherever content is expected because text is a
-valid kind of content.
 </div>

-## Adding a bibliography { #bibliography }
-As you write up your report, you need to back up some of your claims. You can
-add a bibliography to your document with the [`bibliography`]($bibliography)
-function. This function expects a path to a bibliography file.
+## 添加参考文献
+
+在撰写报告时，您需要引用资料来支持您的一些论证。
+您可以使用 [`bibliography`]($bibliography) 函数向文档添加参考文献。
+此函数需要参考文献文件的路径。

-Typst's native bibliography format is
-[Hayagriva](https://github.com/typst/hayagriva/blob/main/docs/file-format.md),
-but for compatibility you can also use BibLaTeX files. As your classmate has
-already done a literature survey and sent you a `.bib` file, you'll use that
-one. Upload the file through the file panel to access it in Typst.
+Typst 的原生参考文献格式是 [Hayagriva](https://github.com/typst/hayagriva/blob/main/docs/file-format.md)，
+但为了兼容性，您也可以使用 BibLaTeX 文件。
+由于您的同学已经完成了文献调查并向您发送了 `.bib` 文件，因此您将直接使用该文件。
+请在文件面板中上传文件，以在 Typst App 中访问它。

-Once the document contains a bibliography, you can start citing from it.
-Citations use the same syntax as references to a label. As soon as you cite a
-source for the first time, it will appear in the bibliography section of your
-document. Typst supports different citation and bibliography styles. Consult the
-[reference]($bibliography.style) for more details.
+一旦文档引入了参考文献，您就可以引用它了。
+引用参考文献的语法与对标签的引用相同。一旦您第一次引用一个来源，它就会出现在您文档的参考文献部分。
+Typst 支持不同的引用和参考文献样式。有关的详细信息，请阅读 [参考]($bibliography.style)。

 ```example
 = Methods
@@ -201,20 +182,19 @@ established in @glacier-melt.
 #bibliography("works.bib")
 ```

-## Maths
-After fleshing out the methods section, you move on to the meat of the document:
-Your equations. Typst has built-in mathematical typesetting and uses its own
-math notation. Let's start with a simple equation. We wrap it in `[$]` signs
-to let Typst know it should expect a mathematical expression:
+## 数学
+
+充实了方法部分后，您继续完成这篇文稿的实质部分：数学公式。
+Typst 具有内置的数学排版引擎，并使用自己的数学记号。
+让我们从一个简单的等式开始。我们使用 `[$]` 符号括住它，让 Typst 知道它正在处理一个数学表达式：

 ```example
 The equation $Q = rho A v + C$
 defines the glacial flow rate.
 ```

-The equation is typeset inline, on the same line as the surrounding text. If you
-want to have it on its own line instead, you should insert a single space at its
-start and end:
+公式是内联排版的，与周围的文本在同一行上。
+如果你想把它放在它自己的新行上，你应该在其开头和结尾插入一个空格：

 ```example
 The flow rate of a glacier is
@@ -223,14 +203,11 @@ defined by the following equation:
 $ Q = rho A v + C $
 ```

-We can see that Typst displayed the single letters `Q`, `A`, `v`, and `C` as-is,
-while it translated `rho` into a Greek letter. Math mode will always show single
-letters verbatim. Multiple letters, however, are interpreted as symbols,
-variables, or function names. To imply a multiplication between single letters,
-put spaces between them.
+我们可以看到，Typst 按原样显示单个字母 `Q`，`A`，`v` 和 `C`，而它将 `rho` 翻译成希腊字母。
+数学模式将始终原样地显示单个字母。然而，多个字母将被视作为符号、变量或函数名称。
+要隐式地表明这是单个字母之间的乘法，请在它们之间加入空格。

-If you want to have a variable that consists of multiple letters, you can
-enclose it in quotes:
+如果你想要一个由多个字母组成的变量，你可以用引号括起来：

 ```example
 The flow rate of a glacier is given
@@ -239,8 +216,8 @@ by the following equation:
 $ Q = rho A v + "time offset" $
 ```

-You'll also need a sum formula in your paper. We can use the `sum` symbol and
-then specify the range of the summation in sub- and superscripts:
+您还需要在论文中加入一个求和公式。
+我们可以使用 `sum` 符号，然后在下标和上标中指定求和的范围：

 ```example
 Total displaced soil by glacial flow:
@@ -249,16 +226,14 @@ $ 7.32 beta +
   sum_(i=0)^nabla Q_i / 2 $
 ```

-To add a subscript to a symbol or variable, type a `_` character and then the
-subscript. Similarly, use the `^` character for a superscript. If your
-sub- or superscript consists of multiple things, you must enclose them
-in round parentheses.
+要向符号或变量添加下标，请输入 `_` 字符，然后输入下标。
+同样，为上标使用 `^` 字符。
+如果下标或上标由多个内容部分组成，则必须将它们括在圆括号中。

-The above example also showed us how to insert fractions: Simply put a `/`
-character between the numerator and the denominator and Typst will automatically
-turn it into a fraction. Parentheses are smartly resolved, so you can enter your
-expression as you would into a calculator and Typst will replace parenthesized
-sub-expressions with the appropriate notation.
+上面的例子还向我们展示了如何插入分数：
+只需在分子和分母之间放置一个 `/` 字符，Typst 就会自动将其变成分数。
+括号会被巧妙地解析，因此您可以像在计算器中一样输入数学表达式，
+Typst 将用适当的符号替换括号中的子表达式。

 ```example
 Total displaced soil by glacial flow:
@@ -268,42 +243,38 @@ $ 7.32 beta +
     (Q_i (a_i - epsilon)) / 2 $
 ```

-Not all math constructs have special syntax. Instead, we use functions, just
-like the `image` function we have seen before. For example, to insert a column
-vector, we can use the [`vec`]($math.vec) function. Within math mode, function
-calls don't need to start with the `#` character.
+并非所有数学结构都有特殊的语法。
+相反，我们使用函数，就像我们之前看到的 `image` 函数一样。
+例如，要插入列向量，我们可以使用 [`vec`]($math.vec) 函数。
+在数学模式下，函数调用不需要以 `#` 字符开头。

 ```example
 $ v := vec(x_1, x_2, x_3) $
 ```

-Some functions are only available within math mode. For example, the
-[`cal`]($math.cal) function is used to typeset calligraphic letters commonly
-used for sets. The [math section of the reference]($category/math) provides a
-complete list of all functions that math mode makes available.
+某些函数仅在数学模式下可用。
+例如，[`cal`]($math.cal) 函数用于排版通常用于集合论的书法字母。
+[参考的数学部分]($category/math) 提供了数学模式提供的所有函数的完整列表。

-One more thing: Many symbols, such as the arrow, have a lot of variants. You can
-select among these variants by appending a dot and a modifier name to a symbol's
-name:
+还有一件事：许多符号，如箭头，有很多变体。
+您可以通过在符号名称后附加点和修饰符名称来选择这些变体：

 ```example
 $ a arrow.squiggly b $
 ```

-This notation is also available in markup mode, but the symbol name must be
-preceded with `#sym.` there. See the [symbols section]($category/symbols/sym)
-for a list of all available symbols.
-
-## Review
-You have now seen how to write a basic document in Typst. You learned how to
-emphasize text, write lists, insert images, align content, and typeset
-mathematical expressions. You also learned about Typst's functions. There are
-many more kinds of content that Typst lets you insert into your document, such
-as [tables]($table), [shapes]($category/visualize), and [code blocks]($raw). You
-can peruse the [reference]($reference) to learn more about these and other
-features.
-
-For the moment, you have completed writing your report. You have already saved a
-PDF by clicking on the download button in the top right corner. However, you
-think the report could look a bit less plain. In the next section, we'll learn
-how to customize the look of our document.
+这种记号在标记模式下也可以使用，但符号名称前面必须带有 `#sym`。
+有关所有可用符号的列表，请参阅 [符号部分]($category/symbols/sym)。
+
+## 回顾
+
+您现在已经了解了如何在 Typst 中编写基本的文档。
+您学习了如何强调文本、编写列表、插入图像、对齐内容和排版数学表达式。
+您还了解了 Typst 的函数。
+Typst 允许您将更多种类的内容插入到文档中，例如 [表格]($table)、[形状]($category/visualize) 和 [代码块]($raw)。
+您可以仔细阅读 [参考]($reference) 以了解有关这些函数和其他函数的更多信息。
+
+目前，您已完成报告的编写。
+您已经通过单击右上角的下载按钮保存了 PDF。
+但是，您认为报告看起来不应该那么朴素。
+在下一节中，我们将学习如何自定义文档的外观。
diff --git a/docs/tutorial/2-formatting.md b/docs/tutorial/2-formatting.md
index 7eb82710..bbcd45f8 100644
--- a/docs/tutorial/2-formatting.md
+++ b/docs/tutorial/2-formatting.md
@@ -1,21 +1,17 @@
 ---
-description: Typst's tutorial.
+description: Typst 的教程。
 ---

-# Formatting
-So far, you have written a report with some text, a few equations and images.
-However, it still looks very plain. Your teaching assistant does not yet know
-that you are using a new typesetting system, and you want your report to fit in
-with the other student's submissions. In this chapter, we will see how to format
-your report using Typst's styling system.
-
-## Set rules
-As we have seen in the previous chapter, Typst has functions that _insert_
-content (e.g. the [`image`]($image) function) and others that _manipulate_
-content that they received as arguments (e.g. the [`align`]($align) function).
-The first impulse you might have when you want, for example, to justify the
-report, could be to look for a function that does that and wrap the complete
-document in it.
+# 格式
+到目前为止，您已经写了一份包含一些文本、一些数学公式和图像的报告。
+但是，它看起来仍然很朴素。您的助教还不知道您正在使用新的排版系统，
+并且您希望您的报告与其他学生提交的报告外观上一致。
+在本章中，我们将了解如何使用 Typst 的样式系统来格式化你的报告。
+
+## Set 规则 { #set-rules }
+正如我们在上一章中看到的，Typst 具有 _插入_ 内容块的函数（例如 [`image`]($image) 函数），
+以及其他将内容块作为参数接收的 _操作_ 函数（例如 [`align`]($align) 函数）。
+您可能第一个想法是，例如，为了报告的文本左右对齐（justify），您可能会寻找一个执行此操作的函数并将整个文稿包装在其中。

 ```example
 #par(justify: true)[
@@ -31,21 +27,25 @@ document in it.
 ]
 ```

-Wait, shouldn't all arguments of a function be specified within parentheses? Why
-is there a second set of square brackets with content _after_ the parentheses?
-The answer is that, as passing content to a function is such a common thing to
-do in Typst, there is special syntax for it: Instead of putting the content
-inside of the argument list, you can write it in square brackets directly after
-the normal arguments, saving on punctuation.
+等等，函数的所有参数不应该在括号内指定吗？为什么在圆括号 _后面_ 有第二组方括号组成的内容块？
+答案是，由于将内容块传递给函数在 Typst 中非常常见，因此它有着特殊的语法：
+无需将内容块放在参数列表中，而是可以直接将其写在方括号中，并放在普通参数之后，从而节省标点符号。
+
+<div class="info-box">
+
+译者注：这其实只是一个语法糖，即任何 `fn(...)[XXX][YYY][ZZZ]`，都会被自动转成 `fn(..., [XXX], [YYY], [ZZZ])`。
+
+所以你可以对任意一个函数使用，包括你自己的自定义函数，只要在转换后的结果符合函数入参要求即可。
+
+</div>

-As seen above, that works. The [`par`]($par) function justifies all paragraphs
-within it. However, wrapping the document in countless functions and applying
-styles selectively and in-situ can quickly become cumbersome.
+如上所示，这个语法是有效的。[`par`]($par) 函数左右对齐了里面的所有段落。
+但是，将文稿包装在无数的函数中，并选择地就地应用样式，这很快就会变得麻烦且复杂。

-Fortunately, Typst has a more elegant solution. With _set rules,_ you can apply
-style properties to all occurrences of some kind of content. You write a set
-rule by entering the `{set}` keyword, followed by the name of the function whose
-properties you want to set, and a list of arguments in parentheses.
+幸运的是，Typst 有一个更优雅的解决方案。
+使用 _Set 规则_ ，您可以将样式属性应用于某类内容块的所有实例。
+通过输入 `{set}` 关键字编写 Set 规则，后面跟随着你要设置属性的函数的名称，
+并在括号中输入你需要的新默认参数列表。

 ```example
 #set par(justify: true)
@@ -63,46 +63,36 @@ water).

 <div class="info-box">

-Want to know in more technical terms what is happening here?
+想以更深层的方式了解这里发生了什么吗？

-Set rules can be conceptualized as setting default values
-for some of the parameters of a function for all future
-uses of that function.
+Set 规则可以概念化为，为将来该函数的所有使用的某些参数设置默认值。
 </div>

-## The autocomplete panel { #autocomplete }
-If you followed along and tried a few things in the app, you might have noticed
-that always after you enter a `#` character, a panel pops up to show you the
-available functions, and, within an argument list, the available parameters.
-That's the autocomplete panel. It can be very useful while you are writing your
-document: You can apply its suggestions by hitting the Return key or navigate to
-the desired completion with the arrow keys. The panel can be dismissed by
-hitting the Escape key and opened again by typing `#` or hitting
-<kbd>Ctrl</kbd> + <kbd>Space</kbd>. Use the autocomplete panel to discover the
-right arguments for functions. Most suggestions come with a small description of
-what they do.
+## 自动补全面板 { #autocomplete }
+如果您按照操作并在 App 中尝试了一些操作，您可能已经注意到，
+在输入 `#` 字符后，总是会弹出一个面板，向您显示可用函数，并在参数列表中显示可用参数。
+这是自动补全面板。它在编写文档时非常有用：您可以通过按 Return 键或使用箭头键导航到所需的补全来应用该建议。
+面板可以通过按 Esc 键关闭，然后通过输入 `#` 或按 <kbd>Ctrl</kbd> + <kbd>Space</kbd> 再次打开。
+使用自动补全面板去掌握函数的正确参数。大多数建议都附有对它们所做的事情的简短描述。

 ![Autocomplete panel](2-formatting-autocomplete.png)

-## Set up the page { #page-setup }
-Back to set rules: When writing a rule, you choose the function depending on
-what type of element you want to style. Here is a list of some functions that
-are commonly used in set rules:
+## 设置页面 { #page-setup }
+回到 Set 规则：编写规则时，您可以根据要设置样式的元素类型来选择函数。
+以下是 Set 规则中常用的一些函数的列表：

-- [`text`]($text) to set font family, size, color, and other properties of text
-- [`page`]($page) to set the page size, margins, headers, enable columns, and
-  footers
-- [`par`]($par) to justify paragraphs, set line spacing, and more
-- [`heading`]($heading) to set the appearance of headings and enable numbering
-- [`document`]($document) to set the metadata contained in the PDF output, such
-  as title and author
+- [`text`]($text) 用于设置文本的字体、大小、颜色和其他属性
+- [`page`]($page) 用于设置页面大小、边距、页眉、启用栏和页脚
+- [`par`]($par) 用于对齐段落、设置行距等
+- [`heading`]($heading) 用于设置标题的外观与启用编号
+- [`document`]($document) 用于设置 PDF 输出中包含的元数据，例如标题和作者

-Not all function parameters can be set. In general, only parameters that tell
-a function _how_ to do something can be set, not those that tell it _what_ to
-do it with. The function reference pages indicate which parameters are settable.
+并非所有函数参数都可以设置。
+通常，只能设置告诉函数 _如何_ 做某事的参数，而不能设置告诉函数 _做什么_ 的参数。
+函数参考页指明了哪些参数是可以应用 Set 规则的。

-Let's add a few more styles to our document. We want larger margins and a serif
-font. For the purposes of the example, we'll also set another page size.
+让我们向文档添加更多样式，我们想要更大的边距和衬线字体。
+出于示例的目的，我们还将设置另一个页面大小。

 ```example
 #set text(
@@ -147,35 +137,29 @@ behavior of these natural structures.
 ]
 ```

-There are a few things of note here.
+这里有几点需要注意。
+
+首先是 [`page`]($page) 的 Set 规则，它接收两个参数：页面大小和页面边距。
+页面大小为字符串，Typst 接受 [许多标准页面大小]($page.paper)，但您也可以指定自定义页面大小。
+边距为一个 [字典]($dictionary)，字典是键值对的集合。
+在本例中，键为 `x` 和 `y`，值分别为水平边距和垂直边距。
+我们还可以通过传递带有键 `{left}`、`{right}`、`{top}` 和 `{bottom}` 的字典来为每边指定单独的边距。

-First is the [`page`]($page) set rule. It receives two arguments: the page size
-and margins for the page. The page size is a string. Typst accepts
-[many standard page sizes,]($page.paper) but you can also specify a custom page
-size. The margins are specified as a [dictionary.]($dictionary) Dictionaries are
-a collection of key-value pairs. In this case, the keys are `x` and `y`, and the
-values are the horizontal and vertical margins, respectively. We could also have
-specified separate margins for each side by passing a dictionary with the keys
-`{left}`, `{right}`, `{top}`, and `{bottom}`.
+其次是 [`text`]($text) 的 Set 规则。
+在这里，我们将字体大小设置为 `{10pt}`，将字体设置为 `{"New Computer Modern"}`。
+Typst App 带有许多字体，您可以在您的文档自主尝试。
+当您在输入 `text` 函数的 `font` 参数时，您可以在自动补全面板中发现所有可用的字体。

-Next is the set [`text`]($text) set rule. Here, we set the font size to `{10pt}`
-and font family to `{"New Computer Modern"}`. The Typst app comes with many
-fonts that you can try for your document. When you are in the text function's
-argument list, you can discover the available fonts in the autocomplete panel.
+我们还设置了行间距（又名行距）：它被指定为 [length]($length) 值，
+我们使用 `em` 单位来指定相对于字体大小的行距：`{1em}` 相当于当前字体大小（默认为 `{11pt}`）。

-We have also set the spacing between lines (a.k.a. leading): It is specified as
-a [length]($length) value, and we used the `em` unit to specify the leading
-relative to the size of the font: `{1em}` is equivalent to the current font size
-(which defaults to `{11pt}`).
+最后，我们通过加入中心对齐和垂直对齐来对图像进行底部对齐。
+垂直和水平对齐可以与 `{+}` 运算符结合使用，以生成 2D 对齐。

-Finally, we have bottom aligned our image by adding a vertical alignment to our
-center alignment. Vertical and horizontal alignments can be combined with the
-`{+}` operator to yield a 2D alignment.

-## A hint of sophistication { #sophistication }
-To structure our document more clearly, we now want to number our headings. We
-can do this by setting the `numbering` parameter of the [`heading`]($heading)
-function.
+## 更复杂一点 { #sophistication }
+为了更清楚地组织我们的文档，我们现在要对标题进行编号。
+我们可以通过设置 [`heading`]($heading) 函数的 `numbering` 参数来做到这一点。

 ```example
 >>> #set text(font: "New Computer Modern")
@@ -191,10 +175,9 @@ function.
 #lorem(15)
 ```

-We specified the string `{"1."}` as the numbering parameter. This tells Typst to
-number the headings with arabic numerals and to put a dot between the number of
-each level. We can also use [letters, roman numerals, and symbols]($numbering)
-for our headings:
+我们指定了字符串 `{"1."}` 作为编号参数。
+这将告诉 Typst 用阿拉伯数字对标题进行编号，并在每个级别的编号之间放置一个点。
+我们还可以使用 [字母，罗马数字和符号]($numbering) 作为编号：

 ```example
 >>> #set text(font: "New Computer Modern")
@@ -210,36 +193,29 @@ for our headings:
 #lorem(15)
 ```

-This example also uses the [`lorem`]($lorem) function to generate some
-placeholder text. This function takes a number as an argument and generates that
-many words of _Lorem Ipsum_ text.
+此示例还使用 [`lorem`]($lorem) 函数生成一些占位文本。
+此函数将一个数字作为参数，并生成许多 _Lorem Ipsum_ 文本单词。

 <div class="info-box">

-Did you wonder why the headings and text set rules apply to all text and headings,
-even if they are not produced with the respective functions?
+您是否想知道为什么标题和文本 Set 规则适用于所有文本和标题，即使它们不是使用函数生成的？

-Typst internally calls the `heading` function every time you write
-`[= Conclusion]`. In fact, the function call `[#heading[Conclusion]]` is
-equivalent to the heading markup above. Other markup elements work similarly,
-they are only _syntax sugar_ for the corresponding function calls.
+Typst 每次在你写  `[= Conclusion]` 时都会在内部调用 `heading` 函数。
+实际上，函数调用 `[#heading[Conclusion]]` 等效于上面的标题标记。
+其他标记元素的工作方式类似，它们仅仅是相应的函数调用的 _语法糖_ 。
 </div>

-## Show rules
-You are already pretty happy with how this turned out. But one last thing needs
-to be fixed: The report you are writing is intended for a larger project and
-that project's name should always be accompanied by a logo, even in prose.
+## Show 规则 { #show-rules }
+你已经对这个结果很满意了。
+但最后一件事需要修改：您正在编写的报告是为一个更大的项目准备的，
+在该项目的名称旁始终应该附上项目的 Logo，即使是仅有文字的单调文章。

-You consider your options. You could add an `[#image("logo.svg")]` call before
-every instance of the logo using search and replace. That sounds very tedious.
-Instead, you could maybe
-[define a custom function]($function/#defining-functions) that always yields the
-logo with its image. However, there is an even easier way:
+你在考虑你的选择。您可以使用搜索和替换在 Logo 的每个实例之前添加 `[#image("logo.svg")]` 调用，这听起来很乏味。
+相反，你可以 [定义一个自定义函数]($function/#definitions)，它将生成带有图像的 Logo。但是，还有一种更简单的方法：

-With show rules, you can redefine how Typst displays certain elements. You
-specify which elements Typst should show differently and how they should look.
-Show rules can be applied to instances of text, many functions, and even the
-whole document.
+使用 Show 规则，您可以重新定义 Typst 显示某些元素的方式。
+您可以指定 Typst 应以不同的方式显示哪些元素以及它们的外观。
+显示规则可以应用于文本实例、许多函数，甚至整个文档。

 ```example
 #show "ArtosFlow": name => box[
@@ -255,27 +231,21 @@ ArtosFlow project. ArtosFlow is a
 project of the Artos Institute.
 ```

-There is a lot of new syntax in this example: We write the `{show}` keyword,
-followed by a string of text we want to show differently and a colon. Then, we
-write a function that takes the content that shall be shown as an argument.
-Here, we called that argument `name`. We can now use the `name` variable in the
-function's body to print the ArtosFlow name. Our show rule adds the logo image
-in front of the name and puts the result into a box to prevent linebreaks from
-occurring between logo and name. The image is also put inside of a box, so that
-it does not appear in its own paragraph.
-
-The calls to the first box function and the image function did not require a
-leading `#` because they were not embedded directly in markup. When Typst
-expects code instead of markup, the leading `#` is not needed to access
-functions, keywords, and variables. This can be observed in parameter lists,
-function definitions, and [code blocks]($scripting).
-
-## Review
-You now know how to apply basic formatting to your Typst documents. You learned
-how to set the font, justify your paragraphs, change the page dimensions, and
-add numbering to your headings with set rules. You also learned how to use a
-basic show rule to change how text appears throughout your document.
-
-You have handed in your report. Your supervisor was so happy with it that they
-want to adapt it into a conference paper! In the next section, we will learn how
-to format your document as a paper using more advanced show rules and functions.
+在这个例子中有很多新的语法：我们写入 `{show}` 关键字，后面跟一个我们希望以不同方式显示的文本字符串，以及一个冒号。
+然后，我们编写一个函数，该函数将应显示的内容作为参数输入，在这里，我们称该参数为 `名称`。
+我们现在可以使用函数体中的 `name` 变量来输出名称 `ArtosFlow`。
+我们的 Show 规则在名称前面添加 Logo 图像，并将结果放入 `box` 中，以防止 Logo 和名称之间出现换行符。
+图像也放在一个 `box` 中，这样它就不会出现在自己的段落中。
+
+对第一个 `box` 函数和 `image` 函数的调用不需要前导 `#`，因为它们没有直接嵌入到标记文本中。
+当 Typst 处于代码模式而不是标记模式时，不需要前导 `#` 来访问函数、关键字和变量。
+同样的现象也可以在函数参数列表、函数定义和 [代码块]($scripting) 中观察到。
+
+
+## 回顾 { #review }
+您现在知道如何将基本格式应用于 Typst 文档。
+您学习了如何设置字体、对齐段落、更改页面尺寸以及使用 Set 规则向标题添加编号。
+您还学习了如何使用基本的 Show 规则来更改文本在整个文档中的显示方式。
+
+您提交了报告。您的导师对此非常满意，他们想将其改编成会议论文！
+在下一节中，我们将学习如何使用更高级的 Show 规则和函数将文档格式化为论文。
\ No newline at end of file
diff --git a/docs/tutorial/3-advanced.md b/docs/tutorial/3-advanced.md
index 2393a474..7af06802 100644
--- a/docs/tutorial/3-advanced.md
+++ b/docs/tutorial/3-advanced.md
@@ -1,53 +1,44 @@
 ---
-description: Typst's tutorial.
+description: Typst 的教程。
 ---

-# Advanced Styling
-In the previous two chapters of this tutorial, you have learned how to write a
-document in Typst and how to change its formatting. The report you wrote
-throughout the last two chapters got a straight A and your supervisor wants to
-base a conference paper on it! The report will of course have to comply with the
-conference's style guide. Let's see how we can achieve that.
+# 高级样式
+在本教程的前两章中，您学习了如何在 Typst 中编写文档以及如何更改其格式。
+你在这两章写的报告得到了极佳的评价，你的导师想以此为基础写一篇会议论文！
+当然，这篇报告必须遵循会议的论文样式规范。让我们看看应该如何实现这一目标。

-Before we start, let's create a team, invite your supervisor and add them to the
-team. You can do this by going back to the app dashboard with the four-circles
-icon in the top left corner of the editor. Then, choose the plus icon in the
-left toolbar and create a team. Finally, click on the new team and go to its
-settings by clicking 'manage team' next to the team name. Now you can invite
-your supervisor by email.
+在开始之前，请先让我们创建一个团队，邀请您的导师并让他们加入到团队中。
+您可以通过回到 App 的 Dashboard（编辑器左上角的四圈图标）来进行这个操作。
+然后，选择左侧工具栏中的加号图标并创建一个团队。
+最后，单击新团队并通过单击团队名称旁边的 “管理团队” 转到其设置。
+现在，您可以通过电子邮件邀请您的导师了。

 ![The team settings](3-advanced-team-settings.png)

-Next, move your project into the team: Open it, going to its settings by
-choosing the gear icon in the left toolbar and selecting your new team from the
-owners dropdown. Don't forget to save your changes!
-
-Now, your supervisor can also edit the project and you can both see the changes
-in real time. You can join our [Discord server](https://discord.gg/2uDybryKPe)
-to find other users and try teams with them!
-
-## The conference guidelines { #guidelines }
-The layout guidelines are available on the conference website. Let's take a look
-at them:
-
-- The font should be an 11pt serif font
-- The title should be in 17pt and bold
-- The paper contains a single-column abstract and two-column main text
-- The abstract should be centered
-- The main text should be justified
-- First level section headings should be 13pt, centered, and rendered in small
-  capitals
-- Second level headings are run-ins, italicized and have the same size as the
-  body text
-- Finally, the pages should be US letter sized, numbered in the center of the
-  footer and the top right corner of each page should contain the title of the
-  paper
-
-We already know how to do many of these things, but for some of them, we'll need
-to learn some new tricks.
-
-## Writing the right set rules { #set-rules }
-Let's start by writing some set rules for the document.
+接下来，将您的项目移动到团队中：
+打开项目，通过选择左侧工具栏中的齿轮图标，并从所有者列表中选择您的新团队。
+不要忘记保存您的更改！
+
+现在，您的导师也可以编辑项目，并且你们都可以实时查看更改。
+您可以加入我们的 [Discord server](https://discord.gg/2uDybryKPe) 查找具有预览访问权限的其他人，
+并与他们一起尝试团队功能！
+
+## 会议规范 { #guidelines }
+会议布局规范可在会议网站上找到。让我们来看一下：
+
+- 字体应为 11pt 的衬线字体
+- 标题应为 17pt 的粗体
+- 论文包含单栏摘要和两栏正文
+- 摘要应居中
+- 正文应对齐
+- 第一级章节标题应为 13pt，居中并以小写字母呈现
+- 二级标题是短标题，斜体，与正文文本具有相同的大小
+- 最后，页面尺寸应为 US letter，编号在页脚的中心，每页的左上角应包含论文的标题
+
+这些要求的大部分我们已经知道应该如何实现了，但对于其中的少部分内容，我们需要学习一些新的技巧。
+
+## 编写正确的 Set 规则 { #set-rules }
+让我们从为文档编写一些 Set 规则开始。

 ```example
 #set page(
@@ -68,25 +59,24 @@ Let's start by writing some set rules for the document.
 #lorem(600)
 ```

-You are already familiar with most of what is going on here. We set the text
-size to `{11pt}` and the font to Linux Libertine. We also enable paragraph
-justification and set the page size to US letter.
+你对这里的大部分内容已经很熟悉了。
+我们将文本大小设置为 `{11pt}`，将字体设置为 Linux Libertine。
+我们还启用了段落对齐，并将页面尺寸设置为 US letter。

-The `header` argument is new: With it, we can provide content to fill the top
-margin of every page. In the header, we specify our paper's title as requested
-by the conference style guide. We use the `align` function to align the text to
-the right.
+`header` 参数是新出现的：
+有了它，我们可以使用填入的内容块来填充每个页面的上边距。
+在标题中，我们根据会议样式规范的要求将其指定为论文的标题。
+我们使用 `align` 函数将文本向右对齐。

-Last but not least is the `numbering` argument. Here, we can provide a
-[numbering pattern]($numbering) that defines how to number the pages. By
-setting into to `{"1"}`, Typst only displays the bare page number. Setting it to
-`{"(1/1)"}` would have displayed the current page and total number of pages
-surrounded by parentheses. And we could even have provided a completely custom
-function here to format things to our liking.
+最后还有 `numbering` 参数。
+在这里，我们可以提供一个 [numbering pattern]($numbering) 来定义如何对页面进行编号。
+通过设置为 `{"1"}`，Typst 仅显示最简单的页码。
+将其设置为 `{"(1/1)"}` 将显示当前页面和用括号括起来的页总数。
+我们甚至可以在这里提供一个完全自定义的函数来实现我们喜欢的内容显示方式。

-## Creating a title and abstract { #title-and-abstract }
-Now, let's add a title and an abstract. We'll start with the title. We center
-align it and increase its font weight by enclosing it in `[*stars*]`.
+## 创建标题和摘要 { #title-and-abstract }
+现在，让我们添加标题和摘要，我们将从标题开始。
+我们将其居中对齐，并通过将其括在 `[*星号*]` 中以将其加粗。

 ```example
 >>> #set page(width: 300pt, margin: 30pt)
@@ -97,10 +87,9 @@ align it and increase its font weight by enclosing it in `[*stars*]`.
 ])
 ```

-This looks right. We used the `text` function to override the previous text
-set rule locally, increasing the size to 17pt for the function's argument. Let's
-also add the author list: Since we are writing this paper together with our
-supervisor, we'll add our own and their name.
+这看起来是正确的。
+我们使用 `text` 函数以覆盖掉之前对 `text` 应用的 Set 规则，将 `text` 函数参数中的 `size` 增加到 17pt。
+让我们同时添加作者列表：由于我们是与我们的导师一起撰写这篇论文的，我们将添加我们自己和他们的名字。

 ```example
 >>> #set page(width: 300pt, margin: 30pt)
@@ -125,20 +114,17 @@ supervisor, we'll add our own and their name.
 )
 ```

-The two author blocks are laid out next to each other. We use the
-[`grid`]($grid) function to create this layout. With a grid, we can control
-exactly how large each column is and which content goes into which cell. The
-`columns` argument takes an array of [relative lengths]($relative) or
-[fractions]($fraction). In this case, we passed it two equal fractional sizes,
-telling it to split the available space into two equal columns. We then passed
-two content arguments to the grid function. The first with our own details, and
-the second with our supervisors'. We again use the `align` function to center
-the content within the column. The grid takes an arbitrary number of content
-arguments specifying the cells. Rows are added automatically, but they can also
-be manually sized with the `rows` argument.
-
-Now, let's add the abstract. Remember that the conference wants the abstract to
-be set ragged and centered.
+两个作者块彼此相邻，我们使用 [`grid`]($grid) 函数来创建这种布局。
+使用 `grid`，我们可以准确控制每列的大小以及哪些内容放到哪个单元格。
+`columns` 参数接受 [relative lengths]($relative) 或 [fractions]($fraction) 的数组。
+在本例中，我们向它传递了两个相等的 `fractions`，告诉它将可用空间分成两个相等大小的列。
+然后，我们将两个内容块参数传递给 `grid` 函数。
+第一个是我们自己的信息，第二个是我们的导师的信息。
+我们再次使用 `align` 函数将列内的内容居中。
+网格采用任意数量的内容块参数来指定单元格。
+行是自动添加的，但也可以使用 `rows` 参数手动调整它们的大小。
+
+现在，让我们添加加入。请记住，会议希望摘要居中，且左右不对齐。

 ```example:0,0,612,317.5
 >>> #set text(font: "Linux Libertine", 11pt)
@@ -182,15 +168,12 @@ be set ragged and centered.
 >>> #lorem(600)
 ```

-Well done! One notable thing is that we used a set rule within the content
-argument of `align` to turn off justification for the abstract. This does not
-affect the remainder of the document even though it was specified after the
-first set rule because content blocks _scope_ styling. Anything set within a
-content block will only affect the content within that block.
+干的漂亮！值得注意的是，我们在 `align` 的内容参数中使用了一个新的 Set 规则来禁用摘要的对齐。
+即便它是在第一个 Set 规则之后指定的，这也不会影响文档的其余部分。这是因为内容块拥有 _局部作用域_ 样式。
+内容块中设置的任何规则只会影响该内容块中的内容。

-Another tweak could be to save the paper title in a variable, so that we do not
-have to type it twice, for header and title. We can do that with the `{let}`
-keyword:
+另一个调整可以是将论文标题保存在一个变量中，这样我们就不必多次输入标题。
+我们可以使用 `{let}` 关键字来做到这一点：

 ```example:single
 #let title = [
@@ -242,24 +225,19 @@ keyword:
 >>> #lorem(600)
 ```

-After we bound the content to the `title` variable, we can use it in functions
-and also within markup (prefixed by `#`, like functions). This way, if we decide
-on another title, we can easily change it in one place.
-
-## Adding columns and headings { #columns-and-headings }
-The paper above unfortunately looks like a wall of lead. To fix that, let's add
-some headings and switch our paper to a two-column layout. The
-[`columns`]($columns) function takes a number and content, and layouts the
-content into the specified number of columns. Since we want everything after the
-abstract to be in two columns, we need to apply the column function to our whole
-document.
-
-Instead of wrapping the whole document in a giant function call, we can use an
-"everything" show rule. To write such a show rule, put a colon directly behind
-the show keyword and then provide a function. This function is given the rest of
-the document as a parameter. We have called the parameter `rest` here, but you
-are free to choose any name. The function can then do anything with this
-content. In our case, it passes it on to the `columns` function.
+将内容绑定到 `title` 变量后，我们可以在函数和标记模式中使用它（前缀为 `#`，就像函数一样）。
+这样，如果我们决定修改标题内容，我们可以很轻松地只在一个地方更改它，让后所有出现标题的地方都会同步更新。
+
+## 添加列和标题 { #columns-and-headings }
+不幸的是，上面的论文看起来像一堵铅墙。
+为了解决这个问题，让我们添加一些标题，并将我们的论文切换到双列布局。
+[`columns`]($columns) 函数接受一个整数参数和一个内容参数，并将内容布局到指定数量的列中。
+由于我们希望摘要之后的所有内容都在两列中，因此我们需要将 `columns` 函数应用于整个文档。
+
+并不需要将整个文档包装在一个巨大的函数调用里，我们可以使用 “所有内容” Show 规则。
+要编写这样的 show 规则，请在 show 关键字后面直接放置一个冒号，然后提供一个函数，该函数将文档的其余部分作为参数输入。
+我们在这里将参数称为 `rest`，但您可以自由选择任何参数名。
+然后，该函数可以对该内容执行任何操作。在我们的例子中，它将内容传递给 `columns` 函数。

 ```example:single
 >>> #let title = [
@@ -316,9 +294,10 @@ content. In our case, it passes it on to the `columns` function.
 #lorem(200)
 ```

-Now there is only one thing left to do: Style our headings. We need to make them
-centered and use small capitals. Because the `heading` function does not offer
-a way to set any of that, we need to write our own heading show rule.
+现在只剩下一件事要做了：设置标题样式。
+我们需要使它们居中并使用小标题。
+因为 `heading` 函数没有提供任何的方法来让我们完成这个任务，
+所以我们需要编写自己的标题 Show 规则。

 ```example:50,250,265,270
 >>> #let title = [
@@ -381,21 +360,17 @@ a way to set any of that, we need to write our own heading show rule.
 >>> #lorem(45)
 ```

-This looks great! We used a show rule that applies to all headings. We give it a
-function that gets passed the heading as a parameter. That parameter can be used
-as content but it also has some fields like `title`, `numbers`, and `level` from
-which we can compose a custom look. Here, we are center-aligning, setting the
-font weight to `{"regular"}` because headings are bold by default, and use the
-[`smallcaps`]($smallcaps) function to render the heading's title in small
-capitals.
-
-The only remaining problem is that all headings look the same now. The
-"Motivation" and "Problem Statement" subsections ought to be italic run in
-headers, but right now, they look indistinguishable from the section headings. We
-can fix that by using a `where` selector on our set rule: This is a
-[method]($scripting/#methods) we can call on headings (and other
-elements) that allows us to filter them by their level. We can use it to
-differentiate between section and subsection headings:
+这看起来很棒！我们使用了适用于所有标题的 Show 规则。
+我们给了它一个函数，该函数将标题作为参数传递。
+该参数可以用作内容块，但它也有一些字段，如 `title`、`numbers` 和 `level`，我们可以使用它们组成我们需要的自定义外观。
+在这里，我们应用居中对齐，并将字体粗细设置为 `{"regular"}`，因为标题默认为粗体，
+并使用 [`smallcaps`]($smallcaps) 函数以小写字母的方式呈现标题。
+
+唯一剩下的问题是，现在所有标题看起来都一模一样。
+“Motivation” 和 “Problem Statement” 子小节应该是斜体标题，但现在，它们看起来与小节标题没有区别。
+我们可以通过在设置规则上使用 `where` 选择器来解决这个问题：
+这是一个 [method]($scripting/#methods)，我们可以标题（和其他元素）上调用，允许我们按 `level` 过滤它们。
+我们可以用它来区分小节和子小节标题：

 ```example:50,250,265,245
 >>> #let title = [
@@ -468,25 +443,21 @@ differentiate between section and subsection headings:
 >>> #lorem(45)
 ```

-This looks great! We wrote two show rules that each selectively apply to the
-first and second level headings. We used a `where` selector to filter the
-headings by their level. We then rendered the subsection headings as run-ins. We
-also automatically add a period to the end of the subsection headings.
-
-Let's review the conference's style guide:
-- The font should be an 11pt serif font ✓
-- The title should be in 17pt and bold ✓
-- The paper contains a single-column abstract and two-column main text ✓
-- The abstract should be centered ✓
-- The main text should be justified ✓
-- First level section headings should be centered, rendered in small caps and in 13pt ✓
-- Second level headings are run-ins, italicized and have the same size as the
-  body text ✓
-- Finally, the pages should be US letter sized, numbered in the center and the
-  top right corner of each page should contain the title of the paper ✓
-
-We are now in compliance with all of these styles and can submit the paper to
-the conference! The finished paper looks like this:
+这看起来很棒！我们编写了两个显示规则，每个规则都有选择地应用于一级和二级标题。
+我们使用 `where` 选择器按级别过滤标题。然后，我们将小节标题呈现为短标题。
+我们还会自动在子小节标题的末尾添加一个点号。
+
+让我们回顾一下会议的样式规范：
+- 字体应为 11pt 衬线字体 ✓
+- 标题应为 17pt 和粗体 ✓
+- 论文包含单栏摘要和两列正文 ✓
+- 摘要应居中 ✓
+- 正文应对齐 ✓
+- 第一级章节标题应居中，以小写字母和 13pt 呈现 ✓
+- 二级标题是短标题， 斜体，大小与正文相同 ✓
+- 最后，页面尺寸应为 US letter，编号在中心，每页的左上角应包含论文标题 ✓
+
+我们现在符合所有这些规范，可以向会议提交论文了！完成的论文如下所示：

 <img
   src="3-advanced-paper.png"
@@ -494,17 +465,16 @@ the conference! The finished paper looks like this:
   style="box-shadow: 0 4px 12px rgb(89 85 101 / 20%); width: 500px; max-width: 100%; display: block; margin: 24px auto;"
 >

-## Review
-You have now learned how to create headers and footers, how to use functions and
-scopes to locally override styles, how to create more complex layouts with the [`grid`]($grid) function and how to write show rules for individual functions, and the whole document. You also learned how to use the
-[`where` selector]($styling/#show-rules) to filter the headings by their level.
+## 回顾 { #review }
+您现在已经学习了如何创建页眉和页脚，如何使用函数和作用域范围在本地覆盖样式，
+如何使用 [`grid`]($grid) 函数创建更复杂的布局，
+以及如何为单个函数和整个文档编写 Show 规则。
+您还学习了如何使用 [`where` 选择器]($styling/#show-rules) 按级别过滤标题。

-The paper was a great success! You've met a lot of like-minded researchers at
-the conference and are planning a project which you hope to publish at the same
-venue next year. You'll need to write a new paper using the same style guide
-though, so maybe now you want to create a time-saving template for you and your
-team?
+这篇论文取得了巨大的成功！
+你在会议上遇到了很多志同道合的研究人员，并计划了一个项目，你希望明年在同一地点发表。
+不过，您需要使用相同的样式规范撰写一篇新论文，
+所以也许现在您想为您和您的团队创建一个能够节省你们时间的模板？

-In the next section, we will learn how to create templates that can be reused in
-multiple documents. This is a more advanced topic, so feel free to come back
-to it later if you don't feel up to it right now.
+在下一节中，我们将学习如何创建可在多个文档中复用的模板。
+这是一个更高级的主题，所以如果你现在觉得并没有必要了解，可以以后再学习。
diff --git a/docs/tutorial/4-template.md b/docs/tutorial/4-template.md
index 3b745db5..6a2bf785 100644
--- a/docs/tutorial/4-template.md
+++ b/docs/tutorial/4-template.md
@@ -1,21 +1,19 @@
 ---
-description: Typst's tutorial.
+description: Typst 的教程。
 ---

-# Making a Template
-In the previous three chapters of this tutorial, you have learned how to write a
-document in Typst, apply basic styles, and customize its appearance in-depth to
-comply with a publisher's style guide. Because the paper you wrote in the
-previous chapter was a tremendous success, you have been asked to write a
-follow-up article for the same conference. This time, you want to take the style
-you created in the previous chapter and turn it into a reusable template. In
-this chapter you will learn how to create a template that you and your team can
-use with just one show rule. Let's get started!
-
-## A toy template { #toy-template }
-In Typst, templates are functions in which you can wrap your whole document. To
-learn how to do that, let's first review how to write your very own functions.
-They can do anything you want them to, so why not go a bit crazy?
+# 制作模板
+在本教程的前三章中，您学习了如何在 Typst 中编写文档、应用基本样式，
+以及深入自定义其外观以符合出版社的样式规范。
+因为你在上一章写的论文取得了巨大的成功，所以你被要求为同一个会议写一篇后续文章。
+这一次，您希望使用在上一章中创建的样式，并将其转换为可复用的模板。
+在本章中，您将学习如何为您和您的团队创建只需一个 Show 规则即可使用的模板。
+让我们开始吧！
+
+## 玩具模板 { #toy-template }
+在 Typst 中，模板是一个可以包装整个文档的函数。
+要学习如何做到这一点，让我们首先回顾一下如何编写自己的函数。
+函数可以做任何你想让他们做的事情，所以为什么不做得疯狂一点呢？

 ```example
 #let amazed(term) = box[✨ #term ✨]
@@ -23,14 +21,12 @@ They can do anything you want them to, so why not go a bit crazy?
 You are #amazed[beautiful]!
 ```

-This function takes a single argument, `term`, and returns a content block with
-the `term` surrounded by sparkles. We also put the whole thing in a box so that
-the term we are amazed by cannot be separated from its sparkles by a line break.
+此函数采用单个参数 `term`，并返回一个内容块，其中 `term` 被被一朵朵小火花包围着。
+我们还把整个东西放在一个 `box` 里，这样我们的 `term` 与它的火花就不会换行符分开。

-Many functions that come with Typst have optional named parameters. Our
-functions can also have them. Let's add a parameter to our function that lets us
-choose the color of the text. We need to provide a default color in case the
-parameter isn't given.
+Typst 附带的许多函数都有可选的命名参数，我们的函数也可以实现这一点。
+让我们向函数添加一个参数，其选择文本的颜色。
+我们需要提供默认颜色，以防用户没有给出参数。

 ```example
 #let amazed(term, color: blue) = {
@@ -41,8 +37,8 @@ You are #amazed[beautiful]!
 I am #amazed(color: purple)[amazed]!
 ```

-Templates now work by using an "everything" show rule that applies the custom
-function to our whole document. Let's do that with our `amazed` function.
+模板现在可以通过 “所有内容” Show 规则来使用，该 Show 规则将自定义函数应用于我们的整个文档。
+让我们使用我们的 `amazed` 函数来实现它。

 ```example
 >>> #let amazed(term, color: blue) = {
@@ -55,15 +51,11 @@ negative thoughts or beliefs.
 In fact, I am amazing!
 ```

-Our whole document will now be passed to the `amazed` function, as if we
-wrapped it around it. This is not especially useful with this particular
-function, but when combined with set rules and named arguments, it can be very
-powerful.
+我们的整个文档现在将被传递给 `amazed` 函数，就好像我们把它包裹在 `amazed` 函数里面一样。
+这对于这个特定函数并不是特别有用，但是当 Set 规则和命名参数结合使用时，它可以非常强大。

-## Embedding set and show rules { #set-and-show-rules }
-To apply some set and show rules to our template, we can use `set` and `show`
-within a content block in our function and then insert the document into
-that content block.
+## 嵌入的 Set 和 Show 规则 { #set-and-show-rules }
+要将一些 Set 和 Show 规则应用于我们的模板，我们可以在函数的内容块中使用 `set` 和 `show`，然后将文档插入到该内容块中。

 ```example
 #let template(doc) = [
@@ -77,12 +69,10 @@ I am learning something cool today.
 It's going great so far!
 ```

-Just like we already discovered in the previous chapter, set rules will apply to
-everything within their content block. Since the everything show rule passes our
-whole document to the `template` function, the text set rule and string show
-rule in our template will apply to the whole document. Let's use this knowledge
-to create a template that reproduces the body style of the paper we wrote in the
-previous chapter.
+就像我们在上一章中已经发现的那样，Set 规则将应用于其内容块中的所有内容。
+由于 “所有内容” Show 规则将我们的整个文档传递给 `template` 函数，
+因此模板中的 `text` Set 规则和字符串 Show 规则将应用于整个文档。
+让我们利用这些知识来创建一个模板，以复现我们在上一章中编写的论文的正文风格。

 ```example
 #let conf(title, doc) = {
@@ -147,24 +137,20 @@ previous chapter.
 >>> #lorem(200)
 ```

-We copy-pasted most of that code from the previous chapter. The only two
-differences are that we wrapped everything in the function `conf` and are
-calling the columns function directly on the `doc` argument as it already
-contains the content of the document. Moreover, we used a curly-braced code
-block instead of a content block. This way, we don't need to prefix all set
-rules and function calls with a `#`. In exchange, we cannot write markup
-directly into it anymore.
-
-Also note where the title comes from: We previously had it inside of a variable.
-Now, we are receiving it as the first parameter of the template function.
-Thus, we must specify it in the show rule where we call the template.
-
-## Templates with named arguments { #named-arguments }
-Our paper in the previous chapter had a title and an author list. Let's add these
-things to our template. In addition to the title, we want our template to accept
-a list of authors with their affiliations and the paper's abstract. To keep
-things readable, we'll add those as named arguments. In the end, we want it to
-work like this:
+我们复制粘贴了上一章中的大部分代码。
+唯一的两个区别是，我们将所有内容都包装在函数 `conf` 中，
+并直接在 `doc` 参数上调用 `columns` 函数，因为 `doc` 对应着整个文档的内容。
+此外，我们使用大括号代码块而不是内容块。
+这样，我们就不需要为所有的 Set 规则和函数调用加上 `#` 前缀。
+与之相对的，我们也不再能再直接在里面写标记文本了。
+
+还要注意标题的来源：我们以前把它放在变量中，而现在我们将其作为模板函数的第一个参数接收。
+因此，我们必须在调用模板的 Show 规则中指定它。
+
+## 具有命名参数的模板 { #named-arguments }
+我们在上一章的论文有一个标题和一个作者列表，让我们将这些内容添加到我们的模板中。
+除了标题之外，我们还希望我们的模板接受作者及其单位构成的列表，以及一个论文摘要。
+为了保持可读性，我们将添加这些参数作为命名参数。最后，我们希望它像这样工作：

 ```typ
 #show: doc => conf(
@@ -188,35 +174,27 @@ work like this:
 ...
 ```

-Let's build this new template function. First, we add a default value to the
-`title` argument. This way, we can call the template without specifying a title.
-We also add the named `authors` and `abstract` parameters with empty defaults.
-Next, we copy the code that generates title, abstract and authors from the
-previous chapter into the template, replacing the fixed details with the
-parameters.
-
-The new `authors` parameter expects an [array]($array) of
-[dictionaries]($dictionary) with the keys `name`, `affiliation` and `email`.
-Because we can have an arbitrary number of authors, we dynamically determine if
-we need one, two or three columns for the author list. First, we determine the
-number of authors using the [`.len()`]($array.len) method on the `authors`
-array. Then, we set the number of columns as the minimum of this count and
-three, so that we never create more than three columns. If there are more than
-three authors, a new row will be inserted instead. For this purpose, we have
-also added a `row-gutter` parameter to the `grid` function. Otherwise, the rows
-would be too close together. To extract the details about the authors from the
-dictionary, we use the [field access syntax]($scripting/#fields).
-
-We still have to provide an argument to the grid for each author: Here is where
-the array's [`map` method]($array.map) comes in handy. It takes a function as an
-argument that gets called with each item of the array. We pass it a function
-that formats the details for each author and returns a new array containing
-content values. We've now got one array of values that we'd like to use as
-multiple arguments for the grid. We can do that by using the
-[`spread` operator]($arguments). It takes an array and applies each of its items
-as a separate argument to the function.
-
-The resulting template function looks like this:
+让我们构建这个新的模板函数。
+首先，我们为 `title` 参数添加一个默认值。
+这样，我们可以在不指定标题的情况下调用模板。
+我们还添加了具有空默认值的命名参数 `authors` 和 `abstract`。
+接下来，我们将上一章中生成标题、摘要和作者列表的代码复制到模板中，并用参数替换其中的固定值。
+
+新的 `authors` 参数接收一个由 [字典]($dictionary) 的 [数组]($array)，其中带有键 `name`、`affiliation` 和 `email`。
+因为我们可以输入任意数量的作者，所以我们需要动态地确定作者列表是需要一列、两列还是三列。
+首先，我们在 `authors` 数组上使用 [`.len()`]($array.len) 方法确定作者的数量。
+然后，我们将列数设置为作者数量和 3 之间的最小值，以便我们永远不会创建超过三个列。
+如果作者超过三个，则将插入一个新行。为此，我们还在 `grid` 函数中添加了一个 `row-gending` 参数。
+否则，这些行将会靠得太近。为了从字典中提取有关作者的详细信息，我们使用 [字段访问语法]($scripting/#fields)。
+
+我们仍然必须为每个作者对应的网格提供一个参数：这就是数组的 [`map` 方法]($array.map) 派上用场的地方。
+它将一个函数作为参数，该函数与数组的每个项一起调用。
+我们给它传递一个函数，该函数会格式化每个作者的详细信息，并返回一个包含内容值的新数组。
+现在，我们有一个值数组，我们希望将其用作网格的多个参数。
+我们可以通过使用 [`spread` 操作符]($arguments) 来做到这一点。
+它接受一个数组，并将其数组里的每个项目作为单独的参数应用于函数中。
+
+生成的模板函数如下所示：

 ```typ
 #let conf(
@@ -253,15 +231,13 @@ The resulting template function looks like this:
 }
 ```

-## A separate file { #separate-file }
-Most of the time, a template is specified in a different file and then imported
-into the document. This way, the main file you write in is kept clutter free and
-your template is easily reused. Create a new text file in the file panel by
-clicking the plus button and name it `conf.typ`. Move the `conf` function
-definition inside of that new file. Now you can access it from your main file by
-adding an import before the show rule. Specify the path of the file between the
-`{import}` keyword and a colon, then name the function that you
-want to import.
+## 单独的模板文件 { #separate-file }
+大多数情况下，模板应该在不同的文件中定义，然后导入到文档中。
+这样，您编写的主文件就可以保持整洁，并且您的模板可以轻松地复用。
+在文件面板中通过单击加号按钮创建一个新的文本文件，并将其命名为 `conf.typ`。
+将 `conf` 函数定义移到该新文件内。
+现在，您可以通过在显示规则之前进行导入来从主文件访问它。
+在 `{import}` 关键字和冒号之间指定文件的路径，然后指明你要导入的函数。

 ```example:single
 >>> #let conf(
@@ -360,21 +336,16 @@ want to import.
 #lorem(200)
 ```

-We have now converted the conference paper into a reusable template for that
-conference! Why not share it on
-[Typst's Discord server](https://discord.gg/2uDybryKPe) so that others can use
-it too?
+我们现在已经成功将会议论文转换为该会议的可重复使用模板！
+快来 [Typst 的 Discord 服务器](https://discord.gg/2uDybryKPe) 分享它，
+以便其他人也可以使用它吧！

-## Review
-Congratulations, you have completed Typst's Tutorial! In this section, you have
-learned how to define your own functions and how to create and apply templates
-that define reusable document styles. You've made it far and learned a lot. You
-can now use Typst to write your own documents and share them with others.
+## 回顾 { #review }
+恭喜，您已完成 Typst 的教程！
+在本节中，您学习了如何定义自己的函数，以及如何创建和应用这个定义了可复用文档样式的模板。
+你已经走了很远，学到了很多东西。您现在可以使用 Typst 编写自己的文档并与他人共享。

-We are still a super young project and are looking for feedback. If you have any
-questions, suggestions or you found a bug, please let us know on
-[Typst's Discord server](https://discord.gg/2uDybryKPe), on our
-[contact form](https://typst.app/contact), or on
-[social media.](https://twitter.com/typstapp)
+我们仍然是一个非常年轻的项目，正在寻求您的反馈。
+如果您有任何问题，建议或发现错误，请在 [Typst 的 Discord 服务器](https://discord.gg/2uDybryKPe)，我们的 [contact form](https://typst.app/contact) 或 [社交媒体](https://twitter.com/typstapp) 上告诉我们。

-So what are you waiting for? [Sign up](https://typst.app) and write something!
+那还在等什么呢？快 [注册](https://typst.app) 一个账户并写点有趣的东西吧！
diff --git a/docs/tutorial/welcome.md b/docs/tutorial/welcome.md
index 530336cb..61b54b3d 100644
--- a/docs/tutorial/welcome.md
+++ b/docs/tutorial/welcome.md
@@ -1,44 +1,32 @@
 ---
-description: Typst's tutorial.
+description: Typst 的教程。
 ---

-# Tutorial
-Welcome to Typst's tutorial! In this tutorial, you will learn how to write and
-format documents in Typst. We will start with everyday tasks and gradually
-introduce more advanced features. This tutorial does not assume prior knowledge
-of Typst, other Markup languages, or programming. We do assume that you know how
-to edit a text file.
+# 教程
+欢迎来到 Typst 的教程！在本教程中，您将学习如何在 Typst 中编写和格式化文档。
+我们将从一些日常的任务开始，逐步引入更高级的功能。
+本教程并不事先假定您了解 Typst、其他标记语言或相关的编程技术。
+我们只会假定您知道如何编辑一个文本文件。

-The best way to start is to sign up to the Typst app for free and follow along
-with the steps below. The app gives you instant preview, syntax highlighting and
-helpful autocompletions. Alternatively, you can follow along in your local text
-editor with the [open-source CLI](https://github.com/typst/typst).
+开始的最佳方法是去免费注册一个 Typst App 账户，并按照以下步骤操作。
+该 App 将为您提供即时预览，语法高亮和强大的自动补全。
+亦或者您可以使用 [开源 CLI](https://github.com/typst/typst) 在本地文本编辑器中进行编辑和编译。

-## When to use Typst { #when-typst }
-Before we get started, let's check what Typst is and when to use it. Typst is a
-markup language for typesetting documents. It is designed to be easy to learn,
-fast, and versatile. Typst takes text files with markup in them and outputs
-PDFs.
+## 何时使用 Typst { #when-typst }
+在开始之前，让我们考虑一下 Typst 到底是什么，以及我们在什么时候应该使用它。
+Typst 是一种用于排版文档的标记语言，它旨在易于学习、快速且用途广泛。
+Typst 输入带有标记的文本文件，并将其输出为 PDF 格式。

-Typst is a good choice for writing any long form text such as essays, articles,
-scientific papers, books, reports, and homework assignments. Moreover, Typst is
-a great fit for any documents containing mathematical notation, such as papers
-in the math, physics, and engineering fields. Finally, due to its strong styling
-and automation features, it is an excellent choice for any set of documents that
-share a common style, such as a book series.
+Typst 是撰写长篇文本（如论文、文章、书籍、报告和作业）的极佳选择。
+并且，Typst 非常适合书写包含数学公式的文档，例如数学、物理和工程领域的论文。
+此外，由于其强大的样式和自动化功能，它是编写具有相同样式的一系列文档（例如丛书）的绝佳选择。

-## What you will learn { #learnings }
-This tutorial has four chapters. Each chapter builds on the previous one. Here
-is what you will learn in each of them:
+## 你将学到什么 { #learnings }
+本教程共分四章，每一章都建立在上一章的基础上，以下是您将在每个章节中学到的内容：

-1. [Writing in Typst:]($tutorial/writing-in-typst) Learn how to write text and
-   insert images, equations, and other elements.
-2. [Formatting:]($tutorial/formatting) Learn how to adjust the formatting
-   of your document, including font size, heading styles, and more.
-3. [Advanced Styling:]($tutorial/advanced-styling) Create a complex page
-   layout for a scientific paper with typographic features such as an author
-   list and run-in headings.
-4. [Making a Template:]($tutorial/making-a-template) Build a reusable template
-   from the paper you created in the previous chapter.
+1. [使用 Typst 写作]($tutorial/writing-in-typst)：了解如何编写文本和插入图像、数学公式和其他元素。
+2. [格式]($tutorial/formatting)：了解如何调整文稿的格式，包括字体大小、标题样式等。
+3. [高级样式]($tutorial/advanced-styling)：为有排版要求（如作者列表和短标题）的科学论文创建复杂的页面布局。
+4. [制作模板]($tutorial/making-a-template)： 使用您在上一章中编写的论文来构建可复用的模板。

-We hope you'll enjoy Typst!
+我们希望您会喜欢 Typst！
