route: /docs/reference/layout/grid/
title: Grid
description: '`grid` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: examples
  name: Examples
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-columns
    name: columns
    children: []
  - id: parameters-rows
    name: rows
    children: []
  - id: parameters-gutter
    name: gutter
    children: []
  - id: parameters-column-gutter
    name: column-gutter
    children: []
  - id: parameters-row-gutter
    name: row-gutter
    children: []
  - id: parameters-children
    name: children
    children: []
body:
  kind: func
  content:
    path: []
    name: grid
    title: Grid
    keywords: []
    oneliner: Arranges content in a grid.
    element: true
    details: |-
      <p>Arranges content in a grid.</p>
      <p>The grid element allows you to arrange content in a grid. You can define the
      number of rows and columns, as well as the size of the gutters between them.
      There are multiple sizing modes for columns and rows that can be used to
      create complex layouts.</p>
      <p>The sizing of the grid is determined by the track sizes specified in the
      arguments. Because each of the sizing parameters accepts the same values, we
      will explain them just once, here. Each sizing argument accepts an array of
      individual track sizes. A track size is either:</p>
      <ul>
      <li>
      <p><code><span class="typ-key">auto</span></code>: The track will be sized to fit its contents. It will be at most
      as large as the remaining space. If there is more than one <code><span class="typ-key">auto</span></code> track
      which, and together they claim more than the available space, the <code><span class="typ-key">auto</span></code>
      tracks will fairly distribute the available space among themselves.</p>
      </li>
      <li>
      <p>A fixed or relative length (e.g. <code><span class="typ-num">10pt</span></code> or <code><span class="typ-num">20%</span> <span class="typ-op">-</span> <span class="typ-num">1cm</span></code>): The track
      will be exactly of this size.</p>
      </li>
      <li>
      <p>A fractional length (e.g. <code><span class="typ-num">1fr</span></code>): Once all other tracks have been sized,
      the remaining space will be divided among the fractional tracks according
      to their fractions. For example, if there are two fractional tracks, each
      with a fraction of <code><span class="typ-num">1fr</span></code>, they will each take up half of the remaining
      space.</p>
      </li>
      </ul>
      <p>To specify a single track, the array can be omitted in favor of a single
      value. To specify multiple <code><span class="typ-key">auto</span></code> tracks, enter the number of tracks
      instead of an array. For example, <code>columns:</code> <code><span class="typ-num">3</span></code> is equivalent to
      <code>columns:</code> <code><span class="typ-punct">(</span><span class="typ-key">auto</span><span class="typ-punct">,</span> <span class="typ-key">auto</span><span class="typ-punct">,</span> <span class="typ-key">auto</span><span class="typ-punct">)</span></code>.</p>
      <h2 id="examples">Examples</h2>
      <p>The example below demonstrates the different track sizing options.</p>
      <div class="previewed-code"><pre><code><span class="typ-comment">// We use `rect` to emphasize the</span>
      <span class="typ-comment">// area of cells.</span>
      <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">rect</span><span class="typ-punct">(</span>
        inset<span class="typ-punct">:</span> <span class="typ-num">8pt</span><span class="typ-punct">,</span>
        fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;e4e5ea&quot;</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        width<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>

      <span class="typ-func">#</span><span class="typ-func">grid</span><span class="typ-punct">(</span>
        columns<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">60pt</span><span class="typ-punct">,</span> <span class="typ-num">1fr</span><span class="typ-punct">,</span> <span class="typ-num">2fr</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        rows<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-key">auto</span><span class="typ-punct">,</span> <span class="typ-num">60pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        gutter<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">,</span>
        <span class="typ-func">rect</span><span class="typ-punct">[</span>Fixed width, auto height<span class="typ-punct">]</span><span class="typ-punct">,</span>
        <span class="typ-func">rect</span><span class="typ-punct">[</span>1/3 of the remains<span class="typ-punct">]</span><span class="typ-punct">,</span>
        <span class="typ-func">rect</span><span class="typ-punct">[</span>2/3 of the remains<span class="typ-punct">]</span><span class="typ-punct">,</span>
        <span class="typ-func">rect</span><span class="typ-punct">(</span>height<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Fixed height<span class="typ-punct">]</span><span class="typ-punct">,</span>
        <span class="typ-func">image</span><span class="typ-punct">(</span><span class="typ-str">&quot;tiger.jpg&quot;</span><span class="typ-punct">,</span> height<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-func">image</span><span class="typ-punct">(</span><span class="typ-str">&quot;tiger.jpg&quot;</span><span class="typ-punct">,</span> height<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/43c676900a73f4788d9f6365f842d270.png" alt="Preview" width="480" height="190"/></div></div>
      <p>You can also <a href="/docs/reference/foundations/arguments//#spreading">spread</a> an array of strings or content
      into a grid to populate its cells.</p>
      <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">grid</span><span class="typ-punct">(</span>
        columns<span class="typ-punct">:</span> <span class="typ-num">5</span><span class="typ-punct">,</span>
        gutter<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span>
        <span class="typ-op">..</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">25</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">map</span><span class="typ-punct">(</span>str<span class="typ-punct">)</span>
      <span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/c37e373dde75e6eaac9c3c1fa3f5bc64.png" alt="Preview" width="480" height="190"/></div></div>
    example: null
    self: false
    params:
    - name: columns
      details: |-
        <p>The column sizes.</p>
        <p>Either specify a track size array or provide an integer to create a grid
        with that many <code><span class="typ-key">auto</span></code>-sized columns. Note that opposed to rows and
        gutters, providing a single track size will only ever create a single
        column.</p>
      example: null
      types:
      - auto
      - int
      - relative
      - fraction
      - array
      strings: []
      default: <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: rows
      details: |-
        <p>The row sizes.</p>
        <p>If there are more cells than fit the defined rows, the last row is
        repeated until there are no more cells.</p>
      example: null
      types:
      - auto
      - int
      - relative
      - fraction
      - array
      strings: []
      default: <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: gutter
      details: |-
        <p>The gaps between rows &amp; columns.</p>
        <p>If there are more gutters than defined sizes, the last gutter is repeated.</p>
      example: null
      types:
      - auto
      - int
      - relative
      - fraction
      - array
      strings: []
      default: <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: column-gutter
      details: <p>The gaps between columns. Takes precedence over <code>gutter</code>.</p>
      example: null
      types:
      - auto
      - int
      - relative
      - fraction
      - array
      strings: []
      default: <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: row-gutter
      details: <p>The gaps between rows. Takes precedence over <code>gutter</code>.</p>
      example: null
      types:
      - auto
      - int
      - relative
      - fraction
      - array
      strings: []
      default: <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: children
      details: |-
        <p>The contents of the grid cells.</p>
        <p>The cells are populated in row-major order.</p>
      example: null
      types:
      - content
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: true
      settable: false
    returns:
    - content
    scope: []
children: []
