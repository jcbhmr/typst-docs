route: /docs/reference/visualize/path/
title: Path
description: '`path` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-fill
    name: fill
    children: []
  - id: parameters-stroke
    name: stroke
    children: []
  - id: parameters-closed
    name: closed
    children: []
  - id: parameters-vertices
    name: vertices
    children: []
body:
  kind: func
  content:
    path: []
    name: path
    title: Path
    keywords: []
    oneliner: A path through a list of points, connected by Bezier curves.
    element: true
    details: |-
      <p>A path through a list of points, connected by Bezier curves.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">path</span><span class="typ-punct">(</span>
        fill<span class="typ-punct">:</span> blue<span class="typ-punct">.</span><span class="typ-func">lighten</span><span class="typ-punct">(</span><span class="typ-num">80%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        stroke<span class="typ-punct">:</span> blue<span class="typ-punct">,</span>
        closed<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">,</span>
        <span class="typ-punct">(</span><span class="typ-num">0pt</span><span class="typ-punct">,</span> <span class="typ-num">50pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">(</span><span class="typ-num">100%</span><span class="typ-punct">,</span> <span class="typ-num">50pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">40pt</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/ace845531f9ab04f113aab62df7c388b.png" alt="Preview" width="480" height="190"/></div></div>
    example: null
    self: false
    params:
    - name: fill
      details: |-
        <p>How to fill the path.</p>
        <p>When setting a fill, the default stroke disappears. To create a
        rectangle with both fill and stroke, you have to configure both.</p>
        <p>Currently all paths are filled according to the <a href="https://en.wikipedia.org/wiki/Nonzero-rule">non-zero winding
        rule</a>.</p>
      example: null
      types:
      - none
      - color
      - gradient
      - pattern
      strings: []
      default: <code><span class="typ-key">none</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: stroke
      details: |-
        <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a> the path. This can be:</p>
        <p>Can be set to  <code><span class="typ-key">none</span></code> to disable the stroke or to <code><span class="typ-key">auto</span></code> for a
        stroke of <code><span class="typ-num">1pt</span></code> black if and if only if no fill is given.</p>
      example: null
      types:
      - none
      - auto
      - length
      - color
      - gradient
      - stroke
      - pattern
      - dictionary
      strings: []
      default: <code><span class="typ-key">auto</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: closed
      details: |-
        <p>Whether to close this path with one last bezier curve. This curve will
        takes into account the adjacent control points. If you want to close
        with a straight line, simply add one last point that's the same as the
        start point.</p>
      example: null
      types:
      - bool
      strings: []
      default: <code><span class="typ-key">false</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: vertices
      details: |-
        <p>The vertices of the path.</p>
        <p>Each vertex can be defined in 3 ways:</p>
        <ul>
        <li>A regular point, as given to the <a href="/docs/reference/visualize/line/"><code>line</code></a> or
        <a href="/docs/reference/visualize/polygon/"><code>polygon</code></a> function.</li>
        <li>An array of two points, the first being the vertex and the second
        being the control point. The control point is expressed relative to
        the vertex and is mirrored to get the second control point. The given
        control point is the one that affects the curve coming <em>into</em> this
        vertex (even for the first point). The mirrored control point affects
        the curve going out of this vertex.</li>
        <li>An array of three points, the first being the vertex and the next
        being the control points (control point for curves coming in and out,
        respectively).</li>
        </ul>
      example: null
      types:
      - array
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: true
      settable: false
    returns:
    - content
    scope: []
children: []
