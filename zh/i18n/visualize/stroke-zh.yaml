route: /docs/reference/visualize/stroke/
title: Stroke
description: Stroke 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: simple-strokes
  name: Simple Strokes
  children: []
- id: fields
  name: Fields
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-paint
    name: paint
    children: []
  - id: constructor-thickness
    name: thickness
    children: []
  - id: constructor-cap
    name: cap
    children: []
  - id: constructor-join
    name: join
    children: []
  - id: constructor-dash
    name: dash
    children: []
  - id: constructor-miter-limit
    name: miter-limit
    children: []
body:
  kind: type
  content:
    name: stroke
    title: Stroke
    keywords: []
    oneliner: Defines how to draw a line.
    details: |-
      <p>Defines how to draw a line.</p>
      <p>A stroke has a <em>paint</em> (a solid color or gradient), a <em>thickness,</em> a line
      <em>cap,</em> a line <em>join,</em> a <em>miter limit,</em> and a <em>dash</em> pattern. All of these
      values are optional and have sensible defaults.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">line</span><span class="typ-punct">(</span>length<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
        spacing<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span>
        <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> red<span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>paint<span class="typ-punct">:</span> blue<span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span> cap<span class="typ-punct">:</span> <span class="typ-str">&quot;round&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>paint<span class="typ-punct">:</span> blue<span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">,</span> dash<span class="typ-punct">:</span> <span class="typ-str">&quot;dashed&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/73223e6efb52c28cfad75203da95d424.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="simple-strokes">Simple strokes</h2>
      <p>You can create a simple solid stroke from a color, a thickness, or a
      combination of the two. Specifically, wherever a stroke is expected you can
      pass any of the following values:</p>
      <ul>
      <li>A length specifying the stroke's thickness. The color is inherited,
      defaulting to black.</li>
      <li>A color to use for the stroke. The thickness is inherited, defaulting to
      <code><span class="typ-num">1pt</span></code>.</li>
      <li>A stroke combined from color and thickness using the <code>+</code> operator as in
      <code><span class="typ-num">2pt</span> <span class="typ-op">+</span> red</code>.</li>
      </ul>
      <p>For full control, you can also provide a <a href="/docs/reference/foundations/dictionary/">dictionary</a> or a
      <code>stroke</code> object to any function that expects a stroke. The dictionary's
      keys may include any of the parameters for the constructor function, shown
      below.</p>
      <h2 id="fields">Fields</h2>
      <p>On a stroke object, you can access any of the fields listed in the
      constructor function. For example, <code><span class="typ-punct">(</span><span class="typ-num">2pt</span> <span class="typ-op">+</span> blue<span class="typ-punct">)</span><span class="typ-punct">.</span>thickness</code> is <code><span class="typ-num">2pt</span></code>.
      Meanwhile, <code><span class="typ-func">stroke</span><span class="typ-punct">(</span>red<span class="typ-punct">)</span><span class="typ-punct">.</span>cap</code> is <code><span class="typ-key">auto</span></code> because it's unspecified. Fields
      set to <code><span class="typ-key">auto</span></code> are inherited.</p>
    constructor:
      path: []
      name: stroke
      title: Construct
      keywords: []
      oneliner: Converts a value to a stroke or constructs a stroke with the given
      element: false
      details: |-
        <p>Converts a value to a stroke or constructs a stroke with the given
        parameters.</p>
        <p>Note that in most cases you do not need to convert values to strokes in
        order to use them, as they will be converted automatically. However,
        this constructor can be useful to ensure a value has all the fields of a
        stroke.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">my-func</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
            x <span class="typ-op">=</span> <span class="typ-func">stroke</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span> <span class="typ-comment">// Convert to a stroke</span>
            <span class="typ-punct">[</span>Stroke has thickness <span class="typ-pol">#</span><span class="typ-pol">x</span><span class="typ-punct">.</span><span class="typ-pol">thickness</span>.<span class="typ-punct">]</span>
        <span class="typ-punct">}</span>
        <span class="typ-func">#</span><span class="typ-func">my-func</span><span class="typ-punct">(</span><span class="typ-num">3pt</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">my-func</span><span class="typ-punct">(</span>red<span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">my-func</span><span class="typ-punct">(</span><span class="typ-func">stroke</span><span class="typ-punct">(</span>cap<span class="typ-punct">:</span> <span class="typ-str">&quot;round&quot;</span><span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/fbd83b6032a4b0d5b75b67d7e69ffbbe.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: paint
        details: |-
          <p>The color or gradient to use for the stroke.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code>black</code>.</p>
        example: null
        types:
        - auto
        - color
        - gradient
        - pattern
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: thickness
        details: |-
          <p>The stroke's thickness.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-num">1pt</span></code>.</p>
        example: null
        types:
        - auto
        - length
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: cap
        details: |-
          <p>How the ends of the stroke are rendered.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-str">&quot;butt&quot;</span></code>.</p>
        example: null
        types:
        - auto
        - str
        strings:
        - string: butt
          details: <p>Square stroke cap with the edge at the stroke's end point.</p>
        - string: round
          details: <p>Circular stroke cap centered at the stroke's end point.</p>
        - string: square
          details: <p>Square stroke cap centered at the stroke's end point.</p>
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: join
        details: |-
          <p>How sharp turns are rendered.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-str">&quot;miter&quot;</span></code>.</p>
        example: null
        types:
        - auto
        - str
        strings:
        - string: miter
          details: |-
            <p>Segments are joined with sharp edges. Sharp bends exceeding the miter
            limit are bevelled instead.</p>
        - string: round
          details: <p>Segments are joined with circular corners.</p>
        - string: bevel
          details: |-
            <p>Segments are joined with a bevel (a straight edge connecting the butts
            of the joined segments).</p>
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: dash
        details: |-
          <p>The dash pattern to use. This can be:</p>
          <ul>
          <li>One of the predefined patterns:
          <ul>
          <li><code><span class="typ-str">&quot;solid&quot;</span></code> or <code><span class="typ-key">none</span></code></li>
          <li><code><span class="typ-str">&quot;dotted&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;densely-dotted&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;loosely-dotted&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;dashed&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;densely-dashed&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;loosely-dashed&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;dash-dotted&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;densely-dash-dotted&quot;</span></code></li>
          <li><code><span class="typ-str">&quot;loosely-dash-dotted&quot;</span></code></li>
          </ul>
          </li>
          <li>An <a href="/docs/reference/foundations/array/">array</a> with alternating lengths for dashes and gaps. You can
          also use the string <code><span class="typ-str">&quot;dot&quot;</span></code> for a length equal to the line thickness.</li>
          <li>A <a href="/docs/reference/foundations/dictionary/">dictionary</a> with the keys <code>array</code> (same as the array
          above), and <code>phase</code> (of type <a href="/docs/reference/layout/length/">length</a>), which defines where in
          the pattern to start drawing.</li>
          </ul>
          <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-key">none</span></code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">line</span><span class="typ-punct">(</span>length<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span> stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
            spacing<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span>
            <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>dash<span class="typ-punct">:</span> <span class="typ-str">&quot;dashed&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>dash<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span> <span class="typ-str">&quot;dot&quot;</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>dash<span class="typ-punct">:</span> <span class="typ-punct">(</span>array<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span> <span class="typ-str">&quot;dot&quot;</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> phase<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/def6f361a9aeba8c6967b661f1974a29.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - auto
        - str
        - array
        - dictionary
        strings:
        - string: solid
          details: ''
        - string: dotted
          details: ''
        - string: densely-dotted
          details: ''
        - string: loosely-dotted
          details: ''
        - string: dashed
          details: ''
        - string: densely-dashed
          details: ''
        - string: loosely-dashed
          details: ''
        - string: dash-dotted
          details: ''
        - string: densely-dash-dotted
          details: ''
        - string: loosely-dash-dotted
          details: ''
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: miter-limit
        details: |-
          <p>Number at which protruding sharp bends are rendered with a bevel
          instead or a miter join. The higher the number, the sharper an angle
          can be before it is bevelled. Only applicable if <code>join</code> is
          <code><span class="typ-str">&quot;miter&quot;</span></code>.</p>
          <p>Specifically, the miter limit is the maximum ratio between the
          corner's protrusion length and the stroke's thickness.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-num">4.0</span></code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> points <span class="typ-op">=</span> <span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">15pt</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">0pt</span><span class="typ-punct">,</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">30pt</span><span class="typ-punct">,</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">6pt</span> <span class="typ-op">+</span> blue<span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
              dir<span class="typ-punct">:</span> ltr<span class="typ-punct">,</span>
              spacing<span class="typ-punct">:</span> <span class="typ-num">1cm</span><span class="typ-punct">,</span>
              <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>miter-limit<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-op">..</span>points<span class="typ-punct">)</span><span class="typ-punct">,</span>
              <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>miter-limit<span class="typ-punct">:</span> <span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-op">..</span>points<span class="typ-punct">)</span><span class="typ-punct">,</span>
              <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>miter-limit<span class="typ-punct">:</span> <span class="typ-num">5</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-op">..</span>points<span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/eec8732f7d326e70f4c24fb50a0a74ce.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - stroke
      scope: []
    scope: []
children: []
