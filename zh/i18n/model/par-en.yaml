route: /docs/reference/model/par/
title: Paragraph
description: '`par` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-leading
    name: leading
    children: []
  - id: parameters-justify
    name: justify
    children: []
  - id: parameters-linebreaks
    name: linebreaks
    children: []
  - id: parameters-first-line-indent
    name: first-line-indent
    children: []
  - id: parameters-hanging-indent
    name: hanging-indent
    children: []
  - id: parameters-body
    name: body
    children: []
body:
  kind: func
  content:
    path: []
    name: par
    title: Paragraph
    keywords: []
    oneliner: Arranges text, spacing and inline-level elements into a paragraph.
    element: true
    details: |-
      <p>Arranges text, spacing and inline-level elements into a paragraph.</p>
      <p>Although this function is primarily used in set rules to affect paragraph
      properties, it can also be used to explicitly render its argument onto a
      paragraph of its own.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-func">par</span><span class="typ-punct">:</span> <span class="typ-key">set</span> <span class="typ-func">block</span><span class="typ-punct">(</span>spacing<span class="typ-punct">:</span> <span class="typ-num">0.65em</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">par</span><span class="typ-punct">(</span>
        first-line-indent<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span>
        justify<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>

      We proceed by contradiction.
      Suppose that there exists a set
      of positive integers <span class="typ-math-delim">$</span>a<span class="typ-math-delim">$</span>, <span class="typ-math-delim">$</span>b<span class="typ-math-delim">$</span>, and
      <span class="typ-math-delim">$</span>c<span class="typ-math-delim">$</span> that satisfies the equation
      <span class="typ-math-delim">$</span>a<span class="typ-math-op">^</span>n + b<span class="typ-math-op">^</span>n = c<span class="typ-math-op">^</span>n<span class="typ-math-delim">$</span> for some
      integer value of <span class="typ-math-delim">$</span>n &gt; 2<span class="typ-math-delim">$</span>.

      Without loss of generality,
      let <span class="typ-math-delim">$</span>a<span class="typ-math-delim">$</span> be the smallest of the
      three integers. Then, we <span class="typ-escape">...</span>
      </code></pre><div class="preview"><img src="/assets/docs/4ad0c7e875ca044b839c4c85e8b6cb15.png" alt="Preview" width="480" height="190"/></div></div>
    example: null
    self: false
    params:
    - name: leading
      details: <p>The spacing between lines.</p>
      example: null
      types:
      - length
      strings: []
      default: <code><span class="typ-num">0.65em</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: justify
      details: |-
        <p>Whether to justify text in its line.</p>
        <p>Hyphenation will be enabled for justified paragraphs if the
        <a href="/docs/reference/text/text/#parameters-hyphenate">text function's <code>hyphenate</code> property</a> is set to
        <code><span class="typ-key">auto</span></code> and the current language is known.</p>
        <p>Note that the current <a href="/docs/reference/layout/align/">alignment</a> still has an effect on the
        placement of the last line except if it ends with a
        <a href="/docs/reference/text/linebreak/#parameters-justify">justified line break</a>.</p>
      example: null
      types:
      - bool
      strings: []
      default: <code><span class="typ-key">false</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: linebreaks
      details: |-
        <p>How to determine line breaks.</p>
        <p>When this property is set to <code><span class="typ-key">auto</span></code>, its default value, optimized line
        breaks will be used for justified paragraphs. Enabling optimized line
        breaks for ragged paragraphs may also be worthwhile to improve the
        appearance of the text.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>width<span class="typ-punct">:</span> <span class="typ-num">207pt</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">par</span><span class="typ-punct">(</span>linebreaks<span class="typ-punct">:</span> <span class="typ-str">&quot;simple&quot;</span><span class="typ-punct">)</span>
        Some texts feature many longer
        words. Those are often exceedingly
        challenging to break in a visually
        pleasing way.

        <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">par</span><span class="typ-punct">(</span>linebreaks<span class="typ-punct">:</span> <span class="typ-str">&quot;optimized&quot;</span><span class="typ-punct">)</span>
        Some texts feature many longer
        words. Those are often exceedingly
        challenging to break in a visually
        pleasing way.
        </code></pre><div class="preview"><img src="/assets/docs/d47258d3796ed8315cbe2ad4974e1e42.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - auto
      - str
      strings:
      - string: simple
        details: <p>Determine the line breaks in a simple first-fit style.</p>
      - string: optimized
        details: |-
          <p>Optimize the line breaks for the whole paragraph.</p>
          <p>Typst will try to produce more evenly filled lines of text by
          considering the whole paragraph when calculating line breaks.</p>
      default: <code><span class="typ-key">auto</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: first-line-indent
      details: |-
        <p>The indent the first line of a paragraph should have.</p>
        <p>Only the first line of a consecutive paragraph will be indented (not
        the first one in a block or on the page).</p>
        <p>By typographic convention, paragraph breaks are indicated either by some
        space between paragraphs or by indented first lines. Consider reducing
        the <a href="/docs/reference/layout/block/#parameters-spacing">paragraph spacing</a> to the [<code>leading</code>] when
        using this property (e.g. using
        <code><span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-func">par</span><span class="typ-punct">:</span> <span class="typ-key">set</span> <span class="typ-func">block</span><span class="typ-punct">(</span>spacing<span class="typ-punct">:</span> <span class="typ-num">0.65em</span><span class="typ-punct">)</span></code>).</p>
      example: null
      types:
      - length
      strings: []
      default: <code><span class="typ-num">0pt</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: hanging-indent
      details: <p>The indent all but the first line of a paragraph should have.</p>
      example: null
      types:
      - length
      strings: []
      default: <code><span class="typ-num">0pt</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: body
      details: <p>The contents of the paragraph.</p>
      example: null
      types:
      - content
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    returns:
    - content
    scope: []
children: []
