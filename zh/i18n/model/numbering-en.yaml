route: /docs/reference/model/numbering/
title: Numbering
description: '`numbering` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-numbering
    name: numbering
    children: []
  - id: parameters-numbers
    name: numbers
    children: []
body:
  kind: func
  content:
    path: []
    name: numbering
    title: Numbering
    keywords: []
    oneliner: Applies a numbering to a sequence of numbers.
    element: false
    details: |-
      <p>Applies a numbering to a sequence of numbers.</p>
      <p>A numbering defines how a sequence of numbers should be displayed as
      content. It is defined either through a pattern string or an arbitrary
      function.</p>
      <p>A numbering pattern consists of counting symbols, for which the actual
      number is substituted, their prefixes, and one suffix. The prefixes and the
      suffix are repeated as-is.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">numbering</span><span class="typ-punct">(</span><span class="typ-str">&quot;1.1)&quot;</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">numbering</span><span class="typ-punct">(</span><span class="typ-str">&quot;1.a.i&quot;</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">numbering</span><span class="typ-punct">(</span><span class="typ-str">&quot;I – 1&quot;</span><span class="typ-punct">,</span> <span class="typ-num">12</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">numbering</span><span class="typ-punct">(</span>
        <span class="typ-punct">(</span><span class="typ-op">..</span>nums<span class="typ-punct">)</span> <span class="typ-op">=&gt;</span> nums
          <span class="typ-punct">.</span><span class="typ-func">pos</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          <span class="typ-punct">.</span><span class="typ-func">map</span><span class="typ-punct">(</span>str<span class="typ-punct">)</span>
          <span class="typ-punct">.</span><span class="typ-func">join</span><span class="typ-punct">(</span><span class="typ-str">&quot;.&quot;</span><span class="typ-punct">)</span> <span class="typ-op">+</span> <span class="typ-str">&quot;)&quot;</span><span class="typ-punct">,</span>
        <span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/c49443caf46299c5a909ea27c0c42f0c.png" alt="Preview" width="480" height="190"/></div></div>
    example: null
    self: false
    params:
    - name: numbering
      details: |-
        <p>Defines how the numbering works.</p>
        <p><strong>Counting symbols</strong> are <code>1</code>, <code>a</code>, <code>A</code>, <code>i</code>, <code>I</code>, <code>い</code>, <code>イ</code>, <code>א</code>, <code>가</code>,
        <code>ㄱ</code>, and <code>*</code>. They are replaced by the number in the sequence, in the
        given case.</p>
        <p>The <code>*</code> character means that symbols should be used to count, in the
        order of <code>*</code>, <code>†</code>, <code>‡</code>, <code>§</code>, <code>¶</code>, and <code>‖</code>. If there are more than six
        items, the number is represented using multiple symbols.</p>
        <p><strong>Suffixes</strong> are all characters after the last counting symbol. They are
        repeated as-is at the end of any rendered number.</p>
        <p><strong>Prefixes</strong> are all characters that are neither counting symbols nor
        suffixes. They are repeated as-is at in front of their rendered
        equivalent of their counting symbol.</p>
        <p>This parameter can also be an arbitrary function that gets each number
        as an individual argument. When given a function, the <code>numbering</code>
        function just forwards the arguments to that function. While this is not
        particularly useful in itself, it means that you can just give arbitrary
        numberings to the <code>numbering</code> function without caring whether they are
        defined as a pattern or function.</p>
      example: null
      types:
      - str
      - function
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    - name: numbers
      details: |-
        <p>The numbers to apply the numbering to. Must be positive.</p>
        <p>If <code>numbering</code> is a pattern and more numbers than counting symbols are
        given, the last counting symbol with its prefix is repeated.</p>
      example: null
      types:
      - int
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: true
      settable: false
    returns:
    - any
    scope: []
children: []
