route: /docs/reference/foundations/dictionary/
title: Dictionary
description: Dictionary 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-len
    name: Length
    children: []
  - id: definitions-at
    name: At
    children:
    - id: definitions-at-key
      name: key
      children: []
    - id: definitions-at-default
      name: default
      children: []
  - id: definitions-insert
    name: Insert
    children:
    - id: definitions-insert-key
      name: key
      children: []
    - id: definitions-insert-value
      name: value
      children: []
  - id: definitions-remove
    name: Remove
    children:
    - id: definitions-remove-key
      name: key
      children: []
    - id: definitions-remove-default
      name: default
      children: []
  - id: definitions-keys
    name: Keys
    children: []
  - id: definitions-values
    name: Values
    children: []
  - id: definitions-pairs
    name: Pairs
    children: []
body:
  kind: type
  content:
    name: dictionary
    title: Dictionary
    keywords: []
    oneliner: A map from string keys to values.
    details: |-
      <p>A map from string keys to values.</p>
      <p>You can construct a dictionary by enclosing comma-separated <code>key: value</code>
      pairs in parentheses. The values do not have to be of the same type. Since
      empty parentheses already yield an empty array, you have to use the special
      <code>(:)</code> syntax to create an empty dictionary.</p>
      <p>A dictionary is conceptually similar to an array, but it is indexed by
      strings instead of integers. You can access and create dictionary entries
      with the <code>.at()</code> method. If you know the key statically, you can
      alternatively use <a href="/docs/reference/scripting/#fields">field access notation</a> (<code>.key</code>) to
      access the value. Dictionaries can be added with the <code>+</code> operator and
      <a href="/docs/reference/scripting/#blocks">joined together</a>. To check whether a key is present in
      the dictionary, use the <code>in</code> keyword.</p>
      <p>You can iterate over the pairs in a dictionary using a <a href="/docs/reference/scripting/#loops">for
      loop</a>. This will iterate in the order the pairs were
      inserted / declared.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> dict <span class="typ-op">=</span> <span class="typ-punct">(</span>
        name<span class="typ-punct">:</span> <span class="typ-str">&quot;Typst&quot;</span><span class="typ-punct">,</span>
        born<span class="typ-punct">:</span> <span class="typ-num">2019</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>

      <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-pol">name</span> <span class="typ-escape">\</span>
      <span class="typ-punct">#</span><span class="typ-punct">(</span>dict<span class="typ-punct">.</span>launch <span class="typ-op">=</span> <span class="typ-num">20</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">len</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">keys</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">values</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span><span class="typ-str">&quot;born&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">insert</span><span class="typ-punct">(</span><span class="typ-str">&quot;city&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;Berlin &quot;</span><span class="typ-punct">)</span>
      <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-str">&quot;name&quot;</span> <span class="typ-key">in</span> dict<span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/fcda16a72f295b980f7162495185c606.png" alt="Preview" width="480" height="190"/></div></div>
    constructor: null
    scope:
    - path:
      - dictionary
      name: len
      title: Length
      keywords: []
      oneliner: The number of pairs in the dictionary.
      element: false
      details: <p>The number of pairs in the dictionary.</p>
      example: null
      self: true
      params: []
      returns:
      - int
      scope: []
    - path:
      - dictionary
      name: at
      title: At
      keywords: []
      oneliner: Returns the value associated with the specified key in the dictionary.
      element: false
      details: |-
        <p>Returns the value associated with the specified key in the dictionary.
        May be used on the left-hand side of an assignment if the key is already
        present in the dictionary. Returns the default value if the key is not
        part of the dictionary or fails with an error if no default value was
        specified.</p>
      example: null
      self: true
      params:
      - name: key
        details: <p>The key at which to retrieve the item.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: default
        details: <p>A default value to return if the key is not part of the dictionary.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - dictionary
      name: insert
      title: Insert
      keywords: []
      oneliner: Inserts a new pair into the dictionary and return the value. If the
      element: false
      details: |-
        <p>Inserts a new pair into the dictionary and return the value. If the
        dictionary already contains this key, the value is updated.</p>
      example: null
      self: true
      params:
      - name: key
        details: <p>The key of the pair that should be inserted.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: value
        details: <p>The value of the pair that should be inserted.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns: []
      scope: []
    - path:
      - dictionary
      name: remove
      title: Remove
      keywords: []
      oneliner: Removes a pair from the dictionary by key and return the value.
      element: false
      details: <p>Removes a pair from the dictionary by key and return the value.</p>
      example: null
      self: true
      params:
      - name: key
        details: <p>The key of the pair to remove.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: default
        details: <p>A default value to return if the key does not exist.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - dictionary
      name: keys
      title: Keys
      keywords: []
      oneliner: Returns the keys of the dictionary as an array in insertion order.
      element: false
      details: <p>Returns the keys of the dictionary as an array in insertion order.</p>
      example: null
      self: true
      params: []
      returns:
      - array
      scope: []
    - path:
      - dictionary
      name: values
      title: Values
      keywords: []
      oneliner: Returns the values of the dictionary as an array in insertion order.
      element: false
      details: <p>Returns the values of the dictionary as an array in insertion order.</p>
      example: null
      self: true
      params: []
      returns:
      - array
      scope: []
    - path:
      - dictionary
      name: pairs
      title: Pairs
      keywords: []
      oneliner: Returns the keys and values of the dictionary as an array of pairs.
        Each
      element: false
      details: |-
        <p>Returns the keys and values of the dictionary as an array of pairs. Each
        pair is represented as an array of length two.</p>
      example: null
      self: true
      params: []
      returns:
      - array
      scope: []
children: []
