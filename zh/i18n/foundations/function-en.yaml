route: /docs/reference/foundations/function/
title: Function
description: Function 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: element-functions
  name: Element Functions
  children: []
- id: function-scopes
  name: Function Scopes
  children: []
- id: defining-functions
  name: Defining Functions
  children: []
- id: unnamed
  name: Unnamed
  children: []
- id: note-on-function-purity
  name: Note On Function Purity
  children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-with
    name: With
    children:
    - id: definitions-with-arguments
      name: arguments
      children: []
  - id: definitions-where
    name: Where
    children:
    - id: definitions-where-fields
      name: fields
      children: []
body:
  kind: type
  content:
    name: function
    title: Function
    keywords: []
    oneliner: A mapping from argument values to a return value.
    details: |-
      <p>A mapping from argument values to a return value.</p>
      <p>You can call a function by writing a comma-separated list of function
      <em>arguments</em> enclosed in parentheses directly after the function name.
      Additionally, you can pass any number of trailing content blocks arguments
      to a function <em>after</em> the normal argument list. If the normal argument list
      would become empty, it can be omitted. Typst supports positional and named
      arguments. The former are identified by position and type, while the later
      are written as <code>name: value</code>.</p>
      <p>Within math mode, function calls have special behaviour. See the
      <a href="/docs/reference/math/">math documentation</a> for more details.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-comment">// Call a function.</span>
      <span class="typ-func">#</span><span class="typ-func">list</span><span class="typ-punct">(</span><span class="typ-punct">[</span>A<span class="typ-punct">]</span><span class="typ-punct">,</span> <span class="typ-punct">[</span>B<span class="typ-punct">]</span><span class="typ-punct">)</span>

      <span class="typ-comment">// Named arguments and trailing</span>
      <span class="typ-comment">// content blocks.</span>
      <span class="typ-func">#</span><span class="typ-func">enum</span><span class="typ-punct">(</span>start<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">[</span>A<span class="typ-punct">]</span><span class="typ-punct">[</span>B<span class="typ-punct">]</span>

      <span class="typ-comment">// Version without parentheses.</span>
      <span class="typ-func">#</span><span class="typ-func">list</span><span class="typ-punct">[</span>A<span class="typ-punct">]</span><span class="typ-punct">[</span>B<span class="typ-punct">]</span>
      </code></pre><div class="preview"><img src="/assets/docs/48035a38f73e09f6b4575a2737705ad3.png" alt="Preview" width="480" height="190"/></div></div>
      <p>Functions are a fundamental building block of Typst. Typst provides
      functions for a variety of typesetting tasks. Moreover, the markup you write
      is backed by functions and all styling happens through functions. This
      reference lists all available functions and how you can use them. Please
      also refer to the documentation about <a href="/docs/reference/styling/#set-rules">set</a> and
      <a href="/docs/reference/styling/#show-rules">show</a> rules to learn about additional ways you can
      work with functions in Typst.</p>
      <h2 id="element-functions">Element functions</h2>
      <p>Some functions are associated with <em>elements</em> like <a href="/docs/reference/model/heading/">headings</a> or
      <a href="/docs/reference/model/table/">tables</a>. When called, these create an element of their respective
      kind. In contrast to normal functions, they can further be used in <a href="/docs/reference/styling/#set-rules">set
      rules</a>, <a href="/docs/reference/styling/#show-rules">show rules</a>, and
      <a href="/docs/reference/foundations/selector/">selectors</a>.</p>
      <h2 id="function-scopes">Function scopes</h2>
      <p>Functions can hold related definitions in their own scope, similar to a
      <a href="/docs/reference/scripting/#modules">module</a>. Examples of this are
      <a href="/docs/reference/foundations/assert/#definitions-eq"><code>assert.eq</code></a> or <a href="/docs/reference/model/list/#definitions-item"><code>list.item</code></a>. However, this
      feature is currently only available for built-in functions.</p>
      <h2 id="defining-functions">Defining functions</h2>
      <p>You can define your own function with a <a href="/docs/reference/scripting/#bindings">let binding</a>
      that has a parameter list after the binding's name. The parameter list can
      contain mandatory positional parameters, named parameters with default
      values and <a href="/docs/reference/foundations/arguments/">argument sinks</a>.</p>
      <p>The right-hand side of a function binding is the function body, which can be
      a block or any other expression. It defines the function's return value and
      can depend on the parameters. If the function body is a <a href="/docs/reference/scripting/#blocks">code
      block</a>, the return value is the result of joining the
      values of each expression in the block.</p>
      <p>Within a function body, the <code>return</code> keyword can be used to exit early and
      optionally specify a return value. If no explicit return value is given, the
      body evaluates to the result of joining all expressions preceding the
      <code>return</code>.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">alert</span><span class="typ-punct">(</span>body<span class="typ-punct">,</span> fill<span class="typ-punct">:</span> red<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
        <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>white<span class="typ-punct">)</span>
        <span class="typ-key">set</span> <span class="typ-func">align</span><span class="typ-punct">(</span>center<span class="typ-punct">)</span>
        <span class="typ-func">rect</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> fill<span class="typ-punct">,</span>
          inset<span class="typ-punct">:</span> <span class="typ-num">8pt</span><span class="typ-punct">,</span>
          radius<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span>
          <span class="typ-punct">[</span><span class="typ-strong">*Warning:<span class="typ-escape">\</span> <span class="typ-pol">#</span><span class="typ-pol">body</span>*</span><span class="typ-punct">]</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
      <span class="typ-punct">}</span>

      <span class="typ-func">#</span><span class="typ-func">alert</span><span class="typ-punct">[</span>
        Danger is imminent!
      <span class="typ-punct">]</span>

      <span class="typ-func">#</span><span class="typ-func">alert</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> blue<span class="typ-punct">)</span><span class="typ-punct">[</span>
        KEEP OFF TRACKS
      <span class="typ-punct">]</span>
      </code></pre><div class="preview"><img src="/assets/docs/a46deb725efaf4d901b99ab85859e676.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="unnamed">Unnamed functions</h2>
      <p>You can also created an unnamed function without creating a binding by
      specifying a parameter list followed by <code>=&gt;</code> and the function body. If your
      function has just one parameter, the parentheses around the parameter list
      are optional. Unnamed functions are mainly useful for show rules, but also
      for settable properties that take functions like the page function's
      <a href="/docs/reference/layout/page/#parameters-footer"><code>footer</code></a> property.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-str">&quot;once?&quot;</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-punct">[</span><span class="typ-pol">#</span><span class="typ-pol">it</span> <span class="typ-pol">#</span><span class="typ-pol">it</span><span class="typ-punct">]</span>
      once?
      </code></pre><div class="preview"><img src="/assets/docs/40dbc27883842fabb8d1a3da53db0bfd.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="note-on-function-purity">Note on function purity</h2>
      <p>In Typst, all functions are <em>pure.</em> This means that for the same
      arguments, they always return the same result. They cannot &quot;remember&quot; things to
      produce another value when they are called a second time.</p>
      <p>The only exception are built-in methods like
      <a href="/docs/reference/foundations/array/#definitions-push"><code>array.push(value)</code></a>. These can modify the values they are
      called on.</p>
    constructor: null
    scope:
    - path:
      - function
      name: with
      title: With
      keywords: []
      oneliner: Returns a new function that has the given arguments pre-applied.
      element: false
      details: <p>Returns a new function that has the given arguments pre-applied.</p>
      example: null
      self: true
      params:
      - name: arguments
        details: <p>The arguments to apply to the function.</p>
        example: null
        types:
        - arguments
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - function
      scope: []
    - path:
      - function
      name: where
      title: Where
      keywords: []
      oneliner: Returns a selector that filters for elements belonging to this function
      element: false
      details: |-
        <p>Returns a selector that filters for elements belonging to this function
        whose fields have the values of the given arguments.</p>
      example: null
      self: true
      params:
      - name: fields
        details: <p>The fields to filter for.</p>
        example: null
        types:
        - arguments
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - selector
      scope: []
children: []
