route: /docs/reference/foundations/selector/
title: Selector
description: Selector 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-target
    name: target
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-or
    name: Or
    children:
    - id: definitions-or-others
      name: others
      children: []
  - id: definitions-and
    name: And
    children:
    - id: definitions-and-others
      name: others
      children: []
  - id: definitions-before
    name: Before
    children:
    - id: definitions-before-end
      name: end
      children: []
    - id: definitions-before-inclusive
      name: inclusive
      children: []
  - id: definitions-after
    name: After
    children:
    - id: definitions-after-start
      name: start
      children: []
    - id: definitions-after-inclusive
      name: inclusive
      children: []
body:
  kind: type
  content:
    name: selector
    title: Selector
    keywords: []
    oneliner: A filter for selecting elements within the document.
    details: |-
      <p>A filter for selecting elements within the document.</p>
      <p>You can construct a selector in the following ways:</p>
      <ul>
      <li>you can use an element <a href="/docs/reference/foundations/function/">function</a></li>
      <li>you can filter for an element function with
      <a href="/docs/reference/foundations/function/#definitions-where">specific fields</a></li>
      <li>you can use a <a href="/docs/reference/foundations/str/">string</a> or <a href="/docs/reference/foundations/regex/">regular expression</a></li>
      <li>you can use a <a href="/docs/reference/foundations/label/"><code><span class="typ-label">&lt;label&gt;</span></code></a></li>
      <li>you can use a <a href="/docs/reference/introspection/location/"><code>location</code></a></li>
      <li>call the <a href="/docs/reference/foundations/selector/"><code>selector</code></a> constructor to convert any of the above
      types into a selector value and use the methods below to refine it</li>
      </ul>
      <p>Selectors are used to <a href="/docs/reference/styling/#show-rules">apply styling rules</a> to
      elements. You can also use selectors to <a href="/docs/reference/introspection/query/">query</a> the document for
      certain types of elements.</p>
      <p>Furthermore, you can pass a selector to several of Typst's built-in
      functions to configure their behaviour. One such example is the
      <a href="/docs/reference/model/outline/">outline</a> where it can be used to change which elements are listed
      within the outline.</p>
      <p>Multiple selectors can be combined using the methods shown below. However,
      not all kinds of selectors are supported in all places, at the moment.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-func">query</span><span class="typ-punct">(</span>
        heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span>
          <span class="typ-punct">.</span><span class="typ-func">or</span><span class="typ-punct">(</span>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        loc<span class="typ-punct">,</span>
      <span class="typ-punct">)</span><span class="typ-punct">)</span>

      <span class="typ-heading">= This will be found</span>
      <span class="typ-heading">== So will this</span>
      <span class="typ-heading">=== But this will not.</span>
      </code></pre><div class="preview"><img src="/assets/docs/da862a11bd774f20c7b06214da3ffa85.png" alt="Preview" width="480" height="190"/></div></div>
    constructor:
      path: []
      name: selector
      title: Construct
      keywords: []
      oneliner: 'Turns a value into a selector. The following values are accepted:'
      element: false
      details: |-
        <p>Turns a value into a selector. The following values are accepted:</p>
        <ul>
        <li>An element function like a <code>heading</code> or <code>figure</code>.</li>
        <li>A <code><span class="typ-label">&lt;label&gt;</span></code>.</li>
        <li>A more complex selector like <code>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span></code>.</li>
        </ul>
      example: null
      self: false
      params:
      - name: target
        details: |-
          <p>Can be an element function like a <code>heading</code> or <code>figure</code>, a <code><span class="typ-label">&lt;label&gt;</span></code>
          or a more complex selector like <code>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span></code>.</p>
        example: null
        types:
        - str
        - regex
        - label
        - selector
        - location
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - selector
      scope: []
    scope:
    - path:
      - selector
      name: or
      title: Or
      keywords: []
      oneliner: Selects all elements that match this or any of the other selectors.
      element: false
      details: <p>Selects all elements that match this or any of the other selectors.</p>
      example: null
      self: true
      params:
      - name: others
        details: <p>The other selectors to match on.</p>
        example: null
        types:
        - label
        - selector
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - selector
      scope: []
    - path:
      - selector
      name: and
      title: And
      keywords: []
      oneliner: Selects all elements that match this and all of the the other selectors.
      element: false
      details: <p>Selects all elements that match this and all of the the other selectors.</p>
      example: null
      self: true
      params:
      - name: others
        details: <p>The other selectors to match on.</p>
        example: null
        types:
        - label
        - selector
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - selector
      scope: []
    - path:
      - selector
      name: before
      title: Before
      keywords: []
      oneliner: Returns a modified selector that will only match elements that occur
      element: false
      details: |-
        <p>Returns a modified selector that will only match elements that occur
        before the first match of <code>end</code>.</p>
      example: null
      self: true
      params:
      - name: end
        details: <p>The original selection will end at the first match of <code>end</code>.</p>
        example: null
        types:
        - label
        - selector
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: inclusive
        details: |-
          <p>Whether <code>end</code> itself should match or not. This is only relevant if
          both selectors match the same type of element. Defaults to <code><span class="typ-key">true</span></code>.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - selector
      scope: []
    - path:
      - selector
      name: after
      title: After
      keywords: []
      oneliner: Returns a modified selector that will only match elements that occur
      element: false
      details: |-
        <p>Returns a modified selector that will only match elements that occur
        after the first match of <code>start</code>.</p>
      example: null
      self: true
      params:
      - name: start
        details: <p>The original selection will start at the first match of <code>start</code>.</p>
        example: null
        types:
        - label
        - selector
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: inclusive
        details: |-
          <p>Whether <code>start</code> itself should match or not. This is only relevant
          if both selectors match the same type of element. Defaults to
          <code><span class="typ-key">true</span></code>.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - selector
      scope: []
children: []
