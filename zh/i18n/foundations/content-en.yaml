route: /docs/reference/foundations/content/
title: Content
description: Content 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: representation
  name: Representation
  children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-func
    name: Func
    children: []
  - id: definitions-has
    name: Has
    children:
    - id: definitions-has-field
      name: field
      children: []
  - id: definitions-at
    name: At
    children:
    - id: definitions-at-field
      name: field
      children: []
    - id: definitions-at-default
      name: default
      children: []
  - id: definitions-fields
    name: Fields
    children: []
  - id: definitions-location
    name: Location
    children: []
body:
  kind: type
  content:
    name: content
    title: Content
    keywords: []
    oneliner: A piece of document content.
    details: |-
      <p>A piece of document content.</p>
      <p>This type is at the heart of Typst. All markup you write and most
      <a href="/docs/reference/foundations/function/">functions</a> you call produce content values. You can create a
      content value by enclosing markup in square brackets. This is also how you
      pass content to functions.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code>Type of <span class="typ-strong">*Hello!*</span> is
      <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-punct">[</span><span class="typ-strong">*Hello!*</span><span class="typ-punct">]</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/64eaae4e748f023f862d67eefe92c962.png" alt="Preview" width="480" height="190"/></div></div>
      <p>Content can be added with the <code>+</code> operator,
      <a href="/docs/reference/scripting/#blocks">joined together</a> and multiplied with integers. Wherever
      content is expected, you can also pass a <a href="/docs/reference/foundations/str/">string</a> or <code><span class="typ-key">none</span></code>.</p>
      <h2 id="representation">Representation</h2>
      <p>Content consists of elements with fields. When constructing an element with
      its <em>element function,</em> you provide these fields as arguments and when you
      have a content value, you can access its fields with <a href="/docs/reference/scripting/#field-access">field access
      syntax</a>.</p>
      <p>Some fields are required: These must be provided when constructing an
      element and as a consequence, they are always available through field access
      on content of that type. Required fields are marked as such in the
      documentation.</p>
      <p>Most fields are optional: Like required fields, they can be passed to the
      element function to configure them for a single element. However, these can
      also be configured with <a href="/docs/reference/styling/#set-rules">set rules</a> to apply them to
      all elements within a scope. Optional fields are only available with field
      access syntax when they were explicitly passed to the element function, not
      when they result from a set rule.</p>
      <p>Each element has a default appearance. However, you can also completely
      customize its appearance with a <a href="/docs/reference/styling/#show-rules">show rule</a>. The show
      rule is passed the element. It can access the element's field and produce
      arbitrary content from it.</p>
      <p>In the web app, you can hover over a content variable to see exactly which
      elements the content is composed of and what fields they have.
      Alternatively, you can inspect the output of the <a href="/docs/reference/foundations/repr/"><code>repr</code></a> function.</p>
    constructor: null
    scope:
    - path:
      - content
      name: func
      title: Func
      keywords: []
      oneliner: The content's element function. This function can be used to create
        the element
      element: false
      details: |-
        <p>The content's element function. This function can be used to create the element
        contained in this content. It can be used in set and show rules for the
        element. Can be compared with global functions to check whether you have
        a specific
        kind of element.</p>
      example: null
      self: true
      params: []
      returns:
      - function
      scope: []
    - path:
      - content
      name: has
      title: Has
      keywords: []
      oneliner: Whether the content has the specified field.
      element: false
      details: <p>Whether the content has the specified field.</p>
      example: null
      self: true
      params:
      - name: field
        details: <p>The field to look for.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - bool
      scope: []
    - path:
      - content
      name: at
      title: At
      keywords: []
      oneliner: Access the specified field on the content. Returns the default value
        if
      element: false
      details: |-
        <p>Access the specified field on the content. Returns the default value if
        the field does not exist or fails with an error if no default value was
        specified.</p>
      example: null
      self: true
      params:
      - name: field
        details: <p>The field to access.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: default
        details: <p>A default value to return if the field does not exist.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - content
      name: fields
      title: Fields
      keywords: []
      oneliner: Returns the fields of this content.
      element: false
      details: <p>Returns the fields of this content.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>
          width<span class="typ-punct">:</span> <span class="typ-num">10cm</span><span class="typ-punct">,</span>
          height<span class="typ-punct">:</span> <span class="typ-num">10cm</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">fields</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/2fcad849f627fe8fa71093228440cda3.png" alt="Preview" width="480" height="190"/></div></div>
      self: true
      params: []
      returns:
      - dictionary
      scope: []
    - path:
      - content
      name: location
      title: Location
      keywords: []
      oneliner: The location of the content. This is only available on content returned
      element: false
      details: |-
        <p>The location of the content. This is only available on content returned
        by <a href="/docs/reference/introspection/query/">query</a> or provided by a
        <a href="/docs/reference/styling/#show-rules">show rule</a>, for other content it will
        be <code><span class="typ-key">none</span></code>. The resulting location can be used with
        <a href="/docs/reference/introspection/counter/">counters</a>, <a href="/docs/reference/introspection/state/">state</a> and <a href="/docs/reference/introspection/query/">queries</a>.</p>
      example: null
      self: true
      params: []
      returns:
      - none
      - location
      scope: []
children: []
