route: /docs/reference/foundations/str/
title: String
description: String 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: escapes
  name: Escapes
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-value
    name: value
    children: []
  - id: constructor-base
    name: base
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-len
    name: Length
    children: []
  - id: definitions-first
    name: First
    children: []
  - id: definitions-last
    name: Last
    children: []
  - id: definitions-at
    name: At
    children:
    - id: definitions-at-index
      name: index
      children: []
    - id: definitions-at-default
      name: default
      children: []
  - id: definitions-slice
    name: Slice
    children:
    - id: definitions-slice-start
      name: start
      children: []
    - id: definitions-slice-end
      name: end
      children: []
    - id: definitions-slice-count
      name: count
      children: []
  - id: definitions-clusters
    name: Clusters
    children: []
  - id: definitions-codepoints
    name: Codepoints
    children: []
  - id: definitions-to-unicode
    name: To Unicode
    children:
    - id: definitions-to-unicode-character
      name: character
      children: []
  - id: definitions-from-unicode
    name: From Unicode
    children:
    - id: definitions-from-unicode-value
      name: value
      children: []
  - id: definitions-contains
    name: Contains
    children:
    - id: definitions-contains-pattern
      name: pattern
      children: []
  - id: definitions-starts-with
    name: Starts With
    children:
    - id: definitions-starts-with-pattern
      name: pattern
      children: []
  - id: definitions-ends-with
    name: Ends With
    children:
    - id: definitions-ends-with-pattern
      name: pattern
      children: []
  - id: definitions-find
    name: Find
    children:
    - id: definitions-find-pattern
      name: pattern
      children: []
  - id: definitions-position
    name: Position
    children:
    - id: definitions-position-pattern
      name: pattern
      children: []
  - id: definitions-match
    name: Match
    children:
    - id: definitions-match-pattern
      name: pattern
      children: []
  - id: definitions-matches
    name: Matches
    children:
    - id: definitions-matches-pattern
      name: pattern
      children: []
  - id: definitions-replace
    name: Replace
    children:
    - id: definitions-replace-pattern
      name: pattern
      children: []
    - id: definitions-replace-replacement
      name: replacement
      children: []
    - id: definitions-replace-count
      name: count
      children: []
  - id: definitions-trim
    name: Trim
    children:
    - id: definitions-trim-pattern
      name: pattern
      children: []
    - id: definitions-trim-at
      name: at
      children: []
    - id: definitions-trim-repeat
      name: repeat
      children: []
  - id: definitions-split
    name: Split
    children:
    - id: definitions-split-pattern
      name: pattern
      children: []
  - id: definitions-rev
    name: Reverse
    children: []
body:
  kind: type
  content:
    name: str
    title: String
    keywords: []
    oneliner: A sequence of Unicode codepoints.
    details: |-
      <p>A sequence of Unicode codepoints.</p>
      <p>You can iterate over the grapheme clusters of the string using a <a href="/docs/reference/scripting/#loops">for
      loop</a>. Grapheme clusters are basically characters but
      keep together things that belong together, e.g. multiple codepoints that
      together form a flag emoji. Strings can be added with the <code>+</code> operator,
      <a href="/docs/reference/scripting/#blocks">joined together</a> and multiplied with integers.</p>
      <p>Typst provides utility methods for string manipulation. Many of these
      methods (e.g., <code>split</code>, <code>trim</code> and <code>replace</code>) operate on <em>patterns:</em> A
      pattern can be either a string or a <a href="/docs/reference/foundations/regex/">regular expression</a>. This makes
      the methods quite versatile.</p>
      <p>All lengths and indices are expressed in terms of UTF-8 bytes. Indices are
      zero-based and negative indices wrap around to the end of the string.</p>
      <p>You can convert a value to a string with this type's constructor.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-str">#</span><span class="typ-str">&quot;hello world!&quot;</span> <span class="typ-escape">\</span>
      <span class="typ-str">#</span><span class="typ-str">&quot;\&quot;hello\n  world\&quot;!&quot;</span> <span class="typ-escape">\</span>
      <span class="typ-str">#</span><span class="typ-str">&quot;1 2 3&quot;</span><span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-str">#</span><span class="typ-str">&quot;1,2;3&quot;</span><span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;[,;]&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;\d+&quot;</span><span class="typ-punct">)</span> <span class="typ-key">in</span> <span class="typ-str">&quot;ten euros&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;\d+&quot;</span><span class="typ-punct">)</span> <span class="typ-key">in</span> <span class="typ-str">&quot;10 euros&quot;</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/fe8f72d72ed461728703a63c2ea85397.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="escapes">Escape sequences</h2>
      <p>Just like in markup, you can escape a few symbols in strings:</p>
      <ul>
      <li><code><span class="typ-escape">\\</span></code> for a backslash</li>
      <li><code><span class="typ-escape">\&quot;</span></code> for a quote</li>
      <li><code><span class="typ-escape">\n</span></code> for a newline</li>
      <li><code><span class="typ-escape">\r</span></code> for a carriage return</li>
      <li><code><span class="typ-escape">\t</span></code> for a tab</li>
      <li><code><span class="typ-escape">\u{1f600}</span></code> for a hexadecimal Unicode escape sequence</li>
      </ul>
    constructor:
      path: []
      name: str
      title: Construct
      keywords: []
      oneliner: Converts a value to a string.
      element: false
      details: |-
        <p>Converts a value to a string.</p>
        <ul>
        <li>Integers are formatted in base 10. This can be overridden with the
        optional <code>base</code> parameter.</li>
        <li>Floats are formatted in base 10 and never in exponential notation.</li>
        <li>From labels the name is extracted.</li>
        <li>Bytes are decoded as UTF-8.</li>
        </ul>
        <p>If you wish to convert from and to Unicode code points, see the
        <a href="/docs/reference/foundations/str/#definitions-to-unicode"><code>to-unicode</code></a> and <a href="/docs/reference/foundations/str/#definitions-from-unicode"><code>from-unicode</code></a>
        functions.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">4000</span><span class="typ-punct">,</span> base<span class="typ-punct">:</span> <span class="typ-num">16</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">2.7</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">1e8</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-label">&lt;intro&gt;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/71784fd087e991ed4bd08ca4161a444a.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The value that should be converted to a string.</p>
        example: null
        types:
        - int
        - float
        - str
        - bytes
        - label
        - version
        - type
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: base
        details: <p>The base (radix) to display integers in, between 2 and 36.</p>
        example: null
        types:
        - int
        strings: []
        default: <code><span class="typ-num">10</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - str
      scope: []
    scope:
    - path:
      - str
      name: len
      title: Length
      keywords: []
      oneliner: The length of the string in UTF-8 encoded bytes.
      element: false
      details: <p>The length of the string in UTF-8 encoded bytes.</p>
      example: null
      self: true
      params: []
      returns:
      - int
      scope: []
    - path:
      - str
      name: first
      title: First
      keywords: []
      oneliner: Extracts the first grapheme cluster of the string.
      element: false
      details: |-
        <p>Extracts the first grapheme cluster of the string.
        Fails with an error if the string is empty.</p>
      example: null
      self: true
      params: []
      returns:
      - str
      scope: []
    - path:
      - str
      name: last
      title: Last
      keywords: []
      oneliner: Extracts the last grapheme cluster of the string.
      element: false
      details: |-
        <p>Extracts the last grapheme cluster of the string.
        Fails with an error if the string is empty.</p>
      example: null
      self: true
      params: []
      returns:
      - str
      scope: []
    - path:
      - str
      name: at
      title: At
      keywords: []
      oneliner: Extracts the first grapheme cluster after the specified index. Returns
      element: false
      details: |-
        <p>Extracts the first grapheme cluster after the specified index. Returns
        the default value if the index is out of bounds or fails with an error
        if no default value was specified.</p>
      example: null
      self: true
      params:
      - name: index
        details: <p>The byte index. If negative, indexes from the back.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: default
        details: <p>A default value to return if the index is out of bounds.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - str
      name: slice
      title: Slice
      keywords: []
      oneliner: Extracts a substring of the string.
      element: false
      details: |-
        <p>Extracts a substring of the string.
        Fails with an error if the start or end index is out of bounds.</p>
      example: null
      self: true
      params:
      - name: start
        details: |-
          <p>The start byte index (inclusive). If negative, indexes from the
          back.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: end
        details: |-
          <p>The end byte index (exclusive). If omitted, the whole slice until
          the end of the string is extracted. If negative, indexes from the
          back.</p>
        example: null
        types:
        - none
        - int
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      - name: count
        details: |-
          <p>The number of bytes to extract. This is equivalent to passing
          <code>start + count</code> as the <code>end</code> position. Mutually exclusive with <code>end</code>.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - str
      scope: []
    - path:
      - str
      name: clusters
      title: Clusters
      keywords: []
      oneliner: Returns the grapheme clusters of the string as an array of substrings.
      element: false
      details: <p>Returns the grapheme clusters of the string as an array of substrings.</p>
      example: null
      self: true
      params: []
      returns:
      - array
      scope: []
    - path:
      - str
      name: codepoints
      title: Codepoints
      keywords: []
      oneliner: Returns the Unicode codepoints of the string as an array of substrings.
      element: false
      details: <p>Returns the Unicode codepoints of the string as an array of substrings.</p>
      example: null
      self: true
      params: []
      returns:
      - array
      scope: []
    - path:
      - str
      name: to-unicode
      title: To Unicode
      keywords: []
      oneliner: Converts a character into its corresponding code point.
      element: false
      details: <p>Converts a character into its corresponding code point.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-str">#</span><span class="typ-str">&quot;a&quot;</span><span class="typ-punct">.</span><span class="typ-func">to-unicode</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-str">&quot;a\u{0300}&quot;</span>
           <span class="typ-punct">.</span><span class="typ-func">codepoints</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
           <span class="typ-punct">.</span><span class="typ-func">map</span><span class="typ-punct">(</span>str<span class="typ-punct">.</span>to-unicode<span class="typ-punct">)</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/ed02b88f26d6c1c42a27d310a9c25f90.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: character
        details: <p>The character that should be converted.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - str
      name: from-unicode
      title: From Unicode
      keywords: []
      oneliner: Converts a unicode code point into its corresponding string.
      element: false
      details: <p>Converts a unicode code point into its corresponding string.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">str</span><span class="typ-punct">.</span><span class="typ-func">from-unicode</span><span class="typ-punct">(</span><span class="typ-num">97</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e6b3b512395c30de853382f7a0c680ad.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The code point that should be converted.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - str
      scope: []
    - path:
      - str
      name: contains
      title: Contains
      keywords: []
      oneliner: Whether the string contains the specified pattern.
      element: false
      details: |-
        <p>Whether the string contains the specified pattern.</p>
        <p>This method also has dedicated syntax: You can write <code><span class="typ-str">&quot;bc&quot;</span> <span class="typ-key">in</span> <span class="typ-str">&quot;abcd&quot;</span></code>
        instead of <code><span class="typ-str">&quot;abcd&quot;</span><span class="typ-punct">.</span><span class="typ-func">contains</span><span class="typ-punct">(</span><span class="typ-str">&quot;bc&quot;</span><span class="typ-punct">)</span></code>.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to search for.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - bool
      scope: []
    - path:
      - str
      name: starts-with
      title: Starts With
      keywords: []
      oneliner: Whether the string starts with the specified pattern.
      element: false
      details: <p>Whether the string starts with the specified pattern.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern the string might start with.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - bool
      scope: []
    - path:
      - str
      name: ends-with
      title: Ends With
      keywords: []
      oneliner: Whether the string ends with the specified pattern.
      element: false
      details: <p>Whether the string ends with the specified pattern.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern the string might end with.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - bool
      scope: []
    - path:
      - str
      name: find
      title: Find
      keywords: []
      oneliner: Searches for the specified pattern in the string and returns the first
      element: false
      details: |-
        <p>Searches for the specified pattern in the string and returns the first
        match as a string or <code><span class="typ-key">none</span></code> if there is no match.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to search for.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - none
      - str
      scope: []
    - path:
      - str
      name: position
      title: Position
      keywords: []
      oneliner: Searches for the specified pattern in the string and returns the index
      element: false
      details: |-
        <p>Searches for the specified pattern in the string and returns the index
        of the first match as an integer or <code><span class="typ-key">none</span></code> if there is no match.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to search for.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - none
      - int
      scope: []
    - path:
      - str
      name: match
      title: Match
      keywords: []
      oneliner: Searches for the specified pattern in the string and returns a
      element: false
      details: |-
        <p>Searches for the specified pattern in the string and returns a
        dictionary with details about the first match or <code><span class="typ-key">none</span></code> if there is no
        match.</p>
        <p>The returned dictionary has the following keys:</p>
        <ul>
        <li><code>start</code>: The start offset of the match</li>
        <li><code>end</code>: The end offset of the match</li>
        <li><code>text</code>: The text that matched.</li>
        <li><code>captures</code>: An array containing a string for each matched capturing
        group. The first item of the array contains the first matched
        capturing, not the whole match! This is empty unless the <code>pattern</code> was
        a regex with capturing groups.</li>
        </ul>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to search for.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - none
      - dictionary
      scope: []
    - path:
      - str
      name: matches
      title: Matches
      keywords: []
      oneliner: Searches for the specified pattern in the string and returns an array
        of
      element: false
      details: |-
        <p>Searches for the specified pattern in the string and returns an array of
        dictionaries with details about all matches. For details about the
        returned dictionaries, see above.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to search for.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - array
      scope: []
    - path:
      - str
      name: replace
      title: Replace
      keywords: []
      oneliner: Replace at most `count` occurrences of the given pattern with a
      element: false
      details: |-
        <p>Replace at most <code>count</code> occurrences of the given pattern with a
        replacement string or function (beginning from the start). If no count
        is given, all occurrences are replaced.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to search for.</p>
        example: null
        types:
        - str
        - regex
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: replacement
        details: |-
          <p>The string to replace the matches with or a function that gets a
          dictionary for each match and can return individual replacement
          strings.</p>
        example: null
        types:
        - str
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: count
        details: <p>If given, only the first <code>count</code> matches of the pattern
          are placed.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - str
      scope: []
    - path:
      - str
      name: trim
      title: Trim
      keywords: []
      oneliner: Removes matches of a pattern from one or both sides of the string,
        once or
      element: false
      details: |-
        <p>Removes matches of a pattern from one or both sides of the string, once or
        repeatedly and returns the resulting string.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to search for.</p>
        example: null
        types:
        - none
        - str
        - regex
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      - name: at
        details: |-
          <p>Can be <code>start</code> or <code>end</code> to only trim the start or end of the string.
          If omitted, both sides are trimmed.</p>
        example: null
        types:
        - alignment
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      - name: repeat
        details: |-
          <p>Whether to repeatedly removes matches of the pattern or just once.
          Defaults to <code><span class="typ-key">true</span></code>.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - str
      scope: []
    - path:
      - str
      name: split
      title: Split
      keywords: []
      oneliner: Splits a string at matches of a specified pattern and returns an array
      element: false
      details: |-
        <p>Splits a string at matches of a specified pattern and returns an array
        of the resulting parts.</p>
      example: null
      self: true
      params:
      - name: pattern
        details: <p>The pattern to split at. Defaults to whitespace.</p>
        example: null
        types:
        - none
        - str
        - regex
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      returns:
      - array
      scope: []
    - path:
      - str
      name: rev
      title: Reverse
      keywords: []
      oneliner: Reverse the string.
      element: false
      details: <p>Reverse the string.</p>
      example: null
      self: true
      params: []
      returns:
      - str
      scope: []
children: []
