route: /docs/reference/foundations/arguments/
title: Arguments
description: Arguments 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: argument-sinks
  name: Argument Sinks
  children: []
- id: spreading
  name: Spreading
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-arguments
    name: arguments
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-pos
    name: Positional
    children: []
  - id: definitions-named
    name: Named
    children: []
body:
  kind: type
  content:
    name: arguments
    title: Arguments
    keywords: []
    oneliner: Captured arguments to a function.
    details: |-
      <p>Captured arguments to a function.</p>
      <h2 id="argument-sinks">Argument Sinks</h2>
      <p>Like built-in functions, custom functions can also take a variable number of
      arguments. You can specify an <em>argument sink</em> which collects all excess
      arguments as <code>..sink</code>. The resulting <code>sink</code> value is of the <code>arguments</code>
      type. It exposes methods to access the positional and named arguments.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">format</span><span class="typ-punct">(</span>title<span class="typ-punct">,</span> <span class="typ-op">..</span>authors<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
        <span class="typ-key">let</span> by <span class="typ-op">=</span> authors
          <span class="typ-punct">.</span><span class="typ-func">pos</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          <span class="typ-punct">.</span><span class="typ-func">join</span><span class="typ-punct">(</span><span class="typ-str">&quot;, &quot;</span><span class="typ-punct">,</span> last<span class="typ-punct">:</span> <span class="typ-str">&quot; and &quot;</span><span class="typ-punct">)</span>

        <span class="typ-punct">[</span><span class="typ-strong">*<span class="typ-pol">#</span><span class="typ-pol">title</span>*</span> <span class="typ-escape">\</span> <span class="typ-emph">_Written by <span class="typ-pol">#</span><span class="typ-pol">by</span><span class="typ-punct">;</span>_</span><span class="typ-punct">]</span>
      <span class="typ-punct">}</span>

      <span class="typ-func">#</span><span class="typ-func">format</span><span class="typ-punct">(</span><span class="typ-str">&quot;ArtosFlow&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;Jane&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;Joe&quot;</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/439f59288610245855bf05800b913d4d.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="spreading">Spreading</h2>
      <p>Inversely to an argument sink, you can <em>spread</em> arguments, arrays and
      dictionaries into a function call with the <code>..spread</code> operator:</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> array <span class="typ-op">=</span> <span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">min</span><span class="typ-punct">(</span><span class="typ-op">..</span>array<span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> dict <span class="typ-op">=</span> <span class="typ-punct">(</span>fill<span class="typ-punct">:</span> blue<span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span><span class="typ-op">..</span>dict<span class="typ-punct">)</span><span class="typ-punct">[</span>Hello<span class="typ-punct">]</span>
      </code></pre><div class="preview"><img src="/assets/docs/04f0620d5da19f1f5c378ee48fd9fd5f.png" alt="Preview" width="480" height="190"/></div></div>
    constructor:
      path: []
      name: arguments
      title: Construct
      keywords: []
      oneliner: Construct spreadable arguments in place.
      element: false
      details: |-
        <p>Construct spreadable arguments in place.</p>
        <p>This function behaves like <code><span class="typ-key">let</span> <span class="typ-func">args</span><span class="typ-punct">(</span><span class="typ-op">..</span>sink<span class="typ-punct">)</span> <span class="typ-op">=</span> sink</code>.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> args <span class="typ-op">=</span> <span class="typ-func">arguments</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> red<span class="typ-punct">,</span> inset<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span> <span class="typ-punct">[</span>Body<span class="typ-punct">]</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">box</span><span class="typ-punct">(</span><span class="typ-op">..</span>args<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/64584ee646570236de6d9dd7c3a9a51c.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: arguments
        details: <p>The arguments to construct.</p>
        example: null
        types:
        - arguments
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - arguments
      scope: []
    scope:
    - path:
      - arguments
      name: pos
      title: Positional
      keywords: []
      oneliner: Returns the captured positional arguments as an array.
      element: false
      details: <p>Returns the captured positional arguments as an array.</p>
      example: null
      self: true
      params: []
      returns:
      - array
      scope: []
    - path:
      - arguments
      name: named
      title: Named
      keywords: []
      oneliner: Returns the captured named arguments as a dictionary.
      element: false
      details: <p>Returns the captured named arguments as a dictionary.</p>
      example: null
      self: true
      params: []
      returns:
      - dictionary
      scope: []
children: []
