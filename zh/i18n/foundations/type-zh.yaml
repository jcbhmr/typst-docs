route: /docs/reference/foundations/type/
title: Type
description: Type 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: compatibility
  name: Compatibility
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-value
    name: value
    children: []
body:
  kind: type
  content:
    name: type
    title: Type
    keywords: []
    oneliner: Describes a kind of value.
    details: |-
      <p>Describes a kind of value.</p>
      <p>To style your document, you need to work with values of different kinds:
      Lengths specifying the size of your elements, colors for your text and
      shapes, and more. Typst categorizes these into clearly defined <em>types</em> and
      tells you where it expects which type of value.</p>
      <p>Apart from basic types for numeric values and <a href="/docs/reference/foundations/int/">typical</a>
      <a href="/docs/reference/foundations/float/">types</a> <a href="/docs/reference/foundations/str/">known</a> <a href="/docs/reference/foundations/array/">from</a> <a href="/docs/reference/foundations/dictionary/">programming</a>
      languages, Typst provides a special type for <a href="/docs/reference/foundations/content/"><em>content.</em></a> A value
      of this type can hold anything that you can enter into your document: Text,
      elements like headings and shapes, and style information.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> x <span class="typ-op">=</span> <span class="typ-num">10</span>
      <span class="typ-key">#</span><span class="typ-key">if</span> <span class="typ-func">type</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span> <span class="typ-op">==</span> int <span class="typ-punct">[</span>
        <span class="typ-pol">#</span><span class="typ-pol">x</span> is an integer!
      <span class="typ-punct">]</span> <span class="typ-key">else</span> <span class="typ-punct">[</span>
        <span class="typ-pol">#</span><span class="typ-pol">x</span> is another value<span class="typ-escape">...</span>
      <span class="typ-punct">]</span>

      An image is of type
      <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-func">image</span><span class="typ-punct">(</span><span class="typ-str">&quot;glacier.jpg&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>.
      </code></pre><div class="preview"><img src="/assets/docs/0ba7a1a71078943ca61975979b9abd02.png" alt="Preview" width="480" height="190"/></div></div>
      <p>The type of <code>10</code> is <code>int</code>. Now, what is the type of <code>int</code> or even <code>type</code>?</p>
      <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>int<span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>type<span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/88d8a7cb06ad3fde425cdadfb686d1d2.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="compatibility">Compatibility</h2>
      <p>In Typst 0.7 and lower, the <code>type</code> function returned a string instead of a
      type. Compatibility with the old way will remain for a while to give package
      authors time to upgrade, but it will be removed at some point.</p>
      <ul>
      <li>Checks like <code>int <span class="typ-op">==</span> <span class="typ-str">&quot;integer&quot;</span></code> evaluate to <code><span class="typ-key">true</span></code></li>
      <li>Adding/joining a type and string will yield a string</li>
      <li>The <code><span class="typ-key">in</span></code> operator on a type and a dictionary will evaluate to <code><span class="typ-key">true</span></code>
      if the dictionary has a string key matching the type's name</li>
      </ul>
    constructor:
      path: []
      name: type
      title: Construct
      keywords: []
      oneliner: Determines a value's type.
      element: false
      details: <p>Determines a value's type.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-num">12</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-num">14.7</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-str">&quot;hello&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-label">&lt;glacier&gt;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-punct">[</span>Hi<span class="typ-punct">]</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>x <span class="typ-op">=&gt;</span> x <span class="typ-op">+</span> <span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>type<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/88c574347f8e7e1205fedc4185307745.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The value whose type's to determine.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - type
      scope: []
    scope: []
children: []
