route: /docs/reference/foundations/plugin/
title: Plugin
description: Plugin 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: plugins-and-packages
  name: Plugins And Packages
  children: []
- id: purity
  name: Purity
  children: []
- id: example
  name: Example
  children: []
- id: protocol
  name: Protocol
  children:
  - id: exports
    name: Exports
    children: []
  - id: imports
    name: Imports
    children: []
- id: resources
  name: Resources
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-path
    name: path
    children: []
body:
  kind: type
  content:
    name: plugin
    title: Plugin
    keywords: []
    oneliner: A WebAssembly plugin.
    details: |-
      <p>A WebAssembly plugin.</p>
      <p>Typst is capable of interfacing with plugins compiled to WebAssembly. Plugin
      functions may accept multiple <a href="/docs/reference/foundations/bytes/">byte buffers</a> as arguments and return
      a single byte buffer. They should typically be wrapped in idiomatic Typst
      functions that perform the necessary conversions between native Typst types
      and bytes.</p>
      <p>Plugins run in isolation from your system, which means that printing,
      reading files, or anything like that will not be supported for security
      reasons. To run as a plugin, a program needs to be compiled to a 32-bit
      shared WebAssembly library. Many compilers will use the
      <a href="https://wasi.dev/">WASI ABI</a> by default or as their only option (e.g.
      emscripten), which allows printing, reading files, etc. This ABI will not
      directly work with Typst. You will either need to compile to a different
      target or <a href="https://github.com/astrale-sharp/wasm-minimal-protocol/blob/master/wasi-stub">stub all functions</a>.</p>
      <h2 id="plugins-and-packages">Plugins and Packages</h2>
      <p>Plugins are distributed as packages. A package can make use of a plugin
      simply by including a WebAssembly file and loading it. Because the
      byte-based plugin interface is quite low-level, plugins are typically
      exposed through wrapper functions, that also live in the same package.</p>
      <h2 id="purity">Purity</h2>
      <p>Plugin functions must be pure: Given the same arguments, they must always
      return the same value. The reason for this is that Typst functions must be
      pure (which is quite fundamental to the language design) and, since Typst
      function can call plugin functions, this requirement is inherited. In
      particular, if a plugin function is called twice with the same arguments,
      Typst might cache the results and call your function only once.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> myplugin <span class="typ-op">=</span> <span class="typ-func">plugin</span><span class="typ-punct">(</span><span class="typ-str">&quot;hello.wasm&quot;</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">concat</span><span class="typ-punct">(</span>a<span class="typ-punct">,</span> b<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">str</span><span class="typ-punct">(</span>
        myplugin<span class="typ-punct">.</span><span class="typ-func">concatenate</span><span class="typ-punct">(</span>
          <span class="typ-func">bytes</span><span class="typ-punct">(</span>a<span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">bytes</span><span class="typ-punct">(</span>b<span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
      <span class="typ-punct">)</span>

      <span class="typ-func">#</span><span class="typ-func">concat</span><span class="typ-punct">(</span><span class="typ-str">&quot;hello&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;world&quot;</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/adb0cb4385a108f0fa953ac5ab68fc90.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="protocol">Protocol</h2>
      <p>To be used as a plugin, a WebAssembly module must conform to the following
      protocol:</p>
      <h3 id="exports">Exports</h3>
      <p>A plugin module can export functions to make them callable from Typst. To
      conform to the protocol, an exported function should:</p>
      <ul>
      <li>
      <p>Take <code>n</code> 32-bit integer arguments <code>a_1</code>, <code>a_2</code>, ..., <code>a_n</code> (interpreted as
      lengths, so <code>usize/size_t</code> may be preferable), and return one 32-bit
      integer.</p>
      </li>
      <li>
      <p>The function should first allocate a buffer <code>buf</code> of length
      <code>a_1 + a_2 + ... + a_n</code>, and then call
      <code>wasm_minimal_protocol_write_args_to_buffer(buf.ptr)</code>.</p>
      </li>
      <li>
      <p>The <code>a_1</code> first bytes of the buffer now constitute the first argument, the
      <code>a_2</code> next bytes the second argument, and so on.</p>
      </li>
      <li>
      <p>The function can now do its job with the arguments and produce an output
      buffer. Before returning, it should call
      <code>wasm_minimal_protocol_send_result_to_host</code> to send its result back to the
      host.</p>
      </li>
      <li>
      <p>To signal success, the function should return <code>0</code>.</p>
      </li>
      <li>
      <p>To signal an error, the function should return <code>1</code>. The written buffer is
      then interpreted as an UTF-8 encoded error message.</p>
      </li>
      </ul>
      <h3 id="imports">Imports</h3>
      <p>Plugin modules need to import two functions that are provided by the runtime.
      (Types and functions are described using WAT syntax.)</p>
      <ul>
      <li>
      <p><code>(import &quot;typst_env&quot; &quot;wasm_minimal_protocol_write_args_to_buffer&quot; (func (param i32)))</code></p>
      <p>Writes the arguments for the current function into a plugin-allocated
      buffer. When a plugin function is called, it
      <a href="#exports">receives the lengths</a> of its input buffers as arguments. It
      should then allocate a buffer whose capacity is at least the sum of these
      lengths. It should then call this function with a <code>ptr</code> to the buffer to
      fill it with the arguments, one after another.</p>
      </li>
      <li>
      <p><code>(import &quot;typst_env&quot; &quot;wasm_minimal_protocol_send_result_to_host&quot; (func (param i32 i32)))</code></p>
      <p>Sends the output of the current function to the host (Typst). The first
      parameter shall be a pointer to a buffer (<code>ptr</code>), while the second is the
      length of that buffer (<code>len</code>). The memory pointed at by <code>ptr</code> can be freed
      immediately after this function returns. If the message should be
      interpreted as an error message, it should be encoded as UTF-8.</p>
      </li>
      </ul>
      <h2 id="resources">Resources</h2>
      <p>For more resources, check out the
      <a href="https://github.com/astrale-sharp/wasm-minimal-protocol">wasm-minimal-protocol repository</a>.
      It contains:</p>
      <ul>
      <li>A list of example plugin implementations and a test runner for these
      examples</li>
      <li>Wrappers to help you write your plugin in Rust (Zig wrapper in
      development)</li>
      <li>A stubber for WASI</li>
      </ul>
    constructor:
      path: []
      name: plugin
      title: Construct
      keywords: []
      oneliner: Creates a new plugin from a WebAssembly file.
      element: false
      details: <p>Creates a new plugin from a WebAssembly file.</p>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to a WebAssembly file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - plugin
      scope: []
    scope: []
children: []
