route: /docs/reference/foundations/calc
title: Calculation
description: calc 函数族的文档.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: functions
  name: Functions
  children:
  - id: functions-abs
    name: Absolute
    children:
    - id: functions-abs-value
      name: value
      children: []
  - id: functions-pow
    name: Power
    children:
    - id: functions-pow-base
      name: base
      children: []
    - id: functions-pow-exponent
      name: exponent
      children: []
  - id: functions-exp
    name: Exponential
    children:
    - id: functions-exp-exponent
      name: exponent
      children: []
  - id: functions-sqrt
    name: Square Root
    children:
    - id: functions-sqrt-value
      name: value
      children: []
  - id: functions-root
    name: Root
    children:
    - id: functions-root-radicand
      name: radicand
      children: []
    - id: functions-root-index
      name: index
      children: []
  - id: functions-sin
    name: Sine
    children:
    - id: functions-sin-angle
      name: angle
      children: []
  - id: functions-cos
    name: Cosine
    children:
    - id: functions-cos-angle
      name: angle
      children: []
  - id: functions-tan
    name: Tangent
    children:
    - id: functions-tan-angle
      name: angle
      children: []
  - id: functions-asin
    name: Arcsine
    children:
    - id: functions-asin-value
      name: value
      children: []
  - id: functions-acos
    name: Arccosine
    children:
    - id: functions-acos-value
      name: value
      children: []
  - id: functions-atan
    name: Arctangent
    children:
    - id: functions-atan-value
      name: value
      children: []
  - id: functions-atan2
    name: Four-quadrant Arctangent
    children:
    - id: functions-atan2-x
      name: x
      children: []
    - id: functions-atan2-y
      name: y
      children: []
  - id: functions-sinh
    name: Hyperbolic Sine
    children:
    - id: functions-sinh-value
      name: value
      children: []
  - id: functions-cosh
    name: Hyperbolic Cosine
    children:
    - id: functions-cosh-value
      name: value
      children: []
  - id: functions-tanh
    name: Hyperbolic Tangent
    children:
    - id: functions-tanh-value
      name: value
      children: []
  - id: functions-log
    name: Logarithm
    children:
    - id: functions-log-value
      name: value
      children: []
    - id: functions-log-base
      name: base
      children: []
  - id: functions-ln
    name: Natural Logarithm
    children:
    - id: functions-ln-value
      name: value
      children: []
  - id: functions-fact
    name: Factorial
    children:
    - id: functions-fact-number
      name: number
      children: []
  - id: functions-perm
    name: Permutation
    children:
    - id: functions-perm-base
      name: base
      children: []
    - id: functions-perm-numbers
      name: numbers
      children: []
  - id: functions-binom
    name: Binomial
    children:
    - id: functions-binom-n
      name: n
      children: []
    - id: functions-binom-k
      name: k
      children: []
  - id: functions-gcd
    name: Greatest Common Divisor
    children:
    - id: functions-gcd-a
      name: a
      children: []
    - id: functions-gcd-b
      name: b
      children: []
  - id: functions-lcm
    name: Least Common Multiple
    children:
    - id: functions-lcm-a
      name: a
      children: []
    - id: functions-lcm-b
      name: b
      children: []
  - id: functions-floor
    name: Floor
    children:
    - id: functions-floor-value
      name: value
      children: []
  - id: functions-ceil
    name: Ceil
    children:
    - id: functions-ceil-value
      name: value
      children: []
  - id: functions-trunc
    name: Truncate
    children:
    - id: functions-trunc-value
      name: value
      children: []
  - id: functions-fract
    name: Fractional
    children:
    - id: functions-fract-value
      name: value
      children: []
  - id: functions-round
    name: Round
    children:
    - id: functions-round-value
      name: value
      children: []
    - id: functions-round-digits
      name: digits
      children: []
  - id: functions-clamp
    name: Clamp
    children:
    - id: functions-clamp-value
      name: value
      children: []
    - id: functions-clamp-min
      name: min
      children: []
    - id: functions-clamp-max
      name: max
      children: []
  - id: functions-min
    name: Minimum
    children:
    - id: functions-min-values
      name: values
      children: []
  - id: functions-max
    name: Maximum
    children:
    - id: functions-max-values
      name: values
      children: []
  - id: functions-even
    name: Even
    children:
    - id: functions-even-value
      name: value
      children: []
  - id: functions-odd
    name: Odd
    children:
    - id: functions-odd-value
      name: value
      children: []
  - id: functions-rem
    name: Remainder
    children:
    - id: functions-rem-dividend
      name: dividend
      children: []
    - id: functions-rem-divisor
      name: divisor
      children: []
  - id: functions-div-euclid
    name: Euclidean Division
    children:
    - id: functions-div-euclid-dividend
      name: dividend
      children: []
    - id: functions-div-euclid-divisor
      name: divisor
      children: []
  - id: functions-rem-euclid
    name: Euclidean Remainder
    children:
    - id: functions-rem-euclid-dividend
      name: dividend
      children: []
    - id: functions-rem-euclid-divisor
      name: divisor
      children: []
  - id: functions-quo
    name: Quotient
    children:
    - id: functions-quo-dividend
      name: dividend
      children: []
    - id: functions-quo-divisor
      name: divisor
      children: []
body:
  kind: group
  content:
    name: calc
    title: Calculation
    details: |-
      <p>Module for calculations and processing of numeric values.</p>
      <p>These definitions are part of the <code>calc</code> module and not imported by default.
      In addition to the functions listed below, the <code>calc</code> module also defines
      the constants <code>pi</code>, <code>tau</code>, <code>e</code>, <code>inf</code>, and <code>nan</code>.</p>
    functions:
    - path:
      - calc
      name: abs
      title: Absolute
      keywords: []
      oneliner: Calculates the absolute value of a numeric value.
      element: false
      details: <p>Calculates the absolute value of a numeric value.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-num">5pt</span> <span class="typ-op">-</span> <span class="typ-num">2cm</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-num">2fr</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e510ee8d00f4e2c888a53ba546c26c14.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The value whose absolute value to calculate.</p>
        example: null
        types:
        - int
        - float
        - length
        - angle
        - ratio
        - fraction
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - calc
      name: pow
      title: Power
      keywords: []
      oneliner: Raises a value to some exponent.
      element: false
      details: <p>Raises a value to some exponent.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">pow</span><span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/d58c2fba1429f6271ecfa7220f6d8199.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: base
        details: <p>The base of the power.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: exponent
        details: <p>The exponent of the power.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - float
      scope: []
    - path:
      - calc
      name: exp
      title: Exponential
      keywords: []
      oneliner: Raises a value to some exponent of e.
      element: false
      details: <p>Raises a value to some exponent of e.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">exp</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/49f9c1f68f122165e1705342c87d7985.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: exponent
        details: <p>The exponent of the power.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: sqrt
      title: Square Root
      keywords: []
      oneliner: Calculates the square root of a number.
      element: false
      details: <p>Calculates the square root of a number.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sqrt</span><span class="typ-punct">(</span><span class="typ-num">16</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sqrt</span><span class="typ-punct">(</span><span class="typ-num">2.5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/5b931ca2767047a142be8cc72f87d802.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number whose square root to calculate. Must be non-negative.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: root
      title: Root
      keywords: []
      oneliner: Calculates the real nth root of a number.
      element: false
      details: |-
        <p>Calculates the real nth root of a number.</p>
        <p>If the number is negative, then n must be odd.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">root</span><span class="typ-punct">(</span><span class="typ-num">16.0</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">root</span><span class="typ-punct">(</span><span class="typ-num">27.0</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/9477308c0aacce626b93671a71fa8927.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: radicand
        details: <p>The expression to take the root of</p>
        example: null
        types:
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: index
        details: <p>Which root of the radicand to take</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: sin
      title: Sine
      keywords: []
      oneliner: Calculates the sine of an angle.
      element: false
      details: |-
        <p>Calculates the sine of an angle.</p>
        <p>When called with an integer or a float, they will be interpreted as
        radians.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span> <span class="typ-op">==</span> calc<span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">270deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/9a343f290b69c6546ce3068c8c32d9ea.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: angle
        details: <p>The angle whose sine to calculate.</p>
        example: null
        types:
        - int
        - float
        - angle
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: cos
      title: Cosine
      keywords: []
      oneliner: Calculates the cosine of an angle.
      element: false
      details: |-
        <p>Calculates the cosine of an angle.</p>
        <p>When called with an integer or a float, they will be interpreted as
        radians.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cos</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cos</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cos</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/5eefa7a2d93c8b89041d62c4187a2c30.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: angle
        details: <p>The angle whose cosine to calculate.</p>
        example: null
        types:
        - int
        - float
        - angle
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: tan
      title: Tangent
      keywords: []
      oneliner: Calculates the tangent of an angle.
      element: false
      details: |-
        <p>Calculates the tangent of an angle.</p>
        <p>When called with an integer or a float, they will be interpreted as
        radians.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tan</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tan</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/b0d4d791b53918afd48eadd8d8a486c6.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: angle
        details: <p>The angle whose tangent to calculate.</p>
        example: null
        types:
        - int
        - float
        - angle
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: asin
      title: Arcsine
      keywords: []
      oneliner: Calculates the arcsine of a number.
      element: false
      details: <p>Calculates the arcsine of a number.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">asin</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">asin</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/4e3534f3677072cae71d2151b1ea3cca.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number whose arcsine to calculate. Must be between -1 and
          1.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - angle
      scope: []
    - path:
      - calc
      name: acos
      title: Arccosine
      keywords: []
      oneliner: Calculates the arccosine of a number.
      element: false
      details: <p>Calculates the arccosine of a number.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">acos</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">acos</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/0423e3e221058490a01d9be936113706.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number whose arcsine to calculate. Must be between -1 and
          1.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - angle
      scope: []
    - path:
      - calc
      name: atan
      title: Arctangent
      keywords: []
      oneliner: Calculates the arctangent of a number.
      element: false
      details: <p>Calculates the arctangent of a number.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/0c307d4fe6fb00142b84518f3bb1869a.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number whose arctangent to calculate.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - angle
      scope: []
    - path:
      - calc
      name: atan2
      title: Four-quadrant Arctangent
      keywords: []
      oneliner: Calculates the four-quadrant arctangent of a coordinate.
      element: false
      details: |-
        <p>Calculates the four-quadrant arctangent of a coordinate.</p>
        <p>The arguments are <code>(x, y)</code>, not <code>(y, x)</code>.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan2</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan2</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/d804133f4d02ee61b3a7f5a4ad5f0a4c.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: x
        details: <p>The X coordinate.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: y
        details: <p>The Y coordinate.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - angle
      scope: []
    - path:
      - calc
      name: sinh
      title: Hyperbolic Sine
      keywords: []
      oneliner: Calculates the hyperbolic sine of a hyperbolic angle.
      element: false
      details: <p>Calculates the hyperbolic sine of a hyperbolic angle.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sinh</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sinh</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/c062ac2864096e6a91bf82cade922dbe.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The hyperbolic angle whose hyperbolic sine to calculate.</p>
        example: null
        types:
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: cosh
      title: Hyperbolic Cosine
      keywords: []
      oneliner: Calculates the hyperbolic cosine of a hyperbolic angle.
      element: false
      details: <p>Calculates the hyperbolic cosine of a hyperbolic angle.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cosh</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cosh</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/8731566fc671a877e2755e69793fc8c9.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The hyperbolic angle whose hyperbolic cosine to calculate.</p>
        example: null
        types:
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: tanh
      title: Hyperbolic Tangent
      keywords: []
      oneliner: Calculates the hyperbolic tangent of an hyperbolic angle.
      element: false
      details: <p>Calculates the hyperbolic tangent of an hyperbolic angle.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tanh</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tanh</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/a5cf70185c7cdd1289b110da69dde187.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The hyperbolic angle whose hyperbolic tangent to calculate.</p>
        example: null
        types:
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: log
      title: Logarithm
      keywords: []
      oneliner: Calculates the logarithm of a number.
      element: false
      details: |-
        <p>Calculates the logarithm of a number.</p>
        <p>If the base is not specified, the logarithm is calculated in base 10.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">log</span><span class="typ-punct">(</span><span class="typ-num">100</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/f280746542998704b07551b9c4f7a334.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number whose logarithm to calculate. Must be strictly positive.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: base
        details: <p>The base of the logarithm. May not be zero.</p>
        example: null
        types:
        - float
        strings: []
        default: <code><span class="typ-num">10</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: ln
      title: Natural Logarithm
      keywords: []
      oneliner: Calculates the natural logarithm of a number.
      element: false
      details: <p>Calculates the natural logarithm of a number.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">ln</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>e<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e809f2f5235f582e80badf01f1c5ec1b.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number whose logarithm to calculate. Must be strictly positive.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - float
      scope: []
    - path:
      - calc
      name: fact
      title: Factorial
      keywords: []
      oneliner: Calculates the factorial of a number.
      element: false
      details: <p>Calculates the factorial of a number.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">fact</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/10eb9ad85b719fb4313dbb869b5f20ad.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: number
        details: <p>The number whose factorial to calculate. Must be non-negative.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: perm
      title: Permutation
      keywords: []
      oneliner: Calculates a permutation.
      element: false
      details: |-
        <p>Calculates a permutation.</p>
        <p>Returns the <code>k</code>-permutation of <code>n</code>, or the number of ways to choose <code>k</code>
        items from a set of <code>n</code> with regard to order.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-str">&quot;perm&quot;</span>(n, k) <span class="typ-math-op">&amp;</span>= n!<span class="typ-math-op">/</span><span class="typ-punct">(</span>(n <span class="typ-escape">-</span> k)!<span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-str">&quot;perm&quot;</span>(5, 3) <span class="typ-math-op">&amp;</span>= <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">perm</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/8ba0160417321b9b7330d12b12d38315.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: base
        details: <p>The base number. Must be non-negative.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: numbers
        details: <p>The number of permutations. Must be non-negative.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: binom
      title: Binomial
      keywords: []
      oneliner: Calculates a binomial coefficient.
      element: false
      details: |-
        <p>Calculates a binomial coefficient.</p>
        <p>Returns the <code>k</code>-combination of <code>n</code>, or the number of ways to choose <code>k</code>
        items from a set of <code>n</code> without regard to order.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">binom</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/09fcfb4060edd792a9285daa8214210e.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: n
        details: <p>The upper coefficient. Must be non-negative.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: k
        details: <p>The lower coefficient. Must be non-negative.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: gcd
      title: Greatest Common Divisor
      keywords: []
      oneliner: Calculates the greatest common divisor of two integers.
      element: false
      details: <p>Calculates the greatest common divisor of two integers.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">gcd</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">42</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/c0d8d5caa2ef320457568f72d8e52e67.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: a
        details: <p>The first integer.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: b
        details: <p>The second integer.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: lcm
      title: Least Common Multiple
      keywords: []
      oneliner: Calculates the least common multiple of two integers.
      element: false
      details: <p>Calculates the least common multiple of two integers.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">lcm</span><span class="typ-punct">(</span><span class="typ-num">96</span><span class="typ-punct">,</span> <span class="typ-num">13</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/76ea73b1ad252a14e59212e49a6375fb.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: a
        details: <p>The first integer.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: b
        details: <p>The second integer.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: floor
      title: Floor
      keywords: []
      oneliner: Rounds a number down to the nearest integer.
      element: false
      details: |-
        <p>Rounds a number down to the nearest integer.</p>
        <p>If the number is already an integer, it is returned unchanged.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">floor</span><span class="typ-punct">(</span><span class="typ-num">3.14</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">floor</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">floor</span><span class="typ-punct">(</span><span class="typ-num">500.1</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/61eb20d7f3cd6373b777b4b105768cc6.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to round down.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: ceil
      title: Ceil
      keywords: []
      oneliner: Rounds a number up to the nearest integer.
      element: false
      details: |-
        <p>Rounds a number up to the nearest integer.</p>
        <p>If the number is already an integer, it is returned unchanged.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">ceil</span><span class="typ-punct">(</span><span class="typ-num">3.14</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">ceil</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">ceil</span><span class="typ-punct">(</span><span class="typ-num">500.1</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/69b2ab694eb4909e595d80cf4942bd27.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to round up.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: trunc
      title: Truncate
      keywords: []
      oneliner: Returns the integer part of a number.
      element: false
      details: |-
        <p>Returns the integer part of a number.</p>
        <p>If the number is already an integer, it is returned unchanged.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">trunc</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">trunc</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">3.7</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">trunc</span><span class="typ-punct">(</span><span class="typ-num">15.9</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/a8f77e7eaa51dc0a953d69933f1e263f.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to truncate.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
    - path:
      - calc
      name: fract
      title: Fractional
      keywords: []
      oneliner: Returns the fractional part of a number.
      element: false
      details: |-
        <p>Returns the fractional part of a number.</p>
        <p>If the number is an integer, returns <code>0</code>.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">fract</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">0</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">fract</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">3.1</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e95d212f509a3f674b880f65d01a720a.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to truncate.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - float
      scope: []
    - path:
      - calc
      name: round
      title: Round
      keywords: []
      oneliner: Rounds a number to the nearest integer.
      element: false
      details: |-
        <p>Rounds a number to the nearest integer.</p>
        <p>Optionally, a number of decimal places can be specified.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">round</span><span class="typ-punct">(</span><span class="typ-num">3.14</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">round</span><span class="typ-punct">(</span><span class="typ-num">3.5</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">round</span><span class="typ-punct">(</span><span class="typ-num">3.1415</span><span class="typ-punct">,</span> digits<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/909cf2add30990bd12abe88252ffd37d.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to round.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: digits
        details: <p>The number of decimal places.</p>
        example: null
        types:
        - int
        strings: []
        default: <code><span class="typ-num">0</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - int
      - float
      scope: []
    - path:
      - calc
      name: clamp
      title: Clamp
      keywords: []
      oneliner: Clamps a number between a minimum and maximum value.
      element: false
      details: <p>Clamps a number between a minimum and maximum value.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">clamp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">,</span> <span class="typ-num">10</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">5</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">clamp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">6</span><span class="typ-punct">,</span> <span class="typ-num">10</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">6</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">clamp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/73b6c954f13326954ddededb400d41c2.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to clamp.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: min
        details: <p>The inclusive minimum value.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: max
        details: <p>The inclusive maximum value.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - float
      scope: []
    - path:
      - calc
      name: min
      title: Minimum
      keywords: []
      oneliner: Determines the minimum of a sequence of values.
      element: false
      details: <p>Determines the minimum of a sequence of values.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">min</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">20</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">6</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">min</span><span class="typ-punct">(</span><span class="typ-str">&quot;typst&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;in&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;beta&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/fb22eeb2bde8fae1b41f607e630f4657.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: values
        details: |-
          <p>The sequence of values from which to extract the minimum.
          Must not be empty.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - any
      scope: []
    - path:
      - calc
      name: max
      title: Maximum
      keywords: []
      oneliner: Determines the maximum of a sequence of values.
      element: false
      details: <p>Determines the maximum of a sequence of values.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">max</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">20</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">6</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">max</span><span class="typ-punct">(</span><span class="typ-str">&quot;typst&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;in&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;beta&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/0cc0245e974c507873103cb34aacc634.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: values
        details: |-
          <p>The sequence of values from which to extract the maximum.
          Must not be empty.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - any
      scope: []
    - path:
      - calc
      name: even
      title: Even
      keywords: []
      oneliner: Determines whether an integer is even.
      element: false
      details: <p>Determines whether an integer is even.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">even</span><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">even</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">filter</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>even<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/2621ae26c6c004f52ca08b301541a4b2.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to check for evenness.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - bool
      scope: []
    - path:
      - calc
      name: odd
      title: Odd
      keywords: []
      oneliner: Determines whether an integer is odd.
      element: false
      details: <p>Determines whether an integer is odd.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">odd</span><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">odd</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">filter</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>odd<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/afd09ad4fbff9a70a0c9a4458e52bb14.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The number to check for oddness.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - bool
      scope: []
    - path:
      - calc
      name: rem
      title: Remainder
      keywords: []
      oneliner: Calculates the remainder of two numbers.
      element: false
      details: |-
        <p>Calculates the remainder of two numbers.</p>
        <p>The value <code>calc.rem(x, y)</code> always has the same sign as <code>x</code>, and is smaller
        in magnitude than <code>y</code>.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">1.75</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e77bb2090ab9d5d93da0df8237fad1bd.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: dividend
        details: <p>The dividend of the remainder.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: divisor
        details: <p>The divisor of the remainder.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - float
      scope: []
    - path:
      - calc
      name: div-euclid
      title: Euclidean Division
      keywords: []
      oneliner: Performs euclidean division of two numbers.
      element: false
      details: |-
        <p>Performs euclidean division of two numbers.</p>
        <p>The result of this computation is that of a division rounded to the integer
        <code>n</code> such that the dividend is greater than or equal to <code>n</code> times the divisor.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-num">1.75</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/bd780ec1a24e5250e30b9845c23817e7.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: dividend
        details: <p>The dividend of the division.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: divisor
        details: <p>The divisor of the division.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - float
      scope: []
    - path:
      - calc
      name: rem-euclid
      title: Euclidean Remainder
      keywords: []
      oneliner: This calculates the least nonnegative remainder of a division.
      element: false
      details: |-
        <p>This calculates the least nonnegative remainder of a division.</p>
        <p>Warning: Due to a floating point round-off error, the remainder may equal the absolute
        value of the divisor if the dividend is much smaller in magnitude than the divisor
        and the dividend is negative. This only applies for floating point inputs.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">1.75</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/44d12330a4ce0842a3cc47a4628cac5f.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: dividend
        details: <p>The dividend of the remainder.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: divisor
        details: <p>The divisor of the remainder.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - float
      scope: []
    - path:
      - calc
      name: quo
      title: Quotient
      keywords: []
      oneliner: Calculates the quotient (floored division) of two numbers.
      element: false
      details: <p>Calculates the quotient (floored division) of two numbers.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-str">&quot;quo&quot;</span>(a, b) <span class="typ-math-op">&amp;</span>= <span class="typ-func">floor</span><span class="typ-punct">(</span>a<span class="typ-math-op">/</span>b<span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-str">&quot;quo&quot;</span>(14, 5) <span class="typ-math-op">&amp;</span>= <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">quo</span><span class="typ-punct">(</span><span class="typ-num">14</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-str">&quot;quo&quot;</span>(3.46, 0.5) <span class="typ-math-op">&amp;</span>= <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">quo</span><span class="typ-punct">(</span><span class="typ-num">3.46</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/440f7e6e130cf956c93e8db3196f28fc.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: dividend
        details: <p>The dividend of the quotient.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: divisor
        details: <p>The divisor of the quotient.</p>
        example: null
        types:
        - int
        - float
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      scope: []
children: []
