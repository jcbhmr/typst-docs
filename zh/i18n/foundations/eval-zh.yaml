route: /docs/reference/foundations/eval/
title: Evaluate
description: '`eval` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-source
    name: source
    children: []
  - id: parameters-mode
    name: mode
    children: []
  - id: parameters-scope
    name: scope
    children: []
body:
  kind: func
  content:
    path: []
    name: eval
    title: Evaluate
    keywords: []
    oneliner: Evaluates a string as Typst code.
    element: false
    details: |-
      <p>Evaluates a string as Typst code.</p>
      <p>This function should only be used as a last resort.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;1 + 1&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;(1, 2, 3, 4)&quot;</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">len</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;*Markup!*&quot;</span><span class="typ-punct">,</span> mode<span class="typ-punct">:</span> <span class="typ-str">&quot;markup&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      </code></pre><div class="preview"><img src="/assets/docs/e9109a1aa7eadb5334980147f7d38916.png" alt="Preview" width="480" height="190"/></div></div>
    example: null
    self: false
    params:
    - name: source
      details: |-
        <p>A string of Typst code to evaluate.</p>
        <p>The code in the string cannot interact with the file system.</p>
      example: null
      types:
      - str
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    - name: mode
      details: <p>The syntactical mode in which the string is parsed.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;= Heading&quot;</span><span class="typ-punct">,</span> mode<span class="typ-punct">:</span> <span class="typ-str">&quot;markup&quot;</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;1_2^3&quot;</span><span class="typ-punct">,</span> mode<span class="typ-punct">:</span> <span class="typ-str">&quot;math&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/0776ddb40c768be3aa00f8fe7822c85a.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - str
      strings:
      - string: code
        details: <p>Evaluate as code, as after a hash.</p>
      - string: markup
        details: <p>Evaluate as markup, like in a Typst file.</p>
      - string: math
        details: <p>Evaluate as math, as in an equation.</p>
      default: <code><span class="typ-str">&quot;code&quot;</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: false
    - name: scope
      details: <p>A scope of definitions that are made available.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 1&quot;</span><span class="typ-punct">,</span> scope<span class="typ-punct">:</span> <span class="typ-punct">(</span>x<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span>
          <span class="typ-str">&quot;abc/xyz&quot;</span><span class="typ-punct">,</span>
          mode<span class="typ-punct">:</span> <span class="typ-str">&quot;math&quot;</span><span class="typ-punct">,</span>
          scope<span class="typ-punct">:</span> <span class="typ-punct">(</span>
            abc<span class="typ-punct">:</span> <span class="typ-math-delim">$</span>a + b + c<span class="typ-math-delim">$</span><span class="typ-punct">,</span>
            xyz<span class="typ-punct">:</span> <span class="typ-math-delim">$</span>x + y + z<span class="typ-math-delim">$</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/a4850b9dbcd5013b0145088f23d19a5d.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - dictionary
      strings: []
      default: <code><span class="typ-punct">(</span><span class="typ-punct">:</span><span
        class="typ-punct">)</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: false
    returns:
    - any
    scope: []
children: []
