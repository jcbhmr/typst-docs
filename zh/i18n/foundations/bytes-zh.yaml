route: /docs/reference/foundations/bytes/
title: Bytes
description: Bytes ç±»åž‹çš„æ–‡æ¡£
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-value
    name: value
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-len
    name: Length
    children: []
  - id: definitions-at
    name: At
    children:
    - id: definitions-at-index
      name: index
      children: []
    - id: definitions-at-default
      name: default
      children: []
  - id: definitions-slice
    name: Slice
    children:
    - id: definitions-slice-start
      name: start
      children: []
    - id: definitions-slice-end
      name: end
      children: []
    - id: definitions-slice-count
      name: count
      children: []
body:
  kind: type
  content:
    name: bytes
    title: Bytes
    keywords: []
    oneliner: A sequence of bytes.
    details: |-
      <p>A sequence of bytes.</p>
      <p>This is conceptually similar to an array of <a href="/docs/reference/foundations/int/">integers</a> between <code><span class="typ-num">0</span></code>
      and <code><span class="typ-num">255</span></code>, but represented much more efficiently.</p>
      <p>You can convert</p>
      <ul>
      <li>a <a href="/docs/reference/foundations/str/">string</a> or an <a href="/docs/reference/foundations/array/">array</a> of integers to bytes with the
      <a href="/docs/reference/foundations/bytes/"><code>bytes</code></a> constructor</li>
      <li>bytes to a string with the <a href="/docs/reference/foundations/str/"><code>str</code></a> constructor</li>
      <li>bytes to an array of integers with the <a href="/docs/reference/foundations/array/"><code>array</code></a> constructor</li>
      </ul>
      <p>When <a href="/docs/reference/data-loading/read/">reading</a> data from a file, you can decide whether to load it
      as a string or as raw bytes.</p>
      <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">123</span><span class="typ-punct">,</span> <span class="typ-num">160</span><span class="typ-punct">,</span> <span class="typ-num">22</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-str">&quot;Hello ðŸ˜ƒ&quot;</span><span class="typ-punct">)</span>

      <span class="typ-key">#</span><span class="typ-key">let</span> data <span class="typ-op">=</span> <span class="typ-func">read</span><span class="typ-punct">(</span>
        <span class="typ-str">&quot;rhino.png&quot;</span><span class="typ-punct">,</span>
        encoding<span class="typ-punct">:</span> <span class="typ-key">none</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span>

      <span class="typ-comment">// Magic bytes.</span>
      <span class="typ-func">#</span><span class="typ-func">array</span><span class="typ-punct">(</span>data<span class="typ-punct">.</span><span class="typ-func">slice</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span>data<span class="typ-punct">.</span><span class="typ-func">slice</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/3dd79fbeed81ba0714b8d1394002e893.png" alt="Preview" width="480" height="190"/></div></div>
    constructor:
      path: []
      name: bytes
      title: Construct
      keywords: []
      oneliner: Converts a value to bytes.
      element: false
      details: |-
        <p>Converts a value to bytes.</p>
        <ul>
        <li>Strings are encoded in UTF-8.</li>
        <li>Arrays of integers between <code><span class="typ-num">0</span></code> and <code><span class="typ-num">255</span></code> are converted directly. The
        dedicated byte representation is much more efficient than the array
        representation and thus typically used for large byte buffers (e.g. image
        data).</li>
        </ul>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-str">&quot;Hello ðŸ˜ƒ&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">123</span><span class="typ-punct">,</span> <span class="typ-num">160</span><span class="typ-punct">,</span> <span class="typ-num">22</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e645daac1928809c44129c626541e29b.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: value
        details: <p>The value that should be converted to bytes.</p>
        example: null
        types:
        - str
        - bytes
        - array
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - bytes
      scope: []
    scope:
    - path:
      - bytes
      name: len
      title: Length
      keywords: []
      oneliner: The length in bytes.
      element: false
      details: <p>The length in bytes.</p>
      example: null
      self: true
      params: []
      returns:
      - int
      scope: []
    - path:
      - bytes
      name: at
      title: At
      keywords: []
      oneliner: Returns the byte at the specified index. Returns the default value
        if
      element: false
      details: |-
        <p>Returns the byte at the specified index. Returns the default value if
        the index is out of bounds or fails with an error if no default value
        was specified.</p>
      example: null
      self: true
      params:
      - name: index
        details: <p>The index at which to retrieve the byte.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: default
        details: <p>A default value to return if the index is out of bounds.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - bytes
      name: slice
      title: Slice
      keywords: []
      oneliner: Extracts a subslice of the bytes. Fails with an error if the start
        or
      element: false
      details: |-
        <p>Extracts a subslice of the bytes. Fails with an error if the start or
        index is out of bounds.</p>
      example: null
      self: true
      params:
      - name: start
        details: <p>The start index (inclusive).</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: end
        details: |-
          <p>The end index (exclusive). If omitted, the whole slice until the end
          is extracted.</p>
        example: null
        types:
        - none
        - int
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      - name: count
        details: |-
          <p>The number of items to extract. This is equivalent to passing
          <code>start + count</code> as the <code>end</code> position. Mutually exclusive with
          <code>end</code>.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - bytes
      scope: []
children: []
