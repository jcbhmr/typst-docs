route: /docs/reference/text/raw/
title: 原始文本/代码块
description: '`raw` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: syntax
  name: Syntax
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-text
    name: text
    children: []
  - id: parameters-block
    name: block
    children: []
  - id: parameters-lang
    name: lang
    children: []
  - id: parameters-align
    name: align
    children: []
  - id: parameters-syntaxes
    name: syntaxes
    children: []
  - id: parameters-theme
    name: theme
    children: []
  - id: parameters-tab-size
    name: tab-size
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-line
    name: Raw Text / Code Line
    children:
    - id: definitions-line-number
      name: number
      children: []
    - id: definitions-line-count
      name: count
      children: []
    - id: definitions-line-text
      name: text
      children: []
    - id: definitions-line-body
      name: body
      children: []
body:
  kind: func
  content:
    path: []
    name: raw
    title: Raw Text / Code
    keywords: []
    oneliner: Raw text with optional syntax highlighting.
    element: true
    details: |-
      <p>带有可选语法高亮的原始文本。</p>
      <p>使用等宽字体逐字显示文本，通常用于将代码嵌入文档中。</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code>Adding <span class="typ-raw">`rbx`</span> to <span class="typ-raw">`rcx`</span> gives
      the desired result.

      What is <span class="typ-raw">```rust fn main()```</span> in Rust
      would be <span class="typ-raw">```c int main()```</span> in C.

      <span class="typ-raw">```rust
      fn main() {
          println!(&quot;Hello World!&quot;);
      }
      ```</span>

      This has <span class="typ-raw">``` `backticks` ```</span> in it
      (but the spaces are trimmed). And
      <span class="typ-raw">``` here```</span> the leading space is
      also trimmed.
      </code></pre><div class="preview"><img src="/assets/docs/4d059815fc030797337a320eb65c3828.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="syntax">Syntax</h2>
      <p>This function also has dedicated syntax. You can enclose text in 1 or 3+
      backticks (<code>`</code>) to make it raw. Two backticks produce empty raw text.
      When you use three or more backticks, you can additionally specify a
      language tag for syntax highlighting directly after the opening backticks.
      Within raw blocks, everything (except for the language tag, if applicable)
      is rendered as is, in particular, there are no escape sequences.</p>
      <p>The language tag is an identifier that directly follows the opening
      backticks only if there are three or more backticks. If your text starts
      with something that looks like an identifier, but no syntax highlighting is
      needed, start the text with a single space (which will be trimmed) or use
      the single backtick syntax. If your text should start or end with a
      backtick, put a space before or after it (it will be trimmed).</p>
    example: null
    self: false
    params:
    - name: text
      details: |-
        <p>原始文本块。</p>
        <p>你还可以创造性地使用原始块为你的自动化创建自定义语法。</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-comment">// Parse numbers in raw blocks with the</span>
        <span class="typ-comment">// `mydsl` tag and sum them up.</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;mydsl&quot;</span><span class="typ-punct">)</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> sum <span class="typ-op">=</span> <span class="typ-num">0</span>
          <span class="typ-key">for</span> part <span class="typ-key">in</span> it<span class="typ-punct">.</span>text<span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-str">&quot;+&quot;</span><span class="typ-punct">)</span> <span class="typ-punct">{</span>
            sum <span class="typ-op">+=</span> <span class="typ-func">int</span><span class="typ-punct">(</span>part<span class="typ-punct">.</span><span class="typ-func">trim</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-punct">}</span>
          sum
        <span class="typ-punct">}</span>

        <span class="typ-raw">```mydsl
        1 + 2 + 3 + 4 + 5
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/bde85482e73ea5451d489ec50b6d23ba.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - str
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    - name: block
      details: |-
        <p>是否将原始文本显示在一个单独的块中。</p>
        <p>
        在标记模式中，使用一个反引号会将此值设置为 <code><span class="typ-key">false</span></code>。
        如果包含的内容至少包含一个换行符，则使用三个反引号会将其设置为 <code><span class="typ-key">true</span></code>。
        </p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-comment">// Display inline code in a small box</span>
        <span class="typ-comment">// that retains the correct baseline.</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>block<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">:</span> box<span class="typ-punct">.</span><span class="typ-func">with</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> <span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">240</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          inset<span class="typ-punct">:</span> <span class="typ-punct">(</span>x<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">,</span> y<span class="typ-punct">:</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          outset<span class="typ-punct">:</span> <span class="typ-punct">(</span>y<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          radius<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-comment">// Display block code in a larger block</span>
        <span class="typ-comment">// with more padding.</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>block<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">:</span> block<span class="typ-punct">.</span><span class="typ-func">with</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> <span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">240</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          inset<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">,</span>
          radius<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        With <span class="typ-raw">`rg`</span>, you can search through your files quickly.
        This example searches the current directory recursively
        for the text <span class="typ-raw">`Hello World`</span>:

        <span class="typ-raw">```bash
        rg &quot;Hello World&quot;
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/12f58e9211d4d9c5d586630e143971a2.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - bool
      strings: []
      default: <code><span class="typ-key">false</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: lang
      details: |-
          <p>要在其中突出显示语法的语言。</p>
          <p>要在其中突出显示语法的语言，用法与 Markdown 代码块类似。
            除了 Markdown 中也有的典型编程语言后缀外，它还分别支持 Typst 标记模式和 Typst 脚本模式分别对应的“typ”和“typc”后缀。</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-raw">```typ
        This is *Typst!*
        ```</span>

        This is <span class="typ-raw">```typ also *Typst*```</span>, but inline!
        </code></pre><div class="preview"><img src="/assets/docs/1d8174ac34248a5e5715acf2490b2cba.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - none
      - str
      strings: []
      default: <code><span class="typ-key">none</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: align
      details: |-
        <p>The horizontal alignment that each line in a raw block should have.
        This option is ignored if this is not a raw block (if specified
        <code>block: false</code> or single backticks were used in markup mode).</p>
        <p>By default, this is set to <code>start</code>, meaning that raw text is
        aligned towards the start of the text direction inside the block
        by default, regardless of the current context's alignment (allowing
        you to center the raw block itself without centering the text inside
        it, for example).</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">raw</span><span class="typ-punct">(</span>align<span class="typ-punct">:</span> center<span class="typ-punct">)</span>

        <span class="typ-raw">```typc
        let f(x) = x
        code = &quot;centered&quot;
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/3329ad5b36132aa190d787eb5927b1aa.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - alignment
      strings: []
      default: <code>start</code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: syntaxes
      details: |-
        <p>One or multiple additional syntax definitions to load. The syntax
        definitions should be in the
        <a href="https://www.sublimetext.com/docs/syntax.html"><code>sublime-syntax</code> file format</a>.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">raw</span><span class="typ-punct">(</span>syntaxes<span class="typ-punct">:</span> <span class="typ-str">&quot;SExpressions.sublime-syntax&quot;</span><span class="typ-punct">)</span>

        <span class="typ-raw">```sexp
        (defun factorial (x)
          (if (zerop x)
            ; with a comment
            1
            (* x (factorial (- x 1)))))
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/7777214ef3477bb1fc911fc35cf324cc.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - str
      - array
      strings: []
      default: <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: theme
      details: |-
        <p>用于语法高亮的主题。主题文件应该使用<a href="https://www.sublimetext.com/docs/color_schemes_tmtheme.html"><code>tmTheme</code>文件格式</a>。</p>
        <p>应用主题仅影响特定突出显示文本的颜色。它不考虑主题的前景和背景属性，因此您可以保留对原始文本颜色的控制。您可以使用<a href="/docs/reference/text/text/"><code>text</code></a>函数自行应用前景颜色，使用<a href="/docs/reference/layout/block/#parameters-fill">填充块</a>应用背景颜色。您还可以使用<a href="/docs/reference/data-loading/xml/"><code>xml</code></a>函数从主题中提取这些属性。</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">raw</span><span class="typ-punct">(</span>theme<span class="typ-punct">:</span> <span class="typ-str">&quot;halcyon.tmTheme&quot;</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-func">raw</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-func">block</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#1d2433&quot;</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          inset<span class="typ-punct">:</span> <span class="typ-num">8pt</span><span class="typ-punct">,</span>
          radius<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span>
          <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#a2aabc&quot;</span><span class="typ-punct">)</span><span class="typ-punct">,</span> it<span class="typ-punct">)</span>
        <span class="typ-punct">)</span>

        <span class="typ-raw">```typ
        = Chapter 1
        #let hi = &quot;Hello World&quot;
        ```</span>
        </code></pre><div class="preview"><img src="/assets/docs/9009911872ae520fd503c1609b962bc8.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - none
      - str
      strings: []
      default: <code><span class="typ-key">none</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: tab-size
      details: |-
        <p>以空格为单位的制表符停止的大小。制表符将替换为足够的空格，以与下一个大小的倍数对齐。</p>
      example: "<div class=\"previewed-code\"><pre><code><span class=\"typ-key\">#</span><span\
        \ class=\"typ-key\">set</span> <span class=\"typ-func\">raw</span><span class=\"\
        typ-punct\">(</span>tab-size<span class=\"typ-punct\">:</span> <span class=\"\
        typ-num\">8</span><span class=\"typ-punct\">)</span>\n<span class=\"typ-raw\"\
        >```tsv\nYear\tMonth\tDay\n2000\t2\t3\n2001\t2\t1\n2002\t3\t10\n```</span>\n\
        </code></pre><div class=\"preview\"><img src=\"/assets/docs/a9fc7c872c3de1fc9b7c46043d34e867.png\"\
        \ alt=\"Preview\" width=\"480\" height=\"190\"/></div></div>"
      types:
      - int
      strings: []
      default: <code><span class="typ-num">2</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    returns:
    - content
    scope:
    - path:
      - raw
      name: line
      title: Raw Text / Code Line
      keywords: []
      oneliner: 一行突出显示的原始文本。
      element: true
      details: |-
        <p>一行突出显示的原始文本。</p>
        <p>这是由<a href="/docs/reference/text/raw/"><code>raw</code></a>元素合成的助手元素。</p>
        <p>它允许您访问行的各种属性，如行号、原始非突出显示的文本、突出显示的文本以及它是否是原始块的第一行或最后一行。</p>
      example: null
      self: false
      params:
      - name: number
        details: <p>原始块内原始行的行号，从 1 开始。</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: count
        details: <p>The total number of lines in the raw block.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: text
        details: <p>The line of raw text.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: body
        details: <p>The highlighted raw text.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
children: []
