route: /docs/reference/math/cases/
title: Cases
description: '`cases` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-delim
    name: delim
    children: []
  - id: parameters-reverse
    name: reverse
    children: []
  - id: parameters-gap
    name: gap
    children: []
  - id: parameters-children
    name: children
    children: []
body:
  kind: func
  content:
    path:
    - math
    name: cases
    title: Cases
    keywords: []
    oneliner: A case distinction.
    element: true
    details: |-
      <p>A case distinction.</p>
      <p>Content across different branches can be aligned with the <code>&amp;</code> symbol.</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> f(x, y) <span class="typ-escape">:=</span> <span class="typ-func">cases</span><span class="typ-punct">(</span>
        1 <span class="typ-str">&quot;if&quot;</span> <span class="typ-punct">(</span>x <span class="typ-pol">dot</span> y<span class="typ-punct">)</span><span class="typ-math-op">/</span>2 <span class="typ-escape">&lt;=</span> 0<span class="typ-punct">,</span>
        2 <span class="typ-str">&quot;if&quot;</span> x <span class="typ-str">&quot;is even&quot;</span><span class="typ-punct">,</span>
        3 <span class="typ-str">&quot;if&quot;</span> x <span class="typ-pol">in</span> <span class="typ-pol">NN</span><span class="typ-punct">,</span>
        4 <span class="typ-str">&quot;else&quot;</span><span class="typ-punct">,</span>
      <span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/44f8d5158fe3376b109dc8d8e95e2d9e.png" alt="Preview" width="480" height="190"/></div></div>
    example: null
    self: false
    params:
    - name: delim
      details: <p>The delimiter to use.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">cases</span><span class="typ-punct">(</span>delim<span class="typ-punct">:</span> <span class="typ-str">&quot;[&quot;</span><span class="typ-punct">)</span>
        <span class="typ-math-delim">$</span> x = <span class="typ-func">cases</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/64308d8f300a31dcea4c5b8442acdc88.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - str
      strings:
      - string: (
        details: <p>Delimit with parentheses.</p>
      - string: '['
        details: <p>Delimit with brackets.</p>
      - string: '{'
        details: <p>Delimit with curly braces.</p>
      - string: '|'
        details: <p>Delimit with vertical bars.</p>
      - string: '||'
        details: <p>Delimit with double vertical bars.</p>
      default: <code><span class="typ-str">&quot;{&quot;</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: reverse
      details: <p>Whether the direction of cases should be reversed.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">cases</span><span class="typ-punct">(</span>reverse<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>
        <span class="typ-math-delim">$</span> <span class="typ-func">cases</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> = x <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/a42760f3d718b33d99a8b55fd1e30e29.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - bool
      strings: []
      default: <code><span class="typ-key">false</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: gap
      details: <p>The gap between branches.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">cases</span><span class="typ-punct">(</span>gap<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">)</span>
        <span class="typ-math-delim">$</span> x = <span class="typ-func">cases</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/2e0ab0f3c9e54156d785d82fd95e8189.png" alt="Preview" width="480" height="190"/></div></div>
      types:
      - relative
      strings: []
      default: <code><span class="typ-num">0.5em</span></code>
      positional: false
      named: true
      required: false
      variadic: false
      settable: true
    - name: children
      details: <p>The branches of the case distinction.</p>
      example: null
      types:
      - content
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: true
      settable: false
    returns:
    - content
    scope: []
children: []
