route: /docs/reference/math/lr
title: 左/右
description: lr 函数族的文档.
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: ''
  name: ''
  children: []
- id: functions
  name: Functions
  children:
  - id: functions-lr
    name: Left/Right
    children:
    - id: functions-lr-size
      name: size
      children: []
    - id: functions-lr-body
      name: body
      children: []
  - id: functions-mid
    name: Mid
    children:
    - id: functions-mid-body
      name: body
      children: []
  - id: functions-abs
    name: Abs
    children:
    - id: functions-abs-size
      name: size
      children: []
    - id: functions-abs-body
      name: body
      children: []
  - id: functions-norm
    name: Norm
    children:
    - id: functions-norm-size
      name: size
      children: []
    - id: functions-norm-body
      name: body
      children: []
  - id: functions-floor
    name: Floor
    children:
    - id: functions-floor-size
      name: size
      children: []
    - id: functions-floor-body
      name: body
      children: []
  - id: functions-ceil
    name: Ceil
    children:
    - id: functions-ceil-size
      name: size
      children: []
    - id: functions-ceil-body
      name: body
      children: []
  - id: functions-round
    name: Round
    children:
    - id: functions-round-size
      name: size
      children: []
    - id: functions-round-body
      name: body
      children: []
body:
  kind: group
  content:
    name: lr
    title: 左/右
    details: |-
      <p>定界符匹配。</p>
      <p><code>lr</code> 函数允许您匹配两个定界符并按其包含的内容缩放它们。虽然在语法上匹配的定界符也会自动进行，但 <code>lr</code> 允许您匹配两个任意的定界符并精确控制它们的大小。除了 <code>lr</code> 函数外，Typst 还提供了一些创建绝对值、上取整和下取整值以及范数的定界符配对的其他函数。</p>
      <h2>示例</h2>
      <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> [a, b<span class="typ-math-op">/</span>2] <span class="typ-math-delim">$</span>
      <span class="typ-math-delim">$</span> <span class="typ-func">lr</span><span class="typ-punct">(</span>]<span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>x=1<span class="typ-punct">)</span><span class="typ-math-op">^</span>n] x<span class="typ-punct">,</span> size<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">50%</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
      <span class="typ-math-delim">$</span> <span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-punct">(</span>x + y<span class="typ-punct">)</span> <span class="typ-math-op">/</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/41d20606a87dc72e3461b2b0a7ce9acf.png" alt="Preview" width="480" height="190"/></div></div>
    functions:
    - path:
      - math
      name: lr
      title: Left/Right
      keywords: []
      oneliner: Scales delimiters.
      element: true
      details: |-
        <p>Scales delimiters.</p>
        <p>While matched delimiters scale by default, this can be used to scale
        unmatched delimiters and to control the delimiter scaling more precisely.</p>
      example: null
      self: false
      params:
      - name: size
        details: <p>The size of the brackets, relative to the height of the wrapped
          content.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The delimited content, including the delimiters.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - math
      name: mid
      title: Mid
      keywords: []
      oneliner: Scales delimiters vertically to the nearest surrounding `{lr()}` group.
      element: true
      details: <p>Scales delimiters vertically to the nearest surrounding <code><span
        class="typ-func">lr</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
        group.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> { x <span class="typ-func">mid</span><span class="typ-punct">(</span>|<span class="typ-punct">)</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>i=1<span class="typ-punct">)</span><span class="typ-math-op">^</span>n w<span class="typ-math-op">_</span>i|f<span class="typ-math-op">_</span>i (x)| &lt; 1 } <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/5bb74ab12ab4445fbc6af176433f46c7.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: body
        details: <p>The content to be scaled.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - math
      name: abs
      title: Abs
      keywords: []
      oneliner: Takes the absolute value of an expression.
      element: false
      details: <p>Takes the absolute value of an expression.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">abs</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/28e475440e93179a23e1e05535ef8b05.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: size
        details: <p>The size of the brackets, relative to the height of the wrapped
          content.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      - name: body
        details: <p>The expression to take the absolute value of.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - math
      name: norm
      title: Norm
      keywords: []
      oneliner: Takes the norm of an expression.
      element: false
      details: <p>Takes the norm of an expression.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">norm</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/b1c37b013016675629fbfab0497e5ce5.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: size
        details: <p>The size of the brackets, relative to the height of the wrapped
          content.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      - name: body
        details: <p>The expression to take the norm of.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - math
      name: floor
      title: Floor
      keywords: []
      oneliner: Floors an expression.
      element: false
      details: <p>Floors an expression.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">floor</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/025f577b807e2e19e782e7ff2f73543a.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: size
        details: <p>The size of the brackets, relative to the height of the wrapped
          content.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      - name: body
        details: <p>The expression to floor.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - math
      name: ceil
      title: Ceil
      keywords: []
      oneliner: Ceils an expression.
      element: false
      details: <p>Ceils an expression.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">ceil</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/5e51dbb63fcb62826c19d8bc8405ec5b.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: size
        details: <p>The size of the brackets, relative to the height of the wrapped
          content.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      - name: body
        details: <p>The expression to ceil.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - math
      name: round
      title: Round
      keywords: []
      oneliner: Rounds an expression.
      element: false
      details: <p>Rounds an expression.</p>
      example: |-
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">round</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/b568beef30e9fb70d08ed84d7d609861.png" alt="Preview" width="480" height="190"/></div></div>
      self: false
      params:
      - name: size
        details: <p>The size of the brackets, relative to the height of the wrapped
          content.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      - name: body
        details: <p>The expression to round.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
children: []
