route: /docs/reference/math/class/
title: 类
description: '`class` 函数的文档'
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: example
  name: Example
  children: []
- id: parameters
  name: Parameters
  children:
  - id: parameters-class
    name: class
    children: []
  - id: parameters-body
    name: body
    children: []
body:
  kind: func
  content:
    path:
    - math
    name: class
    title: Class
    keywords: []
    oneliner: 强制使用特定数学类。
    element: true
    details: |-
      <p>强制使用特定数学类。</p>
      <p>这对于将某些符号视为不同的类很有用，例如，使符号的显示行为类似于关系运算符。</p>
      <h2 id="example">Example</h2>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> loves <span class="typ-op">=</span> math<span class="typ-punct">.</span><span class="typ-func">class</span><span class="typ-punct">(</span>
        <span class="typ-str">&quot;relation&quot;</span><span class="typ-punct">,</span>
        sym<span class="typ-punct">.</span>suit<span class="typ-punct">.</span>heart<span class="typ-punct">,</span>
      <span class="typ-punct">)</span>

      <span class="typ-math-delim">$</span>x <span class="typ-pol">loves</span> y <span class="typ-pol">and</span> y <span class="typ-pol">loves</span> 5<span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/e89e2c3b2abe1f8bdfd2f01546af0d9f.png" alt="Preview" width="480" height="190"/></div></div>
    example: null
    self: false
    params:
    - name: class
      details: <p>应用于内容的类。</p>
      example: null
      types:
      - string
      strings:
      - string: normal
        details: <p>非特殊事物的默认类。</p>
      - string: punctuation
        details: <p>标点符号，例如逗号。</p>
      - string: opening
        details: <p>起始分隔符，例如 <code>(</code>。</p>
      - string: closing
        details: <p>结束分隔符，例如 <code>)</code>。</p>
      - string: fence
        details: <p>两边相同的分隔符，例如 <code>|</code>。</p>
      - string: large
        details: <p>像 <code>sum</code> 这样的大型运算符。</p>
      - string: relation
        details: <p>像 <code>=</code> 或 <code>prec</code> 这样的关系运算符。</p>
      - string: unary
        details: <p>像 <code>not</code> 这样的一元运算符。</p>
      - string: binary
        details: <p>像 <code>times</code> 这样的二元运算符。</p>
      - string: vary
        details: <p>一个运算符，可以是一元或二进制的运算符，如 <code>+</code>。</p>
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    - name: body
      details: <p>类所应用的内容。</p>
      example: null
      types:
      - content
      strings: []
      default: null
      positional: true
      named: false
      required: true
      variadic: false
      settable: false
    returns:
    - content
    scope: []
children: []
