route: /docs/reference/introspection/state/
title: State
description: State 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: state-and-markup
  name: State And Markup
  children: []
- id: state-in-typst
  name: State In Typst
  children: []
- id: time-travel
  name: Time Travel
  children: []
- id: caution
  name: Caution
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-key
    name: key
    children: []
  - id: constructor-init
    name: init
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-display
    name: Display
    children:
    - id: definitions-display-func
      name: func
      children: []
  - id: definitions-update
    name: Update
    children:
    - id: definitions-update-update
      name: update
      children: []
  - id: definitions-at
    name: At
    children:
    - id: definitions-at-location
      name: location
      children: []
  - id: definitions-final
    name: Final
    children:
    - id: definitions-final-location
      name: location
      children: []
body:
  kind: type
  content:
    name: state
    title: State
    keywords: []
    oneliner: Manages stateful parts of your document.
    details: |-
      <p>Manages stateful parts of your document.</p>
      <p>Let's say you have some computations in your document and want to remember
      the result of your last computation to use it in the next one. You might try
      something similar to the code below and expect it to output 10, 13, 26, and
      21. However this <strong>does not work</strong> in Typst. If you test this code, you will
      see that Typst complains with the following error message: <em>Variables from
      outside the function are read-only and cannot be modified.</em></p>
      <pre><code><span class="typ-key">#</span><span class="typ-key">let</span> x <span class="typ-op">=</span> <span class="typ-num">0</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">compute</span><span class="typ-punct">(</span>expr<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
        x <span class="typ-op">=</span> <span class="typ-func">eval</span><span class="typ-punct">(</span>
          expr<span class="typ-punct">.</span><span class="typ-func">replace</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-func">str</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-punct">)</span>
        <span class="typ-punct">[</span>New value is <span class="typ-pol">#</span><span class="typ-pol">x</span>. <span class="typ-punct">]</span>
      <span class="typ-punct">}</span>

      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
      </code></pre>
      <h2 id="state-and-markup">State and document markup</h2>
      <p>Why does it do that? Because, in general, this kind of computation with side
      effects is problematic in document markup and Typst is upfront about that.
      For the results to make sense, the computation must proceed in the same
      order in which the results will be laid out in the document. In our simple
      example, that's the case, but in general it might not be.</p>
      <p>Let's look at a slightly different, but similar kind of state: The heading
      numbering. We want to increase the heading counter at each heading. Easy
      enough, right? Just add one. Well, it's not that simple. Consider the
      following example:</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">template</span><span class="typ-punct">(</span>body<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">[</span>
        <span class="typ-heading">= Outline</span>
        <span class="typ-escape">...</span>
        <span class="typ-pol">#</span><span class="typ-pol">body</span>
      <span class="typ-punct">]</span>

      <span class="typ-key">#</span><span class="typ-key">show</span><span class="typ-punct">:</span> <span class="typ-func">template</span>

      <span class="typ-heading">= Introduction</span>
      <span class="typ-escape">...</span>
      </code></pre><div class="preview"><img src="/assets/docs/fdcc5211e820e822853ff14684aaf58a.png" alt="Preview" width="480" height="190"/></div></div>
      <p>Here, Typst first processes the body of the document after the show rule,
      sees the <code>Introduction</code> heading, then passes the resulting content to the
      <code>template</code> function and only then sees the <code>Outline</code>. Just counting up would
      number the <code>Introduction</code> with <code>1</code> and the <code>Outline</code> with <code>2</code>.</p>
      <h2 id="state-in-typst">Managing state in Typst</h2>
      <p>So what do we do instead? We use Typst's state management system. Calling
      the <code>state</code> function with an identifying string key and an optional initial
      value gives you a state value which exposes a few methods. The two most
      important ones are <code>display</code> and <code>update</code>:</p>
      <ul>
      <li>
      <p>The <code>display</code> method shows the current value of the state. You can
      optionally give it a function that receives the value and formats it in
      some way.</p>
      </li>
      <li>
      <p>The <code>update</code> method modifies the state. You can give it any value. If
      given a non-function value, it sets the state to that value. If given a
      function, that function receives the previous state and has to return the
      new state.</p>
      </li>
      </ul>
      <p>Our initial example would now look like this:</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> s <span class="typ-op">=</span> <span class="typ-func">state</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">compute</span><span class="typ-punct">(</span>expr<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">[</span>
        <span class="typ-pol">#</span><span class="typ-pol">s</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>x <span class="typ-op">=&gt;</span>
          <span class="typ-func">eval</span><span class="typ-punct">(</span>expr<span class="typ-punct">.</span><span class="typ-func">replace</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-func">str</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-punct">)</span>
        New value is <span class="typ-pol">#</span><span class="typ-pol">s</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>.
      <span class="typ-punct">]</span>

      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/a7c1c35241de9094dff62614a94e7211.png" alt="Preview" width="480" height="190"/></div></div>
      <p>State managed by Typst is always updated in layout order, not in evaluation
      order. The <code>update</code> method returns content and its effect occurs at the
      position where the returned content is inserted into the document.</p>
      <p>As a result, we can now also store some of the computations in
      variables, but they still show the correct results:</p>
      <div class="previewed-code"><pre><code><span class="typ-escape">...</span>

      <span class="typ-key">#</span><span class="typ-key">let</span> more <span class="typ-op">=</span> <span class="typ-punct">[</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
      <span class="typ-punct">]</span>

      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">more</span>
      </code></pre><div class="preview"><img src="/assets/docs/78648e95b2e8fa7877df7235f6305705.png" alt="Preview" width="480" height="190"/></div></div>
      <p>This example is of course a bit silly, but in practice this is often exactly
      what you want! A good example are heading counters, which is why Typst's
      <a href="/docs/reference/introspection/counter/">counting system</a> is very similar to its state system.</p>
      <h2 id="time-travel">Time Travel</h2>
      <p>By using Typst's state management system you also get time travel
      capabilities! By combining the state system with <a href="/docs/reference/introspection/locate/"><code>locate</code></a> and
      <a href="/docs/reference/introspection/query/"><code>query</code></a>, we can find out what the value of the state will be at
      any position in the document from anywhere else. In particular, the <code>at</code>
      method gives us the value of the state at any location and the <code>final</code>
      methods gives us the value of the state at the end of the document.</p>
      <div class="previewed-code"><pre><code><span class="typ-escape">...</span>

      Value at <span class="typ-raw">`&lt;here&gt;`</span> is
      <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> s<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>
        <span class="typ-func">query</span><span class="typ-punct">(</span><span class="typ-label">&lt;here&gt;</span><span class="typ-punct">,</span> loc<span class="typ-punct">)</span>
          <span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          <span class="typ-punct">.</span><span class="typ-func">location</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-punct">)</span><span class="typ-punct">)</span>

      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-strong">*Here.*</span> <span class="typ-label">&lt;here&gt;</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/3c387c460c628cb0f84801a7b5368d5a.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="caution">A word of caution</h2>
      <p>To resolve the values of all states, Typst evaluates parts of your code
      multiple times. However, there is no guarantee that your state manipulation
      can actually be completely resolved.</p>
      <p>For instance, if you generate state updates depending on the final value of
      a state, the results might never converge. The example below illustrates
      this. We initialize our state with <code>1</code> and then update it to its own final
      value plus 1. So it should be <code>2</code>, but then its final value is <code>2</code>, so it
      should be <code>3</code>, and so on. This example display <code>4</code> because Typst simply
      gives up after a few attempts.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> s <span class="typ-op">=</span> <span class="typ-func">state</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
        s<span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>s<span class="typ-punct">.</span><span class="typ-func">final</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span> <span class="typ-op">+</span> <span class="typ-num">1</span><span class="typ-punct">)</span>
      <span class="typ-punct">}</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">s</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/93c5bdb21387c960a7486dd14e0a7050.png" alt="Preview" width="480" height="190"/></div></div>
      <p>In general, you should <em>typically</em> not generate state updates from within
      <code>locate</code> calls or <code>display</code> calls of state or counters. Instead, pass a
      function to <code>update</code> that determines the value of the state based on its
      previous value.</p>
    constructor:
      path: []
      name: state
      title: Construct
      keywords: []
      oneliner: Create a new state identified by a key.
      element: false
      details: <p>Create a new state identified by a key.</p>
      example: null
      self: false
      params:
      - name: key
        details: <p>The key that identifies this state.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: init
        details: <p>The initial value of the state.</p>
        example: null
        types:
        - any
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      returns:
      - state
      scope: []
    scope:
    - path:
      - state
      name: display
      title: Display
      keywords: []
      oneliner: Displays the current value of the state.
      element: false
      details: <p>Displays the current value of the state.</p>
      example: null
      self: true
      params:
      - name: func
        details: |-
          <p>A function which receives the value of the state and can return
          arbitrary content which is then displayed. If this is omitted, the
          value is directly displayed.</p>
        example: null
        types:
        - none
        - function
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - state
      name: update
      title: Update
      keywords: []
      oneliner: Update the value of the state.
      element: false
      details: |-
        <p>Update the value of the state.</p>
        <p>The update will be in effect at the position where the returned content
        is inserted into the document. If you don't put the output into the
        document, nothing happens! This would be the case, for example, if you
        write <code><span class="typ-key">let</span> _ <span class="typ-op">=</span> <span class="typ-func">state</span><span class="typ-punct">(</span><span class="typ-str">&quot;key&quot;</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">)</span></code>. State updates are always
        applied in layout order and in that case, Typst wouldn't know when to
        update the state.</p>
      example: null
      self: true
      params:
      - name: update
        details: |-
          <p>If given a non function-value, sets the state to that value. If
          given a function, that function receives the previous state and has
          to return the new state.</p>
        example: null
        types:
        - any
        - function
        - state-update
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - state
      name: at
      title: At
      keywords: []
      oneliner: Get the value of the state at the given location.
      element: false
      details: <p>Get the value of the state at the given location.</p>
      example: null
      self: true
      params:
      - name: location
        details: |-
          <p>The location at which the state's value should be retrieved. A
          suitable location can be retrieved from <a href="/docs/reference/introspection/locate/"><code>locate</code></a> or
          <a href="/docs/reference/introspection/query/"><code>query</code></a>.</p>
        example: null
        types:
        - location
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope: []
    - path:
      - state
      name: final
      title: Final
      keywords: []
      oneliner: Get the value of the state at the end of the document.
      element: false
      details: <p>Get the value of the state at the end of the document.</p>
      example: null
      self: true
      params:
      - name: location
        details: |-
          <p>Can be an arbitrary location, as its value is irrelevant for the
          method's return value. Why is it required then? As noted before,
          Typst has to evaluate parts of your code multiple times to determine
          the values of all state. By only allowing this method within
          <a href="/docs/reference/introspection/locate/"><code>locate</code></a> calls, the amount of code that can depend on the
          method's result is reduced. If you could call <code>final</code> directly at
          the top level of a module, the evaluation of the whole module and
          its exports could depend on the state's value.</p>
        example: null
        types:
        - location
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope: []
children: []
