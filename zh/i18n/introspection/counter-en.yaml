route: /docs/reference/introspection/counter/
title: Counter
description: Counter 类型的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: displaying
  name: Displaying
  children: []
- id: modifying
  name: Modifying
  children: []
- id: how-to-step
  name: How To Step
  children: []
- id: page-counter
  name: Page Counter
  children: []
- id: time-travel
  name: Time Travel
  children: []
- id: other-state
  name: Other State
  children: []
- id: constructor
  name: Constructor
  children:
  - id: constructor-key
    name: key
    children: []
- id: definitions
  name: Definitions
  children:
  - id: definitions-display
    name: Display
    children:
    - id: definitions-display-numbering
      name: numbering
      children: []
    - id: definitions-display-both
      name: both
      children: []
  - id: definitions-step
    name: Step
    children:
    - id: definitions-step-level
      name: level
      children: []
  - id: definitions-update
    name: Update
    children:
    - id: definitions-update-update
      name: update
      children: []
  - id: definitions-at
    name: At
    children:
    - id: definitions-at-location
      name: location
      children: []
  - id: definitions-final
    name: Final
    children:
    - id: definitions-final-location
      name: location
      children: []
body:
  kind: type
  content:
    name: counter
    title: Counter
    keywords: []
    oneliner: Counts through pages, elements, and more.
    details: |-
      <p>Counts through pages, elements, and more.</p>
      <p>With the counter function, you can access and modify counters for pages,
      headings, figures, and more. Moreover, you can define custom counters for
      other things you want to count.</p>
      <h2 id="displaying">Displaying a counter</h2>
      <p>To display the current value of the heading counter, you call the <code>counter</code>
      function with the <code>key</code> set to <code>heading</code> and then call the <code>display</code> method
      on the counter. To see any output, you also have to enable heading
      <a href="/docs/reference/model/heading/#parameters-numbering">numbering</a>.</p>
      <p>The <code>display</code> method optionally takes an argument telling it how to format
      the counter. This can be a <a href="/docs/reference/model/numbering/">numbering pattern or a function</a>.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      Some text here.

      <span class="typ-heading">= Background</span>
      The current value is:
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

      Or in roman numerals:
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-str">&quot;I&quot;</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/3c91f06c6e12011f1262a3edaf9de993.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="modifying">Modifying a counter</h2>
      <p>To modify a counter, you can use the <code>step</code> and <code>update</code> methods:</p>
      <ul>
      <li>
      <p>The <code>step</code> method increases the value of the counter by one. Because
      counters can have multiple levels (in the case of headings for sections,
      subsections, and so on), the <code>step</code> method optionally takes a <code>level</code>
      argument. If given, the counter steps at the given depth.</p>
      </li>
      <li>
      <p>The <code>update</code> method allows you to arbitrarily modify the counter. In its
      basic form, you give it an integer (or multiple for multiple levels). For
      more flexibility, you can instead also give it a function that gets the
      current value and returns a new value.</p>
      </li>
      </ul>
      <p>The heading counter is stepped before the heading is displayed, so
      <code>Analysis</code> gets the number seven even though the counter is at six after the
      second update.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Background</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">*</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Analysis</span>
      Let&#39;s skip 7.1.
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

      <span class="typ-heading">== Analysis</span>
      Still at <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>.
      </code></pre><div class="preview"><img src="/assets/docs/dc3be507febcfa78e096b4d4eb924e01.png" alt="Preview" width="480" height="190"/></div></div>
      <p>To define your own counter, call the <code>counter</code> function with a string as a
      key. This key identifies the counter globally.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>c <span class="typ-op">=&gt;</span> c <span class="typ-op">*</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
      </code></pre><div class="preview"><img src="/assets/docs/8d57dcf6f8381bff15ee2ff13bf8bc91.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="how-to-step">How to step</h2>
      <p>When you define and use a custom counter, in general, you should first step
      the counter and then display it. This way, the stepping behaviour of a
      counter can depend on the element it is stepped for. If you were writing a
      counter for, let's say, theorems, your theorem's definition would thus first
      include the counter step and only then display the counter and the theorem's
      contents.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> c <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;theorem&quot;</span><span class="typ-punct">)</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">theorem</span><span class="typ-punct">(</span>it<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">block</span><span class="typ-punct">[</span>
        <span class="typ-pol">#</span><span class="typ-pol">c</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-strong">*Theorem <span class="typ-pol">#</span><span class="typ-pol">c</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>:*</span> <span class="typ-pol">#</span><span class="typ-pol">it</span>
      <span class="typ-punct">]</span>

      <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>1 = 1<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
      <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>2 &lt; 3<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
      </code></pre><div class="preview"><img src="/assets/docs/b97977cf07ea730ac9e00f19761bd36c.png" alt="Preview" width="480" height="190"/></div></div>
      <p>The rationale behind this is best explained on the example of the heading
      counter: An update to the heading counter depends on the heading's level.
      By stepping directly before the heading, we can correctly step from <code>1</code> to
      <code>1.1</code> when encountering a level 2 heading. If we were to step after the
      heading, we wouldn't know what to step to.</p>
      <p>Because counters should always be stepped before the elements they count,
      they always start at zero. This way, they are at one for the first display
      (which happens after the first step).</p>
      <h2 id="page-counter">Page counter</h2>
      <p>The page counter is special. It is automatically stepped at each pagebreak.
      But like other counters, you can also step it manually. For example, you
      could have Roman page numbers for your preface, then switch to Arabic page
      numbers for your main content and reset the page counter to one.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;(i)&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Preface</span>
      The preface is numbered with
      roman numerals.

      <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1 / 1&quot;</span><span class="typ-punct">)</span>
      <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Main text</span>
      Here, the counter is reset to one.
      We also display both the current
      page and total number of pages in
      Arabic numbers.
      </code></pre><div class="preview"><img src="/assets/docs/6e042ee9b3964a4ce84bb21b9ca876e8.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="time-travel">Time travel</h2>
      <p>Counters can travel through time! You can find out the final value of the
      counter before it is reached and even determine what the value was at any
      particular location in the document.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Values</span>
      <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
        <span class="typ-key">let</span> start-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span>
        <span class="typ-key">let</span> elements <span class="typ-op">=</span> <span class="typ-func">query</span><span class="typ-punct">(</span><span class="typ-label">&lt;intro&gt;</span><span class="typ-punct">,</span> loc<span class="typ-punct">)</span>
        <span class="typ-key">let</span> intro-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>
          elements<span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">location</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-punct">)</span>
        <span class="typ-key">let</span> final-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">final</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span>
        <span class="typ-punct">[</span>Starts as: <span class="typ-pol">#</span><span class="typ-pol">start-val</span> <span class="typ-escape">\</span>
         Value at intro is: <span class="typ-pol">#</span><span class="typ-pol">intro-val</span> <span class="typ-escape">\</span>
         Final value is: <span class="typ-pol">#</span><span class="typ-pol">final-val</span> <span class="typ-escape">\</span> <span class="typ-punct">]</span>
      <span class="typ-punct">}</span><span class="typ-punct">)</span>

      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">+</span> <span class="typ-num">3</span><span class="typ-punct">)</span>

      <span class="typ-heading">= Introduction</span> <span class="typ-label">&lt;intro&gt;</span>
      <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span>

      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
      </code></pre><div class="preview"><img src="/assets/docs/2bb4fadda762ecd725b12fa5c261cb7a.png" alt="Preview" width="480" height="190"/></div></div>
      <p>Let's dissect what happens in the example above:</p>
      <ul>
      <li>
      <p>We call <a href="/docs/reference/introspection/locate/"><code>locate</code></a> to get access to the current location in the
      document. We then pass this location to our counter's <code>at</code> method to get
      its value at the current location. The <code>at</code> method always returns an array
      because counters can have multiple levels. As the counter starts at zero,
      the first value is thus <code><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
      </li>
      <li>
      <p>We now <a href="/docs/reference/introspection/query/"><code>query</code></a> the document for all elements with the
      <code><span class="typ-label">&lt;intro&gt;</span></code> label. The result is an array from which we extract the first
      (and only) element's <a href="/docs/reference/foundations/content/#definitions-location">location</a>. We then look up the
      value of the counter at that location. The first update to the counter
      sets it to <code><span class="typ-num">0</span> <span class="typ-op">+</span> <span class="typ-num">3</span> <span class="typ-op">=</span> <span class="typ-num">3</span></code>. At the introduction heading, the value is thus
      <code><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
      </li>
      <li>
      <p>Last but not least, we call the <code>final</code> method on the counter. It tells us
      what the counter's value will be at the end of the document. We also need
      to give it a location to prove that we are inside of a <code>locate</code> call, but
      which one doesn't matter. After the heading follow two calls to <code>step()</code>,
      so the final value is <code><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
      </li>
      </ul>
      <h2 id="other-state">Other kinds of state</h2>
      <p>The <code>counter</code> type is closely related to <a href="/docs/reference/introspection/state/">state</a> type. Read its
      documentation for more details on state management in Typst and why it
      doesn't just use normal variables for counters.</p>
    constructor:
      path: []
      name: counter
      title: Construct
      keywords: []
      oneliner: Create a new counter identified by a key.
      element: false
      details: <p>Create a new counter identified by a key.</p>
      example: null
      self: false
      params:
      - name: key
        details: |-
          <p>The key that identifies this counter.</p>
          <ul>
          <li>If it is a string, creates a custom counter that is only affected
          by manual updates,</li>
          <li>If this is a <code><span class="typ-label">&lt;label&gt;</span></code>, counts through all elements with that
          label,</li>
          <li>If this is an element function or selector, counts through its
          elements,</li>
          <li>If this is the <a href="/docs/reference/layout/page/"><code>page</code></a> function, counts through pages.</li>
          </ul>
        example: null
        types:
        - str
        - label
        - selector
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - counter
      scope: []
    scope:
    - path:
      - counter
      name: display
      title: Display
      keywords: []
      oneliner: Displays the current value of the counter.
      element: false
      details: <p>Displays the current value of the counter.</p>
      example: null
      self: true
      params:
      - name: numbering
        details: |-
          <p>A <a href="/docs/reference/model/numbering/">numbering pattern or a function</a>, which specifies how
          to display the counter. If given a function, that function receives
          each number of the counter as a separate argument. If the amount of
          numbers varies, e.g. for the heading argument, you can use an
          <a href="/docs/reference/foundations/arguments/">argument sink</a>.</p>
          <p>If this is omitted, displays the counter with the numbering style
          for the counted element or with the pattern <code><span class="typ-str">&quot;1.1&quot;</span></code> if no such
          style exists.</p>
        example: null
        types:
        - none
        - str
        - function
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: false
      - name: both
        details: |-
          <p>If enabled, displays the current and final top-level count together.
          Both can be styled through a single numbering pattern. This is used
          by the page numbering property to display the current and total
          number of pages when a pattern like <code><span class="typ-str">&quot;1 / 1&quot;</span></code> is given.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - counter
      name: step
      title: Step
      keywords: []
      oneliner: Increases the value of the counter by one.
      element: false
      details: |-
        <p>Increases the value of the counter by one.</p>
        <p>The update will be in effect at the position where the returned content
        is inserted into the document. If you don't put the output into the
        document, nothing happens! This would be the case, for example, if you
        write <code><span class="typ-key">let</span> _ <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code>. Counter updates are always
        applied in layout order and in that case, Typst wouldn't know when to
        step the counter.</p>
      example: null
      self: true
      params:
      - name: level
        details: <p>The depth at which to step the counter. Defaults to <code><span
          class="typ-num">1</span></code>.</p>
        example: null
        types:
        - int
        strings: []
        default: <code><span class="typ-num">1</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - counter
      name: update
      title: Update
      keywords: []
      oneliner: Updates the value of the counter.
      element: false
      details: |-
        <p>Updates the value of the counter.</p>
        <p>Just like with <code>step</code>, the update only occurs if you put the resulting
        content into the document.</p>
      example: null
      self: true
      params:
      - name: update
        details: |-
          <p>If given an integer or array of integers, sets the counter to that
          value. If given a function, that function receives the previous
          counter value (with each number as a separate argument) and has to
          return the new value (integer or array).</p>
        example: null
        types:
        - int
        - array
        - function
        - counter-update
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
    - path:
      - counter
      name: at
      title: At
      keywords: []
      oneliner: Gets the value of the counter at the given location. Always returns
        an
      element: false
      details: |-
        <p>Gets the value of the counter at the given location. Always returns an
        array of integers, even if the counter has just one number.</p>
      example: null
      self: true
      params:
      - name: location
        details: |-
          <p>The location at which the counter value should be retrieved. A
          suitable location can be retrieved from <a href="/docs/reference/introspection/locate/"><code>locate</code></a> or
          <a href="/docs/reference/introspection/query/"><code>query</code></a>.</p>
        example: null
        types:
        - location
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - array
      scope: []
    - path:
      - counter
      name: final
      title: Final
      keywords: []
      oneliner: Gets the value of the counter at the end of the document. Always returns
      element: false
      details: |-
        <p>Gets the value of the counter at the end of the document. Always returns
        an array of integers, even if the counter has just one number.</p>
      example: null
      self: true
      params:
      - name: location
        details: |-
          <p>Can be an arbitrary location, as its value is irrelevant for the
          method's return value. Why is it required then? Typst has to
          evaluate parts of your code multiple times to determine all counter
          values. By only allowing this method within <a href="/docs/reference/introspection/locate/"><code>locate</code></a>
          calls, the amount of code that can depend on the method's result is
          reduced. If you could call <code>final</code> directly at the top level of a
          module, the evaluation of the whole module and its exports could
          depend on the counter's value.</p>
        example: null
        types:
        - location
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - int
      - array
      scope: []
children: []
