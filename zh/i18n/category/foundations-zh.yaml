route: /docs/reference/foundations/
title: 基础
description: Typst 中与基础有关联的函数族的文档
part: Library
outline:
- id: summary
  name: Summary
  children: []
- id: definitions
  name: Definitions
  children: []
body:
  kind: category
  content:
    name: foundations
    title: 基础
    details: |-
      <p>基础类型和函数。</p>
      <p>在这里，您将找到有关基本数据类型（如 <a href="/docs/reference/foundations/int/">整数</a> 和 <a href="/docs/reference/foundations/str/">字符串</a>）以及核心计算功能的详细信息。</p>
    items:
    - name: arguments
      route: /docs/reference/foundations/arguments/
      oneliner: 捕获到函数的参数。
      code: true
    - name: array
      route: /docs/reference/foundations/array/
      oneliner: 一系列值。
      code: true
    - name: assert
      route: /docs/reference/foundations/assert/
      oneliner: 确保条件得到满足。
      code: true
    - name: bool
      route: /docs/reference/foundations/bool/
      oneliner: 具有两种状态的类型。
      code: true
    - name: bytes
      route: /docs/reference/foundations/bytes/
      oneliner: 字节序列。
      code: true
    - name: calc
      route: /docs/reference/foundations/calc
      oneliner: 用于计算和处理数字值的模块。
      code: false
    - name: content
      route: /docs/reference/foundations/content/
      oneliner: 文档内容的一部分。
      code: true
    - name: datetime
      route: /docs/reference/foundations/datetime/
      oneliner: 表示日期、时间或两者的组合。
      code: true
    - name: dictionary
      route: /docs/reference/foundations/dictionary/
      oneliner: 从字符串键到值的映射。
      code: true
    - name: duration
      route: /docs/reference/foundations/duration/
      oneliner: 表示正或负的时间跨度。
      code: true
    - name: eval
      route: /docs/reference/foundations/eval/
      oneliner: 将字符串作为 Typst 代码进行评估。
      code: true
    - name: float
      route: /docs/reference/foundations/float/
      oneliner: 浮点数。
      code: true
    - name: function
      route: /docs/reference/foundations/function/
      oneliner: 从参数值到返回值的映射。
      code: true
    - name: int
      route: /docs/reference/foundations/int/
      oneliner: 整数。
      code: true
    - name: label
      route: /docs/reference/foundations/label/
      oneliner: 元素的标签。
      code: true
    - name: module
      route: /docs/reference/foundations/module/
      oneliner: 已评估的模块，可以是内置的或来自文件的结果。
      code: true
    - name: panic
      route: /docs/reference/foundations/panic/
      oneliner: 失败并显示错误。
      code: true
    - name: plugin
      route: /docs/reference/foundations/plugin/
      oneliner: WebAssembly 插件。
      code: true
    - name: regex
      route: /docs/reference/foundations/regex/
      oneliner: 正则表达式。
      code: true
    - name: repr
      route: /docs/reference/foundations/repr/
      oneliner: 返回值的字符串表示。
      code: true
    - name: selector
      route: /docs/reference/foundations/selector/
      oneliner: 用于选择文档中的元素的过滤器。
      code: true
    - name: str
      route: /docs/reference/foundations/str/
      oneliner: Unicode 代码点序列。
      code: true
    - name: style
      route: /docs/reference/foundations/style/
      oneliner: 提供对活动样式的访问。
      code: true
    - name: sys
      route: /docs/reference/foundations/sys
      oneliner: 用于系统交互的模块。
      code: false
    - name: type
      route: /docs/reference/foundations/type/
      oneliner: 描述一种值的类型。
      code: true
    - name: version
      route: /docs/reference/foundations/version/
      oneliner: 具有任意数量组件的版本。
      code: true
    shorthands: null
children:
- route: /docs/reference/foundations/arguments/
  title: Arguments
  description: Arguments 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: argument-sinks
    name: Argument Sinks
    children: []
  - id: spreading
    name: Spreading
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-arguments
      name: arguments
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-pos
      name: Positional
      children: []
    - id: definitions-named
      name: Named
      children: []
  body:
    kind: type
    content:
      name: arguments
      title: Arguments
      keywords: []
      oneliner: Captured arguments to a function.
      details: |-
        <p>Captured arguments to a function.</p>
        <h2 id="argument-sinks">Argument Sinks</h2>
        <p>Like built-in functions, custom functions can also take a variable number of
        arguments. You can specify an <em>argument sink</em> which collects all excess
        arguments as <code>..sink</code>. The resulting <code>sink</code> value is of the <code>arguments</code>
        type. It exposes methods to access the positional and named arguments.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">format</span><span class="typ-punct">(</span>title<span class="typ-punct">,</span> <span class="typ-op">..</span>authors<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> by <span class="typ-op">=</span> authors
            <span class="typ-punct">.</span><span class="typ-func">pos</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
            <span class="typ-punct">.</span><span class="typ-func">join</span><span class="typ-punct">(</span><span class="typ-str">&quot;, &quot;</span><span class="typ-punct">,</span> last<span class="typ-punct">:</span> <span class="typ-str">&quot; and &quot;</span><span class="typ-punct">)</span>

          <span class="typ-punct">[</span><span class="typ-strong">*<span class="typ-pol">#</span><span class="typ-pol">title</span>*</span> <span class="typ-escape">\</span> <span class="typ-emph">_Written by <span class="typ-pol">#</span><span class="typ-pol">by</span><span class="typ-punct">;</span>_</span><span class="typ-punct">]</span>
        <span class="typ-punct">}</span>

        <span class="typ-func">#</span><span class="typ-func">format</span><span class="typ-punct">(</span><span class="typ-str">&quot;ArtosFlow&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;Jane&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;Joe&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/439f59288610245855bf05800b913d4d.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="spreading">Spreading</h2>
        <p>Inversely to an argument sink, you can <em>spread</em> arguments, arrays and
        dictionaries into a function call with the <code>..spread</code> operator:</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> array <span class="typ-op">=</span> <span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">min</span><span class="typ-punct">(</span><span class="typ-op">..</span>array<span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> dict <span class="typ-op">=</span> <span class="typ-punct">(</span>fill<span class="typ-punct">:</span> blue<span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span><span class="typ-op">..</span>dict<span class="typ-punct">)</span><span class="typ-punct">[</span>Hello<span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/04f0620d5da19f1f5c378ee48fd9fd5f.png" alt="Preview" width="480" height="190"/></div></div>
      constructor:
        path: []
        name: arguments
        title: Construct
        keywords: []
        oneliner: Construct spreadable arguments in place.
        element: false
        details: |-
          <p>Construct spreadable arguments in place.</p>
          <p>This function behaves like <code><span class="typ-key">let</span> <span class="typ-func">args</span><span class="typ-punct">(</span><span class="typ-op">..</span>sink<span class="typ-punct">)</span> <span class="typ-op">=</span> sink</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> args <span class="typ-op">=</span> <span class="typ-func">arguments</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> red<span class="typ-punct">,</span> inset<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span> <span class="typ-punct">[</span>Body<span class="typ-punct">]</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">box</span><span class="typ-punct">(</span><span class="typ-op">..</span>args<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/64584ee646570236de6d9dd7c3a9a51c.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: arguments
          details: <p>The arguments to construct.</p>
          example: null
          types:
          - arguments
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - arguments
        scope: []
      scope:
      - path:
        - arguments
        name: pos
        title: Positional
        keywords: []
        oneliner: Returns the captured positional arguments as an array.
        element: false
        details: <p>Returns the captured positional arguments as an array.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - arguments
        name: named
        title: Named
        keywords: []
        oneliner: Returns the captured named arguments as a dictionary.
        element: false
        details: <p>Returns the captured named arguments as a dictionary.</p>
        example: null
        self: true
        params: []
        returns:
        - dictionary
        scope: []
  children: []
- route: /docs/reference/foundations/array/
  title: Array
  description: Array 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-value
      name: value
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-len
      name: Length
      children: []
    - id: definitions-first
      name: First
      children: []
    - id: definitions-last
      name: Last
      children: []
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-index
        name: index
        children: []
      - id: definitions-at-default
        name: default
        children: []
    - id: definitions-push
      name: Push
      children:
      - id: definitions-push-value
        name: value
        children: []
    - id: definitions-pop
      name: Pop
      children: []
    - id: definitions-insert
      name: Insert
      children:
      - id: definitions-insert-index
        name: index
        children: []
      - id: definitions-insert-value
        name: value
        children: []
    - id: definitions-remove
      name: Remove
      children:
      - id: definitions-remove-index
        name: index
        children: []
      - id: definitions-remove-default
        name: default
        children: []
    - id: definitions-slice
      name: Slice
      children:
      - id: definitions-slice-start
        name: start
        children: []
      - id: definitions-slice-end
        name: end
        children: []
      - id: definitions-slice-count
        name: count
        children: []
    - id: definitions-contains
      name: Contains
      children:
      - id: definitions-contains-value
        name: value
        children: []
    - id: definitions-find
      name: Find
      children:
      - id: definitions-find-searcher
        name: searcher
        children: []
    - id: definitions-position
      name: Position
      children:
      - id: definitions-position-searcher
        name: searcher
        children: []
    - id: definitions-range
      name: Range
      children:
      - id: definitions-range-start
        name: start
        children: []
      - id: definitions-range-end
        name: end
        children: []
      - id: definitions-range-step
        name: step
        children: []
    - id: definitions-filter
      name: Filter
      children:
      - id: definitions-filter-test
        name: test
        children: []
    - id: definitions-map
      name: Map
      children:
      - id: definitions-map-mapper
        name: mapper
        children: []
    - id: definitions-enumerate
      name: Enumerate
      children:
      - id: definitions-enumerate-start
        name: start
        children: []
    - id: definitions-zip
      name: Zip
      children:
      - id: definitions-zip-others
        name: others
        children: []
    - id: definitions-fold
      name: Fold
      children:
      - id: definitions-fold-init
        name: init
        children: []
      - id: definitions-fold-folder
        name: folder
        children: []
    - id: definitions-sum
      name: Sum
      children:
      - id: definitions-sum-default
        name: default
        children: []
    - id: definitions-product
      name: Product
      children:
      - id: definitions-product-default
        name: default
        children: []
    - id: definitions-any
      name: Any
      children:
      - id: definitions-any-test
        name: test
        children: []
    - id: definitions-all
      name: All
      children:
      - id: definitions-all-test
        name: test
        children: []
    - id: definitions-flatten
      name: Flatten
      children: []
    - id: definitions-rev
      name: Reverse
      children: []
    - id: definitions-split
      name: Split
      children:
      - id: definitions-split-at
        name: at
        children: []
    - id: definitions-join
      name: Join
      children:
      - id: definitions-join-separator
        name: separator
        children: []
      - id: definitions-join-last
        name: last
        children: []
    - id: definitions-intersperse
      name: Intersperse
      children:
      - id: definitions-intersperse-separator
        name: separator
        children: []
    - id: definitions-sorted
      name: Sorted
      children:
      - id: definitions-sorted-key
        name: key
        children: []
    - id: definitions-dedup
      name: Deduplicate
      children:
      - id: definitions-dedup-key
        name: key
        children: []
  body:
    kind: type
    content:
      name: array
      title: Array
      keywords: []
      oneliner: A sequence of values.
      details: |-
        <p>A sequence of values.</p>
        <p>You can construct an array by enclosing a comma-separated sequence of values
        in parentheses. The values do not have to be of the same type.</p>
        <p>You can access and update array items with the <code>.at()</code> method. Indices are
        zero-based and negative indices wrap around to the end of the array. You can
        iterate over an array using a <a href="/docs/reference/scripting/#loops">for loop</a>. Arrays can be
        added together with the <code>+</code> operator, <a href="/docs/reference/scripting/#blocks">joined together</a>
        and multiplied with integers.</p>
        <p><strong>Note:</strong> An array of length one needs a trailing comma, as in <code><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.
        This is to disambiguate from a simple parenthesized expressions like <code><span class="typ-punct">(</span><span class="typ-num">1</span> <span class="typ-op">+</span> <span class="typ-num">2</span><span class="typ-punct">)</span> <span class="typ-op">*</span> <span class="typ-num">3</span></code>. An empty array is written as <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> values <span class="typ-op">=</span> <span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

        <span class="typ-pol">#</span><span class="typ-pol">values</span><span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span>values<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">values</span><span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">values</span><span class="typ-punct">.</span><span class="typ-func">find</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>even<span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">values</span><span class="typ-punct">.</span><span class="typ-func">filter</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>odd<span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">values</span><span class="typ-punct">.</span><span class="typ-func">map</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>abs<span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">values</span><span class="typ-punct">.</span><span class="typ-func">rev</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">flatten</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-str">&quot;A&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;B&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;C&quot;</span><span class="typ-punct">)</span>
            <span class="typ-punct">.</span><span class="typ-func">join</span><span class="typ-punct">(</span><span class="typ-str">&quot;, &quot;</span><span class="typ-punct">,</span> last<span class="typ-punct">:</span> <span class="typ-str">&quot; and &quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/182d67dd4be81b1f5f9acd21533c778c.png" alt="Preview" width="480" height="190"/></div></div>
      constructor:
        path: []
        name: array
        title: Construct
        keywords: []
        oneliner: Converts a value to an array.
        element: false
        details: |-
          <p>Converts a value to an array.</p>
          <p>Note that this function is only intended for conversion of a collection-like
          value to an array, not for creation of an array from individual items. Use
          the array syntax <code>(1, 2, 3)</code> (or <code>(1,)</code> for a single-element array) instead.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> hi <span class="typ-op">=</span> <span class="typ-str">&quot;Hello 😃&quot;</span>
          <span class="typ-func">#</span><span class="typ-func">array</span><span class="typ-punct">(</span><span class="typ-func">bytes</span><span class="typ-punct">(</span>hi<span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/966865dc3fc32c177e9cdbc58f5b3a44.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The value that should be converted to an array.</p>
          example: null
          types:
          - bytes
          - array
          - version
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      scope:
      - path:
        - array
        name: len
        title: Length
        keywords: []
        oneliner: The number of values in the array.
        element: false
        details: <p>The number of values in the array.</p>
        example: null
        self: true
        params: []
        returns:
        - int
        scope: []
      - path:
        - array
        name: first
        title: First
        keywords: []
        oneliner: Returns the first item in the array. May be used on the left-hand
          side
        element: false
        details: |-
          <p>Returns the first item in the array. May be used on the left-hand side
          of an assignment. Fails with an error if the array is empty.</p>
        example: null
        self: true
        params: []
        returns:
        - any
        scope: []
      - path:
        - array
        name: last
        title: Last
        keywords: []
        oneliner: Returns the last item in the array. May be used on the left-hand
          side of
        element: false
        details: |-
          <p>Returns the last item in the array. May be used on the left-hand side of
          an assignment. Fails with an error if the array is empty.</p>
        example: null
        self: true
        params: []
        returns:
        - any
        scope: []
      - path:
        - array
        name: at
        title: At
        keywords: []
        oneliner: Returns the item at the specified index in the array. May be used
          on the
        element: false
        details: |-
          <p>Returns the item at the specified index in the array. May be used on the
          left-hand side of an assignment. Returns the default value if the index
          is out of bounds or fails with an error if no default value was
          specified.</p>
        example: null
        self: true
        params:
        - name: index
          details: |-
            <p>The index at which to retrieve the item. If negative, indexes from
            the back.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: default
          details: <p>A default value to return if the index is out of bounds.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - array
        name: push
        title: Push
        keywords: []
        oneliner: Adds a value to the end of the array.
        element: false
        details: <p>Adds a value to the end of the array.</p>
        example: null
        self: true
        params:
        - name: value
          details: <p>The value to insert at the end of the array.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns: []
        scope: []
      - path:
        - array
        name: pop
        title: Pop
        keywords: []
        oneliner: Removes the last item from the array and returns it. Fails with
          an error
        element: false
        details: |-
          <p>Removes the last item from the array and returns it. Fails with an error
          if the array is empty.</p>
        example: null
        self: true
        params: []
        returns:
        - any
        scope: []
      - path:
        - array
        name: insert
        title: Insert
        keywords: []
        oneliner: Inserts a value into the array at the specified index. Fails with
          an
        element: false
        details: |-
          <p>Inserts a value into the array at the specified index. Fails with an
          error if the index is out of bounds.</p>
        example: null
        self: true
        params:
        - name: index
          details: |-
            <p>The index at which to insert the item. If negative, indexes from
            the back.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: value
          details: <p>The value to insert into the array.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns: []
        scope: []
      - path:
        - array
        name: remove
        title: Remove
        keywords: []
        oneliner: Removes the value at the specified index from the array and return
          it.
        element: false
        details: <p>Removes the value at the specified index from the array and return
          it.</p>
        example: null
        self: true
        params:
        - name: index
          details: |-
            <p>The index at which to remove the item. If negative, indexes from
            the back.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: default
          details: <p>A default value to return if the index is out of bounds.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - array
        name: slice
        title: Slice
        keywords: []
        oneliner: Extracts a subslice of the array. Fails with an error if the start
          or
        element: false
        details: |-
          <p>Extracts a subslice of the array. Fails with an error if the start or
          index is out of bounds.</p>
        example: null
        self: true
        params:
        - name: start
          details: <p>The start index (inclusive). If negative, indexes from the back.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: end
          details: |-
            <p>The end index (exclusive). If omitted, the whole slice until the end
            of the array is extracted. If negative, indexes from the back.</p>
          example: null
          types:
          - none
          - int
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: count
          details: |-
            <p>The number of items to extract. This is equivalent to passing
            <code>start + count</code> as the <code>end</code> position. Mutually exclusive with <code>end</code>.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: contains
        title: Contains
        keywords: []
        oneliner: Whether the array contains the specified value.
        element: false
        details: |-
          <p>Whether the array contains the specified value.</p>
          <p>This method also has dedicated syntax: You can write <code><span class="typ-num">2</span> <span class="typ-key">in</span> <span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span></code>
          instead of <code><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">contains</span><span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">)</span></code>.</p>
        example: null
        self: true
        params:
        - name: value
          details: <p>The value to search for.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - array
        name: find
        title: Find
        keywords: []
        oneliner: Searches for an item for which the given function returns `{true}`
          and
        element: false
        details: |-
          <p>Searches for an item for which the given function returns <code><span class="typ-key">true</span></code> and
          returns the first match or <code><span class="typ-key">none</span></code> if there is no match.</p>
        example: null
        self: true
        params:
        - name: searcher
          details: <p>The function to apply to each item. Must return a boolean.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        - none
        scope: []
      - path:
        - array
        name: position
        title: Position
        keywords: []
        oneliner: Searches for an item for which the given function returns `{true}`
          and
        element: false
        details: |-
          <p>Searches for an item for which the given function returns <code><span class="typ-key">true</span></code> and
          returns the index of the first match or <code><span class="typ-key">none</span></code> if there is no match.</p>
        example: null
        self: true
        params:
        - name: searcher
          details: <p>The function to apply to each item. Must return a boolean.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - none
        - int
        scope: []
      - path:
        - array
        name: range
        title: Range
        keywords: []
        oneliner: Create an array consisting of a sequence of numbers.
        element: false
        details: |-
          <p>Create an array consisting of a sequence of numbers.</p>
          <p>If you pass just one positional parameter, it is interpreted as the
          <code>end</code> of the range. If you pass two, they describe the <code>start</code> and <code>end</code>
          of the range.</p>
          <p>This function is available both in the array function's scope and
          globally.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">20</span><span class="typ-punct">,</span> step<span class="typ-punct">:</span> <span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">21</span><span class="typ-punct">,</span> step<span class="typ-punct">:</span> <span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> step<span class="typ-punct">:</span> <span class="typ-op">-</span><span class="typ-num">1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/8c22c32e6542dd111cd40f804f2b012a.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: start
          details: <p>The start of the range (inclusive).</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: end
          details: <p>The end of the range (exclusive).</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: step
          details: <p>The distance between the generated numbers.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">1</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: filter
        title: Filter
        keywords: []
        oneliner: Produces a new array with only the items from the original one for
          which
        element: false
        details: |-
          <p>Produces a new array with only the items from the original one for which
          the given function returns true.</p>
        example: null
        self: true
        params:
        - name: test
          details: <p>The function to apply to each item. Must return a boolean.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: map
        title: Map
        keywords: []
        oneliner: Produces a new array in which all items from the original one were
        element: false
        details: |-
          <p>Produces a new array in which all items from the original one were
          transformed with the given function.</p>
        example: null
        self: true
        params:
        - name: mapper
          details: <p>The function to apply to each item.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: enumerate
        title: Enumerate
        keywords: []
        oneliner: Returns a new array with the values alongside their indices.
        element: false
        details: |-
          <p>Returns a new array with the values alongside their indices.</p>
          <p>The returned array consists of <code>(index, value)</code> pairs in the form of
          length-2 arrays. These can be <a href="/docs/reference/scripting/#bindings">destructured</a> with
          a let binding or for loop.</p>
        example: null
        self: true
        params:
        - name: start
          details: <p>The index returned for the first pair of the returned list.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: zip
        title: Zip
        keywords: []
        oneliner: Zips the array with other arrays.
        element: false
        details: |-
          <p>Zips the array with other arrays.</p>
          <p>Returns an array of arrays, where the <code>i</code>th inner array contains all the
          <code>i</code>th elements from each original array.</p>
          <p>If the arrays to be zipped have different lengths, they are zipped up to
          the last element of the shortest array and all remaining elements are
          ignored.</p>
          <p>This function is variadic, meaning that you can zip multiple arrays
          together at once: <code><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">zip</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-str">&quot;A&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;B&quot;</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">,</span> <span class="typ-num">20</span><span class="typ-punct">)</span><span class="typ-punct">)</span></code> yields
          <code><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-str">&quot;A&quot;</span><span class="typ-punct">,</span> <span class="typ-num">10</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-str">&quot;B&quot;</span><span class="typ-punct">,</span> <span class="typ-num">20</span><span class="typ-punct">)</span><span class="typ-punct">)</span></code>.</p>
        example: null
        self: true
        params:
        - name: others
          details: <p>The arrays to zip with.</p>
          example: null
          types:
          - array
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: fold
        title: Fold
        keywords: []
        oneliner: Folds all items into a single value using an accumulator function.
        element: false
        details: <p>Folds all items into a single value using an accumulator function.</p>
        example: null
        self: true
        params:
        - name: init
          details: <p>The initial value to start with.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: folder
          details: |-
            <p>The folding function. Must have two parameters: One for the
            accumulated value and one for an item.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - array
        name: sum
        title: Sum
        keywords: []
        oneliner: Sums all items (works for all types that can be added).
        element: false
        details: <p>Sums all items (works for all types that can be added).</p>
        example: null
        self: true
        params:
        - name: default
          details: |-
            <p>What to return if the array is empty. Must be set if the array can
            be empty.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - array
        name: product
        title: Product
        keywords: []
        oneliner: Calculates the product all items (works for all types that can be
        element: false
        details: |-
          <p>Calculates the product all items (works for all types that can be
          multiplied).</p>
        example: null
        self: true
        params:
        - name: default
          details: |-
            <p>What to return if the array is empty. Must be set if the array can
            be empty.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - array
        name: any
        title: Any
        keywords: []
        oneliner: Whether the given function returns `{true}` for any item in the
          array.
        element: false
        details: <p>Whether the given function returns <code><span class="typ-key">true</span></code>
          for any item in the array.</p>
        example: null
        self: true
        params:
        - name: test
          details: <p>The function to apply to each item. Must return a boolean.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - array
        name: all
        title: All
        keywords: []
        oneliner: Whether the given function returns `{true}` for all items in the
          array.
        element: false
        details: <p>Whether the given function returns <code><span class="typ-key">true</span></code>
          for all items in the array.</p>
        example: null
        self: true
        params:
        - name: test
          details: <p>The function to apply to each item. Must return a boolean.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - array
        name: flatten
        title: Flatten
        keywords: []
        oneliner: Combine all nested arrays into a single flat one.
        element: false
        details: <p>Combine all nested arrays into a single flat one.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - array
        name: rev
        title: Reverse
        keywords: []
        oneliner: Return a new array with the same items, but in reverse order.
        element: false
        details: <p>Return a new array with the same items, but in reverse order.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - array
        name: split
        title: Split
        keywords: []
        oneliner: Split the array at occurrences of the specified value.
        element: false
        details: <p>Split the array at occurrences of the specified value.</p>
        example: null
        self: true
        params:
        - name: at
          details: <p>The value to split at.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: join
        title: Join
        keywords: []
        oneliner: Combine all items in the array into one.
        element: false
        details: <p>Combine all items in the array into one.</p>
        example: null
        self: true
        params:
        - name: separator
          details: <p>A value to insert between each item of the array.</p>
          example: null
          types:
          - any
          - none
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: last
          details: <p>An alternative separator between the last two items.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - array
        name: intersperse
        title: Intersperse
        keywords: []
        oneliner: Returns an array with a copy of the separator value placed between
        element: false
        details: |-
          <p>Returns an array with a copy of the separator value placed between
          adjacent elements.</p>
        example: null
        self: true
        params:
        - name: separator
          details: <p>The value that will be placed between each adjacent element.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: sorted
        title: Sorted
        keywords: []
        oneliner: Return a sorted version of this array, optionally by a given key
        element: false
        details: |-
          <p>Return a sorted version of this array, optionally by a given key
          function. The sorting algorithm used is stable.</p>
          <p>Returns an error if two values could not be compared or if the key
          function (if given) yields an error.</p>
        example: null
        self: true
        params:
        - name: key
          details: |-
            <p>If given, applies this function to the elements in the array to
            determine the keys to sort by.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - array
        name: dedup
        title: Deduplicate
        keywords: []
        oneliner: Deduplicates all items in the array.
        element: false
        details: |-
          <p>Deduplicates all items in the array.</p>
          <p>Returns a new array with all duplicate items removed. Only the first
          element of each duplicate is kept.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">dedup</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/7b1f8e83e709d88c679c704fafc49c4b.png" alt="Preview" width="480" height="190"/></div></div>
        self: true
        params:
        - name: key
          details: |-
            <p>If given, applies this function to the elements in the array to
            determine the keys to deduplicate by.</p>
          example: null
          types:
          - function
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
  children: []
- route: /docs/reference/foundations/assert/
  title: Assert
  description: '`assert` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-condition
      name: condition
      children: []
    - id: parameters-message
      name: message
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-eq
      name: Assert Equal
      children:
      - id: definitions-eq-left
        name: left
        children: []
      - id: definitions-eq-right
        name: right
        children: []
      - id: definitions-eq-message
        name: message
        children: []
    - id: definitions-ne
      name: Assert Not Equal
      children:
      - id: definitions-ne-left
        name: left
        children: []
      - id: definitions-ne-right
        name: right
        children: []
      - id: definitions-ne-message
        name: message
        children: []
  body:
    kind: func
    content:
      path: []
      name: assert
      title: Assert
      keywords: []
      oneliner: Ensures that a condition is fulfilled.
      element: false
      details: |-
        <p>Ensures that a condition is fulfilled.</p>
        <p>Fails with an error if the condition is not fulfilled. Does not
        produce any output in the document.</p>
        <p>If you wish to test equality between two values, see
        <a href="/docs/reference/foundations/assert/#definitions-eq"><code>assert.eq</code></a> and <a href="/docs/reference/foundations/assert/#definitions-ne"><code>assert.ne</code></a>.</p>
        <h2 id="example">Example</h2>
        <pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span><span class="typ-num">1</span> <span class="typ-op">&lt;</span> <span class="typ-num">2</span><span class="typ-punct">,</span> message<span class="typ-punct">:</span> <span class="typ-str">&quot;math broke&quot;</span><span class="typ-punct">)</span>
        </code></pre>
      example: null
      self: false
      params:
      - name: condition
        details: <p>The condition that must be true for the assertion to pass.</p>
        example: null
        types:
        - bool
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: message
        details: <p>The error message when the assertion fails.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns: []
      scope:
      - path:
        - assert
        name: eq
        title: Assert Equal
        keywords: []
        oneliner: Ensures that two values are equal.
        element: false
        details: |-
          <p>Ensures that two values are equal.</p>
          <p>Fails with an error if the first value is not equal to the second. Does not
          produce any output in the document.</p>
        example: |-
          <pre><code><span class="typ-pol">#</span><span class="typ-pol">assert</span><span class="typ-punct">.</span><span class="typ-func">eq</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">,</span> <span class="typ-num">10</span><span class="typ-punct">)</span>
          </code></pre>
        self: false
        params:
        - name: left
          details: <p>The first value to compare.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: right
          details: <p>The second value to compare.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: message
          details: |-
            <p>An optional message to display on error instead of the representations
            of the compared values.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns: []
        scope: []
      - path:
        - assert
        name: ne
        title: Assert Not Equal
        keywords: []
        oneliner: Ensures that two values are not equal.
        element: false
        details: |-
          <p>Ensures that two values are not equal.</p>
          <p>Fails with an error if the first value is equal to the second. Does not
          produce any output in the document.</p>
        example: |-
          <pre><code><span class="typ-pol">#</span><span class="typ-pol">assert</span><span class="typ-punct">.</span><span class="typ-func">ne</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
          </code></pre>
        self: false
        params:
        - name: left
          details: <p>The first value to compare.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: right
          details: <p>The second value to compare.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: message
          details: |-
            <p>An optional message to display on error instead of the representations
            of the compared values.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns: []
        scope: []
  children: []
- route: /docs/reference/foundations/bool/
  title: Boolean
  description: Boolean 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  body:
    kind: type
    content:
      name: bool
      title: Boolean
      keywords: []
      oneliner: A type with two states.
      details: |-
        <p>A type with two states.</p>
        <p>The boolean type has two values: <code><span class="typ-key">true</span></code> and <code><span class="typ-key">false</span></code>. It denotes whether
        something is active or enabled.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">false</span> <span class="typ-escape">\</span>
        <span class="typ-key">#</span><span class="typ-key">true</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">1</span> <span class="typ-op">&lt;</span> <span class="typ-num">2</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e083f07a5bf8e52b3787f067e92c12fa.png" alt="Preview" width="480" height="190"/></div></div>
      constructor: null
      scope: []
  children: []
- route: /docs/reference/foundations/bytes/
  title: Bytes
  description: Bytes 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-value
      name: value
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-len
      name: Length
      children: []
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-index
        name: index
        children: []
      - id: definitions-at-default
        name: default
        children: []
    - id: definitions-slice
      name: Slice
      children:
      - id: definitions-slice-start
        name: start
        children: []
      - id: definitions-slice-end
        name: end
        children: []
      - id: definitions-slice-count
        name: count
        children: []
  body:
    kind: type
    content:
      name: bytes
      title: Bytes
      keywords: []
      oneliner: A sequence of bytes.
      details: |-
        <p>A sequence of bytes.</p>
        <p>This is conceptually similar to an array of <a href="/docs/reference/foundations/int/">integers</a> between <code><span class="typ-num">0</span></code>
        and <code><span class="typ-num">255</span></code>, but represented much more efficiently.</p>
        <p>You can convert</p>
        <ul>
        <li>a <a href="/docs/reference/foundations/str/">string</a> or an <a href="/docs/reference/foundations/array/">array</a> of integers to bytes with the
        <a href="/docs/reference/foundations/bytes/"><code>bytes</code></a> constructor</li>
        <li>bytes to a string with the <a href="/docs/reference/foundations/str/"><code>str</code></a> constructor</li>
        <li>bytes to an array of integers with the <a href="/docs/reference/foundations/array/"><code>array</code></a> constructor</li>
        </ul>
        <p>When <a href="/docs/reference/data-loading/read/">reading</a> data from a file, you can decide whether to load it
        as a string or as raw bytes.</p>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">123</span><span class="typ-punct">,</span> <span class="typ-num">160</span><span class="typ-punct">,</span> <span class="typ-num">22</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-str">&quot;Hello 😃&quot;</span><span class="typ-punct">)</span>

        <span class="typ-key">#</span><span class="typ-key">let</span> data <span class="typ-op">=</span> <span class="typ-func">read</span><span class="typ-punct">(</span>
          <span class="typ-str">&quot;rhino.png&quot;</span><span class="typ-punct">,</span>
          encoding<span class="typ-punct">:</span> <span class="typ-key">none</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-comment">// Magic bytes.</span>
        <span class="typ-func">#</span><span class="typ-func">array</span><span class="typ-punct">(</span>data<span class="typ-punct">.</span><span class="typ-func">slice</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span>data<span class="typ-punct">.</span><span class="typ-func">slice</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/3dd79fbeed81ba0714b8d1394002e893.png" alt="Preview" width="480" height="190"/></div></div>
      constructor:
        path: []
        name: bytes
        title: Construct
        keywords: []
        oneliner: Converts a value to bytes.
        element: false
        details: |-
          <p>Converts a value to bytes.</p>
          <ul>
          <li>Strings are encoded in UTF-8.</li>
          <li>Arrays of integers between <code><span class="typ-num">0</span></code> and <code><span class="typ-num">255</span></code> are converted directly. The
          dedicated byte representation is much more efficient than the array
          representation and thus typically used for large byte buffers (e.g. image
          data).</li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-str">&quot;Hello 😃&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">bytes</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">123</span><span class="typ-punct">,</span> <span class="typ-num">160</span><span class="typ-punct">,</span> <span class="typ-num">22</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e645daac1928809c44129c626541e29b.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The value that should be converted to bytes.</p>
          example: null
          types:
          - str
          - bytes
          - array
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bytes
        scope: []
      scope:
      - path:
        - bytes
        name: len
        title: Length
        keywords: []
        oneliner: The length in bytes.
        element: false
        details: <p>The length in bytes.</p>
        example: null
        self: true
        params: []
        returns:
        - int
        scope: []
      - path:
        - bytes
        name: at
        title: At
        keywords: []
        oneliner: Returns the byte at the specified index. Returns the default value
          if
        element: false
        details: |-
          <p>Returns the byte at the specified index. Returns the default value if
          the index is out of bounds or fails with an error if no default value
          was specified.</p>
        example: null
        self: true
        params:
        - name: index
          details: <p>The index at which to retrieve the byte.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: default
          details: <p>A default value to return if the index is out of bounds.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - bytes
        name: slice
        title: Slice
        keywords: []
        oneliner: Extracts a subslice of the bytes. Fails with an error if the start
          or
        element: false
        details: |-
          <p>Extracts a subslice of the bytes. Fails with an error if the start or
          index is out of bounds.</p>
        example: null
        self: true
        params:
        - name: start
          details: <p>The start index (inclusive).</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: end
          details: |-
            <p>The end index (exclusive). If omitted, the whole slice until the end
            is extracted.</p>
          example: null
          types:
          - none
          - int
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: count
          details: |-
            <p>The number of items to extract. This is equivalent to passing
            <code>start + count</code> as the <code>end</code> position. Mutually exclusive with
            <code>end</code>.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - bytes
        scope: []
  children: []
- route: /docs/reference/foundations/content/
  title: Content
  description: Content 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: representation
    name: Representation
    children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-func
      name: Func
      children: []
    - id: definitions-has
      name: Has
      children:
      - id: definitions-has-field
        name: field
        children: []
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-field
        name: field
        children: []
      - id: definitions-at-default
        name: default
        children: []
    - id: definitions-fields
      name: Fields
      children: []
    - id: definitions-location
      name: Location
      children: []
  body:
    kind: type
    content:
      name: content
      title: Content
      keywords: []
      oneliner: A piece of document content.
      details: |-
        <p>A piece of document content.</p>
        <p>This type is at the heart of Typst. All markup you write and most
        <a href="/docs/reference/foundations/function/">functions</a> you call produce content values. You can create a
        content value by enclosing markup in square brackets. This is also how you
        pass content to functions.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>Type of <span class="typ-strong">*Hello!*</span> is
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-punct">[</span><span class="typ-strong">*Hello!*</span><span class="typ-punct">]</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/64eaae4e748f023f862d67eefe92c962.png" alt="Preview" width="480" height="190"/></div></div>
        <p>Content can be added with the <code>+</code> operator,
        <a href="/docs/reference/scripting/#blocks">joined together</a> and multiplied with integers. Wherever
        content is expected, you can also pass a <a href="/docs/reference/foundations/str/">string</a> or <code><span class="typ-key">none</span></code>.</p>
        <h2 id="representation">Representation</h2>
        <p>Content consists of elements with fields. When constructing an element with
        its <em>element function,</em> you provide these fields as arguments and when you
        have a content value, you can access its fields with <a href="/docs/reference/scripting/#field-access">field access
        syntax</a>.</p>
        <p>Some fields are required: These must be provided when constructing an
        element and as a consequence, they are always available through field access
        on content of that type. Required fields are marked as such in the
        documentation.</p>
        <p>Most fields are optional: Like required fields, they can be passed to the
        element function to configure them for a single element. However, these can
        also be configured with <a href="/docs/reference/styling/#set-rules">set rules</a> to apply them to
        all elements within a scope. Optional fields are only available with field
        access syntax when they were explicitly passed to the element function, not
        when they result from a set rule.</p>
        <p>Each element has a default appearance. However, you can also completely
        customize its appearance with a <a href="/docs/reference/styling/#show-rules">show rule</a>. The show
        rule is passed the element. It can access the element's field and produce
        arbitrary content from it.</p>
        <p>In the web app, you can hover over a content variable to see exactly which
        elements the content is composed of and what fields they have.
        Alternatively, you can inspect the output of the <a href="/docs/reference/foundations/repr/"><code>repr</code></a> function.</p>
      constructor: null
      scope:
      - path:
        - content
        name: func
        title: Func
        keywords: []
        oneliner: The content's element function. This function can be used to create
          the element
        element: false
        details: |-
          <p>The content's element function. This function can be used to create the element
          contained in this content. It can be used in set and show rules for the
          element. Can be compared with global functions to check whether you have
          a specific
          kind of element.</p>
        example: null
        self: true
        params: []
        returns:
        - function
        scope: []
      - path:
        - content
        name: has
        title: Has
        keywords: []
        oneliner: Whether the content has the specified field.
        element: false
        details: <p>Whether the content has the specified field.</p>
        example: null
        self: true
        params:
        - name: field
          details: <p>The field to look for.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - content
        name: at
        title: At
        keywords: []
        oneliner: Access the specified field on the content. Returns the default value
          if
        element: false
        details: |-
          <p>Access the specified field on the content. Returns the default value if
          the field does not exist or fails with an error if no default value was
          specified.</p>
        example: null
        self: true
        params:
        - name: field
          details: <p>The field to access.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: default
          details: <p>A default value to return if the field does not exist.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - content
        name: fields
        title: Fields
        keywords: []
        oneliner: Returns the fields of this content.
        element: false
        details: <p>Returns the fields of this content.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>
            width<span class="typ-punct">:</span> <span class="typ-num">10cm</span><span class="typ-punct">,</span>
            height<span class="typ-punct">:</span> <span class="typ-num">10cm</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">fields</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/2fcad849f627fe8fa71093228440cda3.png" alt="Preview" width="480" height="190"/></div></div>
        self: true
        params: []
        returns:
        - dictionary
        scope: []
      - path:
        - content
        name: location
        title: Location
        keywords: []
        oneliner: The location of the content. This is only available on content returned
        element: false
        details: |-
          <p>The location of the content. This is only available on content returned
          by <a href="/docs/reference/introspection/query/">query</a> or provided by a
          <a href="/docs/reference/styling/#show-rules">show rule</a>, for other content it will
          be <code><span class="typ-key">none</span></code>. The resulting location can be used with
          <a href="/docs/reference/introspection/counter/">counters</a>, <a href="/docs/reference/introspection/state/">state</a> and <a href="/docs/reference/introspection/query/">queries</a>.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - location
        scope: []
  children: []
- route: /docs/reference/foundations/datetime/
  title: Datetime
  description: Datetime 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: format
    name: Format
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-year
      name: year
      children: []
    - id: constructor-month
      name: month
      children: []
    - id: constructor-day
      name: day
      children: []
    - id: constructor-hour
      name: hour
      children: []
    - id: constructor-minute
      name: minute
      children: []
    - id: constructor-second
      name: second
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-today
      name: Today
      children:
      - id: definitions-today-offset
        name: offset
        children: []
    - id: definitions-display
      name: Display
      children:
      - id: definitions-display-pattern
        name: pattern
        children: []
    - id: definitions-year
      name: Year
      children: []
    - id: definitions-month
      name: Month
      children: []
    - id: definitions-weekday
      name: Weekday
      children: []
    - id: definitions-day
      name: Day
      children: []
    - id: definitions-hour
      name: Hour
      children: []
    - id: definitions-minute
      name: Minute
      children: []
    - id: definitions-second
      name: Second
      children: []
    - id: definitions-ordinal
      name: Ordinal
      children: []
  body:
    kind: type
    content:
      name: datetime
      title: Datetime
      keywords: []
      oneliner: Represents a date, a time, or a combination of both.
      details: |-
        <p>Represents a date, a time, or a combination of both.</p>
        <p>Can be created by either specifying a custom datetime using this type's
        constructor function or getting the current date with
        <a href="/docs/reference/foundations/datetime/#definitions-today"><code>datetime.today</code></a>.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> date <span class="typ-op">=</span> <span class="typ-func">datetime</span><span class="typ-punct">(</span>
          year<span class="typ-punct">:</span> <span class="typ-num">2020</span><span class="typ-punct">,</span>
          month<span class="typ-punct">:</span> <span class="typ-num">10</span><span class="typ-punct">,</span>
          day<span class="typ-punct">:</span> <span class="typ-num">4</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-pol">#</span><span class="typ-pol">date</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">date</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span>
          <span class="typ-str">&quot;y:[year repr:last_two]&quot;</span>
        <span class="typ-punct">)</span>

        <span class="typ-key">#</span><span class="typ-key">let</span> time <span class="typ-op">=</span> <span class="typ-func">datetime</span><span class="typ-punct">(</span>
          hour<span class="typ-punct">:</span> <span class="typ-num">18</span><span class="typ-punct">,</span>
          minute<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">,</span>
          second<span class="typ-punct">:</span> <span class="typ-num">23</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-pol">#</span><span class="typ-pol">time</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">time</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span>
          <span class="typ-str">&quot;h:[hour repr:12][period]&quot;</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/c7feef8e99a37cb24589ba0f7c6af3c0.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="format">Format</h2>
        <p>You can specify a customized formatting using the
        <a href="/docs/reference/foundations/datetime/#definitions-display"><code>display</code></a> method. The format of a datetime is
        specified by providing <em>components</em> with a specified number of <em>modifiers</em>.
        A component represents a certain part of the datetime that you want to
        display, and with the help of modifiers you can define how you want to
        display that component. In order to display a component, you wrap the name
        of the component in square brackets (e.g. <code>[year]</code> will display the year).
        In order to add modifiers, you add a space after the component name followed
        by the name of the modifier, a colon and the value of the modifier (e.g.
        <code>[month repr:short]</code> will display the short representation of the month).</p>
        <p>The possible combination of components and their respective modifiers is as
        follows:</p>
        <ul>
        <li><code>year</code>: Displays the year of the datetime.
        <ul>
        <li><code>padding</code>: Can be either <code>zero</code>, <code>space</code> or <code>none</code>. Specifies how the
        year is padded.</li>
        <li><code>repr</code> Can be either <code>full</code> in which case the full year is displayed or
        <code>last_two</code> in which case only the last two digits are displayed.</li>
        <li><code>sign</code>: Can be either <code>automatic</code> or <code>mandatory</code>. Specifies when the
        sign should be displayed.</li>
        </ul>
        </li>
        <li><code>month</code>: Displays the month of the datetime.
        <ul>
        <li><code>padding</code>: Can be either <code>zero</code>, <code>space</code> or <code>none</code>. Specifies how the
        month is padded.</li>
        <li><code>repr</code>: Can be either <code>numerical</code>, <code>long</code> or <code>short</code>. Specifies if the
        month should be displayed as a number or a word. Unfortunately, when
        choosing the word representation, it can currently only display the
        English version. In the future, it is planned to support localization.</li>
        </ul>
        </li>
        <li><code>day</code>: Displays the day of the datetime.
        <ul>
        <li><code>padding</code>: Can be either <code>zero</code>, <code>space</code> or <code>none</code>. Specifies how the
        day is padded.</li>
        </ul>
        </li>
        <li><code>week_number</code>: Displays the week number of the datetime.
        <ul>
        <li><code>padding</code>: Can be either <code>zero</code>, <code>space</code> or <code>none</code>. Specifies how the
        week number is padded.</li>
        <li><code>repr</code>: Can be either <code>ISO</code>, <code>sunday</code> or <code>monday</code>. In the case of <code>ISO</code>,
        week numbers are between 1 and 53, while the other ones are between 0
        and 53.</li>
        </ul>
        </li>
        <li><code>weekday</code>: Displays the weekday of the date.
        <ul>
        <li><code>repr</code> Can be either <code>long</code>, <code>short</code>, <code>sunday</code> or <code>monday</code>. In the case
        of <code>long</code> and <code>short</code>, the corresponding English name will be displayed
        (same as for the month, other languages are currently not supported). In
        the case of <code>sunday</code> and <code>monday</code>, the numerical value will be displayed
        (assuming Sunday and Monday as the first day of the week, respectively).</li>
        <li><code>one_indexed</code>: Can be either <code>true</code> or <code>false</code>. Defines whether the
        numerical representation of the week starts with 0 or 1.</li>
        </ul>
        </li>
        <li><code>hour</code>: Displays the hour of the date.
        <ul>
        <li><code>padding</code>: Can be either <code>zero</code>, <code>space</code> or <code>none</code>. Specifies how the
        hour is padded.</li>
        <li><code>repr</code>: Can be either <code>24</code> or <code>12</code>. Changes whether the hour is
        displayed in the 24-hour or 12-hour format.</li>
        </ul>
        </li>
        <li><code>period</code>: The AM/PM part of the hour
        <ul>
        <li><code>case</code>: Can be <code>lower</code> to display it in lower case and <code>upper</code> to
        display it in upper case.</li>
        </ul>
        </li>
        <li><code>minute</code>: Displays the minute of the date.
        <ul>
        <li><code>padding</code>: Can be either <code>zero</code>, <code>space</code> or <code>none</code>. Specifies how the
        minute is padded.</li>
        </ul>
        </li>
        <li><code>second</code>: Displays the second of the date.
        <ul>
        <li><code>padding</code>: Can be either <code>zero</code>, <code>space</code> or <code>none</code>. Specifies how the
        second is padded.</li>
        </ul>
        </li>
        </ul>
        <p>Keep in mind that not always all components can be used. For example, if you
        create a new datetime with <code><span class="typ-func">datetime</span><span class="typ-punct">(</span>year<span class="typ-punct">:</span> <span class="typ-num">2023</span><span class="typ-punct">,</span> month<span class="typ-punct">:</span> <span class="typ-num">10</span><span class="typ-punct">,</span> day<span class="typ-punct">:</span> <span class="typ-num">13</span><span class="typ-punct">)</span></code>, it
        will be stored as a plain date internally, meaning that you cannot use
        components such as <code>hour</code> or <code>minute</code>, which would only work on datetimes
        that have a specified time.</p>
      constructor:
        path: []
        name: datetime
        title: Construct
        keywords: []
        oneliner: Creates a new datetime.
        element: false
        details: |-
          <p>Creates a new datetime.</p>
          <p>You can specify the <a href="/docs/reference/foundations/datetime/">datetime</a> using a year, month, day,
          hour, minute, and second.</p>
          <p><em>Note</em>: Depending on which components of the datetime you specify, Typst
          will store it in one of the following three ways:</p>
          <ul>
          <li>If you specify year, month and day, Typst will store just a date.</li>
          <li>If you specify hour, minute and second, Typst will store just a time.</li>
          <li>If you specify all of year, month, day, hour, minute and second, Typst
          will store a full datetime.</li>
          </ul>
          <p>Depending on how it is stored, the <a href="/docs/reference/foundations/datetime/#definitions-display"><code>display</code></a> method
          will choose a different formatting by default.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">datetime</span><span class="typ-punct">(</span>
            year<span class="typ-punct">:</span> <span class="typ-num">2012</span><span class="typ-punct">,</span>
            month<span class="typ-punct">:</span> <span class="typ-num">8</span><span class="typ-punct">,</span>
            day<span class="typ-punct">:</span> <span class="typ-num">3</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/4f046306895865b1c39cb3171067d486.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: year
          details: <p>The year of the datetime.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: month
          details: <p>The month of the datetime.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: day
          details: <p>The day of the datetime.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: hour
          details: <p>The hour of the datetime.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: minute
          details: <p>The minute of the datetime.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: second
          details: <p>The second of the datetime.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - datetime
        scope: []
      scope:
      - path:
        - datetime
        name: today
        title: Today
        keywords: []
        oneliner: Returns the current date.
        element: false
        details: <p>Returns the current date.</p>
        example: |-
          <div class="previewed-code"><pre><code>Today&#39;s date is
          <span class="typ-pol">#</span><span class="typ-pol">datetime</span><span class="typ-punct">.</span><span class="typ-func">today</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>.
          </code></pre><div class="preview"><img src="/assets/docs/95f0144bb8cf39eaba7851ecc71b3db9.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: offset
          details: |-
            <p>An offset to apply to the current UTC date. If set to <code><span class="typ-key">auto</span></code>, the
            offset will be the local offset.</p>
          example: null
          types:
          - auto
          - int
          strings: []
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - datetime
        scope: []
      - path:
        - datetime
        name: display
        title: Display
        keywords: []
        oneliner: Displays the datetime in a specified format.
        element: false
        details: |-
          <p>Displays the datetime in a specified format.</p>
          <p>Depending on whether you have defined just a date, a time or both, the
          default format will be different. If you specified a date, it will be
          <code>[year]-[month]-[day]</code>. If you specified a time, it will be
          <code>[hour]:[minute]:[second]</code>. In the case of a datetime, it will be
          <code>[year]-[month]-[day] [hour]:[minute]:[second]</code>.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The format used to display the datetime.</p>
          example: null
          types:
          - auto
          - str
          strings: []
          default: <code><span class="typ-key">auto</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        returns:
        - str
        scope: []
      - path:
        - datetime
        name: year
        title: Year
        keywords: []
        oneliner: The year if it was specified, or `{none}` for times without a date.
        element: false
        details: <p>The year if it was specified, or <code><span class="typ-key">none</span></code>
          for times without a date.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
      - path:
        - datetime
        name: month
        title: Month
        keywords: []
        oneliner: The month if it was specified, or `{none}` for times without a date.
        element: false
        details: <p>The month if it was specified, or <code><span class="typ-key">none</span></code>
          for times without a date.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
      - path:
        - datetime
        name: weekday
        title: Weekday
        keywords: []
        oneliner: The weekday (counting Monday as 1) or `{none}` for times without
          a date.
        element: false
        details: <p>The weekday (counting Monday as 1) or <code><span class="typ-key">none</span></code>
          for times without a date.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
      - path:
        - datetime
        name: day
        title: Day
        keywords: []
        oneliner: The day if it was specified, or `{none}` for times without a date.
        element: false
        details: <p>The day if it was specified, or <code><span class="typ-key">none</span></code>
          for times without a date.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
      - path:
        - datetime
        name: hour
        title: Hour
        keywords: []
        oneliner: The hour if it was specified, or `{none}` for dates without a time.
        element: false
        details: <p>The hour if it was specified, or <code><span class="typ-key">none</span></code>
          for dates without a time.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
      - path:
        - datetime
        name: minute
        title: Minute
        keywords: []
        oneliner: The minute if it was specified, or `{none}` for dates without a
          time.
        element: false
        details: <p>The minute if it was specified, or <code><span class="typ-key">none</span></code>
          for dates without a time.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
      - path:
        - datetime
        name: second
        title: Second
        keywords: []
        oneliner: The second if it was specified, or `{none}` for dates without a
          time.
        element: false
        details: <p>The second if it was specified, or <code><span class="typ-key">none</span></code>
          for dates without a time.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
      - path:
        - datetime
        name: ordinal
        title: Ordinal
        keywords: []
        oneliner: The ordinal (day of the year), or `{none}` for times without a date.
        element: false
        details: <p>The ordinal (day of the year), or <code><span class="typ-key">none</span></code>
          for times without a date.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - int
        scope: []
  children: []
- route: /docs/reference/foundations/dictionary/
  title: Dictionary
  description: Dictionary 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-len
      name: Length
      children: []
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-key
        name: key
        children: []
      - id: definitions-at-default
        name: default
        children: []
    - id: definitions-insert
      name: Insert
      children:
      - id: definitions-insert-key
        name: key
        children: []
      - id: definitions-insert-value
        name: value
        children: []
    - id: definitions-remove
      name: Remove
      children:
      - id: definitions-remove-key
        name: key
        children: []
      - id: definitions-remove-default
        name: default
        children: []
    - id: definitions-keys
      name: Keys
      children: []
    - id: definitions-values
      name: Values
      children: []
    - id: definitions-pairs
      name: Pairs
      children: []
  body:
    kind: type
    content:
      name: dictionary
      title: Dictionary
      keywords: []
      oneliner: A map from string keys to values.
      details: |-
        <p>A map from string keys to values.</p>
        <p>You can construct a dictionary by enclosing comma-separated <code>key: value</code>
        pairs in parentheses. The values do not have to be of the same type. Since
        empty parentheses already yield an empty array, you have to use the special
        <code>(:)</code> syntax to create an empty dictionary.</p>
        <p>A dictionary is conceptually similar to an array, but it is indexed by
        strings instead of integers. You can access and create dictionary entries
        with the <code>.at()</code> method. If you know the key statically, you can
        alternatively use <a href="/docs/reference/scripting/#fields">field access notation</a> (<code>.key</code>) to
        access the value. Dictionaries can be added with the <code>+</code> operator and
        <a href="/docs/reference/scripting/#blocks">joined together</a>. To check whether a key is present in
        the dictionary, use the <code>in</code> keyword.</p>
        <p>You can iterate over the pairs in a dictionary using a <a href="/docs/reference/scripting/#loops">for
        loop</a>. This will iterate in the order the pairs were
        inserted / declared.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> dict <span class="typ-op">=</span> <span class="typ-punct">(</span>
          name<span class="typ-punct">:</span> <span class="typ-str">&quot;Typst&quot;</span><span class="typ-punct">,</span>
          born<span class="typ-punct">:</span> <span class="typ-num">2019</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-pol">name</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span>dict<span class="typ-punct">.</span>launch <span class="typ-op">=</span> <span class="typ-num">20</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">len</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">keys</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">values</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span><span class="typ-str">&quot;born&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">dict</span><span class="typ-punct">.</span><span class="typ-func">insert</span><span class="typ-punct">(</span><span class="typ-str">&quot;city&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;Berlin &quot;</span><span class="typ-punct">)</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-str">&quot;name&quot;</span> <span class="typ-key">in</span> dict<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/fcda16a72f295b980f7162495185c606.png" alt="Preview" width="480" height="190"/></div></div>
      constructor: null
      scope:
      - path:
        - dictionary
        name: len
        title: Length
        keywords: []
        oneliner: The number of pairs in the dictionary.
        element: false
        details: <p>The number of pairs in the dictionary.</p>
        example: null
        self: true
        params: []
        returns:
        - int
        scope: []
      - path:
        - dictionary
        name: at
        title: At
        keywords: []
        oneliner: Returns the value associated with the specified key in the dictionary.
        element: false
        details: |-
          <p>Returns the value associated with the specified key in the dictionary.
          May be used on the left-hand side of an assignment if the key is already
          present in the dictionary. Returns the default value if the key is not
          part of the dictionary or fails with an error if no default value was
          specified.</p>
        example: null
        self: true
        params:
        - name: key
          details: <p>The key at which to retrieve the item.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: default
          details: <p>A default value to return if the key is not part of the dictionary.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - dictionary
        name: insert
        title: Insert
        keywords: []
        oneliner: Inserts a new pair into the dictionary and return the value. If
          the
        element: false
        details: |-
          <p>Inserts a new pair into the dictionary and return the value. If the
          dictionary already contains this key, the value is updated.</p>
        example: null
        self: true
        params:
        - name: key
          details: <p>The key of the pair that should be inserted.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: value
          details: <p>The value of the pair that should be inserted.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns: []
        scope: []
      - path:
        - dictionary
        name: remove
        title: Remove
        keywords: []
        oneliner: Removes a pair from the dictionary by key and return the value.
        element: false
        details: <p>Removes a pair from the dictionary by key and return the value.</p>
        example: null
        self: true
        params:
        - name: key
          details: <p>The key of the pair to remove.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: default
          details: <p>A default value to return if the key does not exist.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - dictionary
        name: keys
        title: Keys
        keywords: []
        oneliner: Returns the keys of the dictionary as an array in insertion order.
        element: false
        details: <p>Returns the keys of the dictionary as an array in insertion order.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - dictionary
        name: values
        title: Values
        keywords: []
        oneliner: Returns the values of the dictionary as an array in insertion order.
        element: false
        details: <p>Returns the values of the dictionary as an array in insertion
          order.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - dictionary
        name: pairs
        title: Pairs
        keywords: []
        oneliner: Returns the keys and values of the dictionary as an array of pairs.
          Each
        element: false
        details: |-
          <p>Returns the keys and values of the dictionary as an array of pairs. Each
          pair is represented as an array of length two.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
  children: []
- route: /docs/reference/foundations/duration/
  title: Duration
  description: Duration 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-seconds
      name: seconds
      children: []
    - id: constructor-minutes
      name: minutes
      children: []
    - id: constructor-hours
      name: hours
      children: []
    - id: constructor-days
      name: days
      children: []
    - id: constructor-weeks
      name: weeks
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-seconds
      name: Seconds
      children: []
    - id: definitions-minutes
      name: Minutes
      children: []
    - id: definitions-hours
      name: Hours
      children: []
    - id: definitions-days
      name: Days
      children: []
    - id: definitions-weeks
      name: Weeks
      children: []
  body:
    kind: type
    content:
      name: duration
      title: Duration
      keywords: []
      oneliner: Represents a positive or negative span of time.
      details: <p>Represents a positive or negative span of time.</p>
      constructor:
        path: []
        name: duration
        title: Construct
        keywords: []
        oneliner: Creates a new duration.
        element: false
        details: |-
          <p>Creates a new duration.</p>
          <p>You can specify the <a href="/docs/reference/foundations/duration/">duration</a> using weeks, days, hours,
          minutes and seconds. You can also get a duration by subtracting two
          <a href="/docs/reference/foundations/datetime/">datetimes</a>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">duration</span><span class="typ-punct">(</span>
            days<span class="typ-punct">:</span> <span class="typ-num">3</span><span class="typ-punct">,</span>
            hours<span class="typ-punct">:</span> <span class="typ-num">12</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">hours</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/ea10f86ca6c71e77e7276c97659a772d.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: seconds
          details: <p>The number of seconds.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: minutes
          details: <p>The number of minutes.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: hours
          details: <p>The number of hours.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: days
          details: <p>The number of days.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: weeks
          details: <p>The number of weeks.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - duration
        scope: []
      scope:
      - path:
        - duration
        name: seconds
        title: Seconds
        keywords: []
        oneliner: The duration expressed in seconds.
        element: false
        details: |-
          <p>The duration expressed in seconds.</p>
          <p>This function returns the total duration represented in seconds as a
          floating-point number rather than the second component of the duration.</p>
        example: null
        self: true
        params: []
        returns:
        - float
        scope: []
      - path:
        - duration
        name: minutes
        title: Minutes
        keywords: []
        oneliner: The duration expressed in minutes.
        element: false
        details: |-
          <p>The duration expressed in minutes.</p>
          <p>This function returns the total duration represented in minutes as a
          floating-point number rather than the second component of the duration.</p>
        example: null
        self: true
        params: []
        returns:
        - float
        scope: []
      - path:
        - duration
        name: hours
        title: Hours
        keywords: []
        oneliner: The duration expressed in hours.
        element: false
        details: |-
          <p>The duration expressed in hours.</p>
          <p>This function returns the total duration represented in hours as a
          floating-point number rather than the second component of the duration.</p>
        example: null
        self: true
        params: []
        returns:
        - float
        scope: []
      - path:
        - duration
        name: days
        title: Days
        keywords: []
        oneliner: The duration expressed in days.
        element: false
        details: |-
          <p>The duration expressed in days.</p>
          <p>This function returns the total duration represented in days as a
          floating-point number rather than the second component of the duration.</p>
        example: null
        self: true
        params: []
        returns:
        - float
        scope: []
      - path:
        - duration
        name: weeks
        title: Weeks
        keywords: []
        oneliner: The duration expressed in weeks.
        element: false
        details: |-
          <p>The duration expressed in weeks.</p>
          <p>This function returns the total duration represented in weeks as a
          floating-point number rather than the second component of the duration.</p>
        example: null
        self: true
        params: []
        returns:
        - float
        scope: []
  children: []
- route: /docs/reference/foundations/eval/
  title: Evaluate
  description: '`eval` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-source
      name: source
      children: []
    - id: parameters-mode
      name: mode
      children: []
    - id: parameters-scope
      name: scope
      children: []
  body:
    kind: func
    content:
      path: []
      name: eval
      title: Evaluate
      keywords: []
      oneliner: Evaluates a string as Typst code.
      element: false
      details: |-
        <p>Evaluates a string as Typst code.</p>
        <p>This function should only be used as a last resort.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;1 + 1&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;(1, 2, 3, 4)&quot;</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">len</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;*Markup!*&quot;</span><span class="typ-punct">,</span> mode<span class="typ-punct">:</span> <span class="typ-str">&quot;markup&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        </code></pre><div class="preview"><img src="/assets/docs/e9109a1aa7eadb5334980147f7d38916.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: source
        details: |-
          <p>A string of Typst code to evaluate.</p>
          <p>The code in the string cannot interact with the file system.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: mode
        details: <p>The syntactical mode in which the string is parsed.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;= Heading&quot;</span><span class="typ-punct">,</span> mode<span class="typ-punct">:</span> <span class="typ-str">&quot;markup&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;1_2^3&quot;</span><span class="typ-punct">,</span> mode<span class="typ-punct">:</span> <span class="typ-str">&quot;math&quot;</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/0776ddb40c768be3aa00f8fe7822c85a.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - str
        strings:
        - string: code
          details: <p>Evaluate as code, as after a hash.</p>
        - string: markup
          details: <p>Evaluate as markup, like in a Typst file.</p>
        - string: math
          details: <p>Evaluate as math, as in an equation.</p>
        default: <code><span class="typ-str">&quot;code&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      - name: scope
        details: <p>A scope of definitions that are made available.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 1&quot;</span><span class="typ-punct">,</span> scope<span class="typ-punct">:</span> <span class="typ-punct">(</span>x<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">eval</span><span class="typ-punct">(</span>
            <span class="typ-str">&quot;abc/xyz&quot;</span><span class="typ-punct">,</span>
            mode<span class="typ-punct">:</span> <span class="typ-str">&quot;math&quot;</span><span class="typ-punct">,</span>
            scope<span class="typ-punct">:</span> <span class="typ-punct">(</span>
              abc<span class="typ-punct">:</span> <span class="typ-math-delim">$</span>a + b + c<span class="typ-math-delim">$</span><span class="typ-punct">,</span>
              xyz<span class="typ-punct">:</span> <span class="typ-math-delim">$</span>x + y + z<span class="typ-math-delim">$</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/a4850b9dbcd5013b0145088f23d19a5d.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - dictionary
        strings: []
        default: <code><span class="typ-punct">(</span><span class="typ-punct">:</span><span
          class="typ-punct">)</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - any
      scope: []
  children: []
- route: /docs/reference/foundations/float/
  title: Float
  description: Float 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-value
      name: value
      children: []
  body:
    kind: type
    content:
      name: float
      title: Float
      keywords: []
      oneliner: A floating-point number.
      details: |-
        <p>A floating-point number.</p>
        <p>A limited-precision representation of a real number. Typst uses 64 bits to
        store floats. Wherever a float is expected, you can also pass an
        <a href="/docs/reference/foundations/int/">integer</a>.</p>
        <p>You can convert a value to a float with this type's constructor.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-num">#</span><span class="typ-num">3.14</span> <span class="typ-escape">\</span>
        <span class="typ-num">#</span><span class="typ-num">1e4</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">10</span> <span class="typ-op">/</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/aae24c99c8eb5e58f3bddcadd05feaf7.png" alt="Preview" width="480" height="190"/></div></div>
      constructor:
        path: []
        name: float
        title: Construct
        keywords: []
        oneliner: Converts a value to a float.
        element: false
        details: |-
          <p>Converts a value to a float.</p>
          <ul>
          <li>Booleans are converted to <code>0.0</code> or <code>1.0</code>.</li>
          <li>Integers are converted to the closest 64-bit float.</li>
          <li>Ratios are divided by 100%.</li>
          <li>Strings are parsed in base 10 to the closest 64-bit float.
          Exponential notation is supported.</li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-key">false</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-key">true</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-num">40%</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-str">&quot;2.7&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">float</span><span class="typ-punct">(</span><span class="typ-str">&quot;1e5&quot;</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/b776a834cdc84f6227a04b6bcb44a699.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The value that should be converted to a float.</p>
          example: null
          types:
          - bool
          - int
          - float
          - ratio
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      scope: []
  children: []
- route: /docs/reference/foundations/function/
  title: Function
  description: Function 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: element-functions
    name: Element Functions
    children: []
  - id: function-scopes
    name: Function Scopes
    children: []
  - id: defining-functions
    name: Defining Functions
    children: []
  - id: unnamed
    name: Unnamed
    children: []
  - id: note-on-function-purity
    name: Note On Function Purity
    children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-with
      name: With
      children:
      - id: definitions-with-arguments
        name: arguments
        children: []
    - id: definitions-where
      name: Where
      children:
      - id: definitions-where-fields
        name: fields
        children: []
  body:
    kind: type
    content:
      name: function
      title: Function
      keywords: []
      oneliner: A mapping from argument values to a return value.
      details: |-
        <p>A mapping from argument values to a return value.</p>
        <p>You can call a function by writing a comma-separated list of function
        <em>arguments</em> enclosed in parentheses directly after the function name.
        Additionally, you can pass any number of trailing content blocks arguments
        to a function <em>after</em> the normal argument list. If the normal argument list
        would become empty, it can be omitted. Typst supports positional and named
        arguments. The former are identified by position and type, while the later
        are written as <code>name: value</code>.</p>
        <p>Within math mode, function calls have special behaviour. See the
        <a href="/docs/reference/math/">math documentation</a> for more details.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-comment">// Call a function.</span>
        <span class="typ-func">#</span><span class="typ-func">list</span><span class="typ-punct">(</span><span class="typ-punct">[</span>A<span class="typ-punct">]</span><span class="typ-punct">,</span> <span class="typ-punct">[</span>B<span class="typ-punct">]</span><span class="typ-punct">)</span>

        <span class="typ-comment">// Named arguments and trailing</span>
        <span class="typ-comment">// content blocks.</span>
        <span class="typ-func">#</span><span class="typ-func">enum</span><span class="typ-punct">(</span>start<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">[</span>A<span class="typ-punct">]</span><span class="typ-punct">[</span>B<span class="typ-punct">]</span>

        <span class="typ-comment">// Version without parentheses.</span>
        <span class="typ-func">#</span><span class="typ-func">list</span><span class="typ-punct">[</span>A<span class="typ-punct">]</span><span class="typ-punct">[</span>B<span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/48035a38f73e09f6b4575a2737705ad3.png" alt="Preview" width="480" height="190"/></div></div>
        <p>Functions are a fundamental building block of Typst. Typst provides
        functions for a variety of typesetting tasks. Moreover, the markup you write
        is backed by functions and all styling happens through functions. This
        reference lists all available functions and how you can use them. Please
        also refer to the documentation about <a href="/docs/reference/styling/#set-rules">set</a> and
        <a href="/docs/reference/styling/#show-rules">show</a> rules to learn about additional ways you can
        work with functions in Typst.</p>
        <h2 id="element-functions">Element functions</h2>
        <p>Some functions are associated with <em>elements</em> like <a href="/docs/reference/model/heading/">headings</a> or
        <a href="/docs/reference/model/table/">tables</a>. When called, these create an element of their respective
        kind. In contrast to normal functions, they can further be used in <a href="/docs/reference/styling/#set-rules">set
        rules</a>, <a href="/docs/reference/styling/#show-rules">show rules</a>, and
        <a href="/docs/reference/foundations/selector/">selectors</a>.</p>
        <h2 id="function-scopes">Function scopes</h2>
        <p>Functions can hold related definitions in their own scope, similar to a
        <a href="/docs/reference/scripting/#modules">module</a>. Examples of this are
        <a href="/docs/reference/foundations/assert/#definitions-eq"><code>assert.eq</code></a> or <a href="/docs/reference/model/list/#definitions-item"><code>list.item</code></a>. However, this
        feature is currently only available for built-in functions.</p>
        <h2 id="defining-functions">Defining functions</h2>
        <p>You can define your own function with a <a href="/docs/reference/scripting/#bindings">let binding</a>
        that has a parameter list after the binding's name. The parameter list can
        contain mandatory positional parameters, named parameters with default
        values and <a href="/docs/reference/foundations/arguments/">argument sinks</a>.</p>
        <p>The right-hand side of a function binding is the function body, which can be
        a block or any other expression. It defines the function's return value and
        can depend on the parameters. If the function body is a <a href="/docs/reference/scripting/#blocks">code
        block</a>, the return value is the result of joining the
        values of each expression in the block.</p>
        <p>Within a function body, the <code>return</code> keyword can be used to exit early and
        optionally specify a return value. If no explicit return value is given, the
        body evaluates to the result of joining all expressions preceding the
        <code>return</code>.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">alert</span><span class="typ-punct">(</span>body<span class="typ-punct">,</span> fill<span class="typ-punct">:</span> red<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
          <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>white<span class="typ-punct">)</span>
          <span class="typ-key">set</span> <span class="typ-func">align</span><span class="typ-punct">(</span>center<span class="typ-punct">)</span>
          <span class="typ-func">rect</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> fill<span class="typ-punct">,</span>
            inset<span class="typ-punct">:</span> <span class="typ-num">8pt</span><span class="typ-punct">,</span>
            radius<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span>
            <span class="typ-punct">[</span><span class="typ-strong">*Warning:<span class="typ-escape">\</span> <span class="typ-pol">#</span><span class="typ-pol">body</span>*</span><span class="typ-punct">]</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
        <span class="typ-punct">}</span>

        <span class="typ-func">#</span><span class="typ-func">alert</span><span class="typ-punct">[</span>
          Danger is imminent!
        <span class="typ-punct">]</span>

        <span class="typ-func">#</span><span class="typ-func">alert</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> blue<span class="typ-punct">)</span><span class="typ-punct">[</span>
          KEEP OFF TRACKS
        <span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/a46deb725efaf4d901b99ab85859e676.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="unnamed">Unnamed functions</h2>
        <p>You can also created an unnamed function without creating a binding by
        specifying a parameter list followed by <code>=&gt;</code> and the function body. If your
        function has just one parameter, the parentheses around the parameter list
        are optional. Unnamed functions are mainly useful for show rules, but also
        for settable properties that take functions like the page function's
        <a href="/docs/reference/layout/page/#parameters-footer"><code>footer</code></a> property.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-str">&quot;once?&quot;</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-punct">[</span><span class="typ-pol">#</span><span class="typ-pol">it</span> <span class="typ-pol">#</span><span class="typ-pol">it</span><span class="typ-punct">]</span>
        once?
        </code></pre><div class="preview"><img src="/assets/docs/40dbc27883842fabb8d1a3da53db0bfd.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="note-on-function-purity">Note on function purity</h2>
        <p>In Typst, all functions are <em>pure.</em> This means that for the same
        arguments, they always return the same result. They cannot &quot;remember&quot; things to
        produce another value when they are called a second time.</p>
        <p>The only exception are built-in methods like
        <a href="/docs/reference/foundations/array/#definitions-push"><code>array.push(value)</code></a>. These can modify the values they are
        called on.</p>
      constructor: null
      scope:
      - path:
        - function
        name: with
        title: With
        keywords: []
        oneliner: Returns a new function that has the given arguments pre-applied.
        element: false
        details: <p>Returns a new function that has the given arguments pre-applied.</p>
        example: null
        self: true
        params:
        - name: arguments
          details: <p>The arguments to apply to the function.</p>
          example: null
          types:
          - arguments
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - function
        scope: []
      - path:
        - function
        name: where
        title: Where
        keywords: []
        oneliner: Returns a selector that filters for elements belonging to this function
        element: false
        details: |-
          <p>Returns a selector that filters for elements belonging to this function
          whose fields have the values of the given arguments.</p>
        example: null
        self: true
        params:
        - name: fields
          details: <p>The fields to filter for.</p>
          example: null
          types:
          - arguments
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - selector
        scope: []
  children: []
- route: /docs/reference/foundations/int/
  title: Integer
  description: Integer 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-value
      name: value
      children: []
  body:
    kind: type
    content:
      name: int
      title: Integer
      keywords: []
      oneliner: A whole number.
      details: |-
        <p>A whole number.</p>
        <p>The number can be negative, zero, or positive. As Typst uses 64 bits to
        store integers, integers cannot be smaller than <code><span class="typ-op">-</span><span class="typ-num">9223372036854775808</span></code> or
        larger than <code><span class="typ-num">9223372036854775807</span></code>.</p>
        <p>The number can also be specified as hexadecimal, octal, or binary by
        starting it with a zero followed by either <code>x</code>, <code>o</code>, or <code>b</code>.</p>
        <p>You can convert a value to an integer with this type's constructor.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">1</span> <span class="typ-op">+</span> <span class="typ-num">2</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">2</span> <span class="typ-op">-</span> <span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">3</span> <span class="typ-op">+</span> <span class="typ-num">4</span> <span class="typ-op">&lt;</span> <span class="typ-num">8</span><span class="typ-punct">)</span>

        <span class="typ-num">#</span><span class="typ-num">0xff</span> <span class="typ-escape">\</span>
        <span class="typ-num">#</span><span class="typ-num">0o10</span> <span class="typ-escape">\</span>
        <span class="typ-num">#</span><span class="typ-num">0b1001</span>
        </code></pre><div class="preview"><img src="/assets/docs/60509f21020a79bc00ff51d7d45093f7.png" alt="Preview" width="480" height="190"/></div></div>
      constructor:
        path: []
        name: int
        title: Construct
        keywords: []
        oneliner: Converts a value to an integer.
        element: false
        details: |-
          <p>Converts a value to an integer.</p>
          <ul>
          <li>Booleans are converted to <code>0</code> or <code>1</code>.</li>
          <li>Floats are floored to the next 64-bit integer.</li>
          <li>Strings are parsed in base 10.</li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">int</span><span class="typ-punct">(</span><span class="typ-key">false</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">int</span><span class="typ-punct">(</span><span class="typ-key">true</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">int</span><span class="typ-punct">(</span><span class="typ-num">2.7</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-func">int</span><span class="typ-punct">(</span><span class="typ-str">&quot;27&quot;</span><span class="typ-punct">)</span> <span class="typ-op">+</span> <span class="typ-func">int</span><span class="typ-punct">(</span><span class="typ-str">&quot;4&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/bed8f1a290541ff07b75487efc835f33.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The value that should be converted to an integer.</p>
          example: null
          types:
          - bool
          - int
          - float
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      scope: []
  children: []
- route: /docs/reference/foundations/label/
  title: Label
  description: Label 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: syntax
    name: Syntax
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-name
      name: name
      children: []
  body:
    kind: type
    content:
      name: label
      title: Label
      keywords: []
      oneliner: A label for an element.
      details: |-
        <p>A label for an element.</p>
        <p>Inserting a label into content attaches it to the closest preceding element
        that is not a space. The preceding element must be in the same scope as the
        label, which means that <code>Hello <span class="typ-punct">#</span><span class="typ-punct">[</span><span class="typ-label">&lt;label&gt;</span><span class="typ-punct">]</span></code>, for instance, wouldn't work.</p>
        <p>A labelled element can be <a href="/docs/reference/model/ref/">referenced</a>, <a href="/docs/reference/introspection/query/">queried</a> for, and
        <a href="/docs/reference/styling/">styled</a> through its label.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-label">&lt;a&gt;</span><span class="typ-punct">:</span> <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>blue<span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-func">label</span><span class="typ-punct">(</span><span class="typ-str">&quot;b&quot;</span><span class="typ-punct">)</span><span class="typ-punct">:</span> <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>red<span class="typ-punct">)</span>

        <span class="typ-heading">= Heading</span> <span class="typ-label">&lt;a&gt;</span>
        <span class="typ-strong">*Strong*</span> <span class="typ-func">#</span><span class="typ-func">label</span><span class="typ-punct">(</span><span class="typ-str">&quot;b&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/5374c9bdc996683035e91d4a06db15af.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="syntax">Syntax</h2>
        <p>This function also has dedicated syntax: You can create a label by enclosing
        its name in angle brackets. This works both in markup and code.</p>
        <p>Currently, labels can only be attached to elements in markup mode, not in
        code mode. This might change in the future.</p>
      constructor:
        path: []
        name: label
        title: Construct
        keywords: []
        oneliner: Creates a label from a string.
        element: false
        details: <p>Creates a label from a string.</p>
        example: null
        self: false
        params:
        - name: name
          details: <p>The name of the label.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - label
        scope: []
      scope: []
  children: []
- route: /docs/reference/foundations/module/
  title: Module
  description: Module 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  body:
    kind: type
    content:
      name: module
      title: Module
      keywords: []
      oneliner: An evaluated module, either built-in or resulting from a file.
      details: |-
        <p>An evaluated module, either built-in or resulting from a file.</p>
        <p>You can access definitions from the module using
        <a href="/docs/reference/scripting/#fields">field access notation</a> and interact with it using the
        <a href="/docs/reference/scripting/#modules">import and include syntaxes</a>.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">import</span> <span class="typ-str">&quot;utils.typ&quot;</span>
        <span class="typ-pol">#</span><span class="typ-pol">utils</span><span class="typ-punct">.</span><span class="typ-func">add</span><span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span>

        <span class="typ-key">#</span><span class="typ-key">import</span> utils<span class="typ-punct">:</span> sub
        <span class="typ-func">#</span><span class="typ-func">sub</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/6fe97a329e091260081ea42c8dee85f5.png" alt="Preview" width="480" height="190"/></div></div>
      constructor: null
      scope: []
  children: []
- route: /docs/reference/foundations/panic/
  title: Panic
  description: '`panic` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-values
      name: values
      children: []
  body:
    kind: func
    content:
      path: []
      name: panic
      title: Panic
      keywords:
      - error
      oneliner: Fails with an error.
      element: false
      details: |-
        <p>Fails with an error.</p>
        <p>Arguments are displayed to the user (not rendered in the document) as
        strings, converting with <code>repr</code> if necessary.</p>
        <h2 id="example">Example</h2>
        <p>The code below produces the error <code>panicked with: &quot;this is wrong&quot;</code>.</p>
        <pre><code><span class="typ-func">#</span><span class="typ-func">panic</span><span class="typ-punct">(</span><span class="typ-str">&quot;this is wrong&quot;</span><span class="typ-punct">)</span>
        </code></pre>
      example: null
      self: false
      params:
      - name: values
        details: <p>The values to panic with and display to the user.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns: []
      scope: []
  children: []
- route: /docs/reference/foundations/plugin/
  title: Plugin
  description: Plugin 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: plugins-and-packages
    name: Plugins And Packages
    children: []
  - id: purity
    name: Purity
    children: []
  - id: example
    name: Example
    children: []
  - id: protocol
    name: Protocol
    children:
    - id: exports
      name: Exports
      children: []
    - id: imports
      name: Imports
      children: []
  - id: resources
    name: Resources
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-path
      name: path
      children: []
  body:
    kind: type
    content:
      name: plugin
      title: Plugin
      keywords: []
      oneliner: A WebAssembly plugin.
      details: |-
        <p>A WebAssembly plugin.</p>
        <p>Typst is capable of interfacing with plugins compiled to WebAssembly. Plugin
        functions may accept multiple <a href="/docs/reference/foundations/bytes/">byte buffers</a> as arguments and return
        a single byte buffer. They should typically be wrapped in idiomatic Typst
        functions that perform the necessary conversions between native Typst types
        and bytes.</p>
        <p>Plugins run in isolation from your system, which means that printing,
        reading files, or anything like that will not be supported for security
        reasons. To run as a plugin, a program needs to be compiled to a 32-bit
        shared WebAssembly library. Many compilers will use the
        <a href="https://wasi.dev/">WASI ABI</a> by default or as their only option (e.g.
        emscripten), which allows printing, reading files, etc. This ABI will not
        directly work with Typst. You will either need to compile to a different
        target or <a href="https://github.com/astrale-sharp/wasm-minimal-protocol/blob/master/wasi-stub">stub all functions</a>.</p>
        <h2 id="plugins-and-packages">Plugins and Packages</h2>
        <p>Plugins are distributed as packages. A package can make use of a plugin
        simply by including a WebAssembly file and loading it. Because the
        byte-based plugin interface is quite low-level, plugins are typically
        exposed through wrapper functions, that also live in the same package.</p>
        <h2 id="purity">Purity</h2>
        <p>Plugin functions must be pure: Given the same arguments, they must always
        return the same value. The reason for this is that Typst functions must be
        pure (which is quite fundamental to the language design) and, since Typst
        function can call plugin functions, this requirement is inherited. In
        particular, if a plugin function is called twice with the same arguments,
        Typst might cache the results and call your function only once.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> myplugin <span class="typ-op">=</span> <span class="typ-func">plugin</span><span class="typ-punct">(</span><span class="typ-str">&quot;hello.wasm&quot;</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">concat</span><span class="typ-punct">(</span>a<span class="typ-punct">,</span> b<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">str</span><span class="typ-punct">(</span>
          myplugin<span class="typ-punct">.</span><span class="typ-func">concatenate</span><span class="typ-punct">(</span>
            <span class="typ-func">bytes</span><span class="typ-punct">(</span>a<span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">bytes</span><span class="typ-punct">(</span>b<span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
        <span class="typ-punct">)</span>

        <span class="typ-func">#</span><span class="typ-func">concat</span><span class="typ-punct">(</span><span class="typ-str">&quot;hello&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;world&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/adb0cb4385a108f0fa953ac5ab68fc90.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="protocol">Protocol</h2>
        <p>To be used as a plugin, a WebAssembly module must conform to the following
        protocol:</p>
        <h3 id="exports">Exports</h3>
        <p>A plugin module can export functions to make them callable from Typst. To
        conform to the protocol, an exported function should:</p>
        <ul>
        <li>
        <p>Take <code>n</code> 32-bit integer arguments <code>a_1</code>, <code>a_2</code>, ..., <code>a_n</code> (interpreted as
        lengths, so <code>usize/size_t</code> may be preferable), and return one 32-bit
        integer.</p>
        </li>
        <li>
        <p>The function should first allocate a buffer <code>buf</code> of length
        <code>a_1 + a_2 + ... + a_n</code>, and then call
        <code>wasm_minimal_protocol_write_args_to_buffer(buf.ptr)</code>.</p>
        </li>
        <li>
        <p>The <code>a_1</code> first bytes of the buffer now constitute the first argument, the
        <code>a_2</code> next bytes the second argument, and so on.</p>
        </li>
        <li>
        <p>The function can now do its job with the arguments and produce an output
        buffer. Before returning, it should call
        <code>wasm_minimal_protocol_send_result_to_host</code> to send its result back to the
        host.</p>
        </li>
        <li>
        <p>To signal success, the function should return <code>0</code>.</p>
        </li>
        <li>
        <p>To signal an error, the function should return <code>1</code>. The written buffer is
        then interpreted as an UTF-8 encoded error message.</p>
        </li>
        </ul>
        <h3 id="imports">Imports</h3>
        <p>Plugin modules need to import two functions that are provided by the runtime.
        (Types and functions are described using WAT syntax.)</p>
        <ul>
        <li>
        <p><code>(import &quot;typst_env&quot; &quot;wasm_minimal_protocol_write_args_to_buffer&quot; (func (param i32)))</code></p>
        <p>Writes the arguments for the current function into a plugin-allocated
        buffer. When a plugin function is called, it
        <a href="#exports">receives the lengths</a> of its input buffers as arguments. It
        should then allocate a buffer whose capacity is at least the sum of these
        lengths. It should then call this function with a <code>ptr</code> to the buffer to
        fill it with the arguments, one after another.</p>
        </li>
        <li>
        <p><code>(import &quot;typst_env&quot; &quot;wasm_minimal_protocol_send_result_to_host&quot; (func (param i32 i32)))</code></p>
        <p>Sends the output of the current function to the host (Typst). The first
        parameter shall be a pointer to a buffer (<code>ptr</code>), while the second is the
        length of that buffer (<code>len</code>). The memory pointed at by <code>ptr</code> can be freed
        immediately after this function returns. If the message should be
        interpreted as an error message, it should be encoded as UTF-8.</p>
        </li>
        </ul>
        <h2 id="resources">Resources</h2>
        <p>For more resources, check out the
        <a href="https://github.com/astrale-sharp/wasm-minimal-protocol">wasm-minimal-protocol repository</a>.
        It contains:</p>
        <ul>
        <li>A list of example plugin implementations and a test runner for these
        examples</li>
        <li>Wrappers to help you write your plugin in Rust (Zig wrapper in
        development)</li>
        <li>A stubber for WASI</li>
        </ul>
      constructor:
        path: []
        name: plugin
        title: Construct
        keywords: []
        oneliner: Creates a new plugin from a WebAssembly file.
        element: false
        details: <p>Creates a new plugin from a WebAssembly file.</p>
        example: null
        self: false
        params:
        - name: path
          details: <p>Path to a WebAssembly file.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - plugin
        scope: []
      scope: []
  children: []
- route: /docs/reference/foundations/regex/
  title: Regex
  description: Regex 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-regex
      name: regex
      children: []
  body:
    kind: type
    content:
      name: regex
      title: Regex
      keywords: []
      oneliner: A regular expression.
      details: |-
        <p>A regular expression.</p>
        <p>Can be used as a <a href="/docs/reference/styling/#show-rules">show rule selector</a> and with
        <a href="/docs/reference/foundations/str/">string methods</a> like <code>find</code>, <code>split</code>, and <code>replace</code>.</p>
        <p><a href="https://docs.rs/regex/latest/regex/#syntax">See here</a> for a specification
        of the supported syntax.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-comment">// Works with string methods.</span>
        <span class="typ-str">#</span><span class="typ-str">&quot;a,b;c&quot;</span><span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;[,;]&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>

        <span class="typ-comment">// Works with show rules.</span>
        <span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;\d+&quot;</span><span class="typ-punct">)</span><span class="typ-punct">:</span> <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>red<span class="typ-punct">)</span>

        The numbers 1 to 10.
        </code></pre><div class="preview"><img src="/assets/docs/34b2b1dbacec1c7cf7f5c9b48c548bb6.png" alt="Preview" width="480" height="190"/></div></div>
      constructor:
        path: []
        name: regex
        title: Construct
        keywords: []
        oneliner: Create a regular expression from a string.
        element: false
        details: <p>Create a regular expression from a string.</p>
        example: null
        self: false
        params:
        - name: regex
          details: |-
            <p>The regular expression as a string.</p>
            <p>Most regex escape sequences just work because they are not valid Typst
            escape sequences. To produce regex escape sequences that are also valid in
            Typst (e.g. <code><span class="typ-escape">\\</span></code>), you need to escape twice. Thus, to match a verbatim
            backslash, you would need to write <code><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;\\\\&quot;</span><span class="typ-punct">)</span></code>.</p>
            <p>If you need many escape sequences, you can also create a raw element
            and extract its text to use it for your regular expressions:</p>
          example: <p><code><span class="typ-func">regex</span><span class="typ-punct">(</span><span
            class="typ-raw">`\d+\.\d+\.\d+`</span><span class="typ-punct">.</span>text<span
            class="typ-punct">)</span></code>.</p>
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - regex
        scope: []
      scope: []
  children: []
- route: /docs/reference/foundations/repr/
  title: Representation
  description: '`repr` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-value
      name: value
      children: []
  body:
    kind: func
    content:
      path: []
      name: repr
      title: Representation
      keywords: []
      oneliner: Returns the string representation of a value.
      element: false
      details: |-
        <p>Returns the string representation of a value.</p>
        <p>When inserted into content, most values are displayed as this representation
        in monospace with syntax-highlighting. The exceptions are <code><span class="typ-key">none</span></code>,
        integers, floats, strings, content, and functions.</p>
        <p><strong>Note:</strong> This function is for debugging purposes. Its output should not be
        considered stable and may change at any time!</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">none</span> vs <span class="typ-func">#</span><span class="typ-func">repr</span><span class="typ-punct">(</span><span class="typ-key">none</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-str">#</span><span class="typ-str">&quot;hello&quot;</span> vs <span class="typ-func">#</span><span class="typ-func">repr</span><span class="typ-punct">(</span><span class="typ-str">&quot;hello&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">)</span> vs <span class="typ-func">#</span><span class="typ-func">repr</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">[</span><span class="typ-strong">*Hi*</span><span class="typ-punct">]</span> vs <span class="typ-func">#</span><span class="typ-func">repr</span><span class="typ-punct">(</span><span class="typ-punct">[</span><span class="typ-strong">*Hi*</span><span class="typ-punct">]</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/29da47b4b528e23f151bd8a099371ddc.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: value
        details: <p>The value whose string representation to produce.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - str
      scope: []
  children: []
- route: /docs/reference/foundations/selector/
  title: Selector
  description: Selector 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-target
      name: target
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-or
      name: Or
      children:
      - id: definitions-or-others
        name: others
        children: []
    - id: definitions-and
      name: And
      children:
      - id: definitions-and-others
        name: others
        children: []
    - id: definitions-before
      name: Before
      children:
      - id: definitions-before-end
        name: end
        children: []
      - id: definitions-before-inclusive
        name: inclusive
        children: []
    - id: definitions-after
      name: After
      children:
      - id: definitions-after-start
        name: start
        children: []
      - id: definitions-after-inclusive
        name: inclusive
        children: []
  body:
    kind: type
    content:
      name: selector
      title: Selector
      keywords: []
      oneliner: A filter for selecting elements within the document.
      details: |-
        <p>A filter for selecting elements within the document.</p>
        <p>You can construct a selector in the following ways:</p>
        <ul>
        <li>you can use an element <a href="/docs/reference/foundations/function/">function</a></li>
        <li>you can filter for an element function with
        <a href="/docs/reference/foundations/function/#definitions-where">specific fields</a></li>
        <li>you can use a <a href="/docs/reference/foundations/str/">string</a> or <a href="/docs/reference/foundations/regex/">regular expression</a></li>
        <li>you can use a <a href="/docs/reference/foundations/label/"><code><span class="typ-label">&lt;label&gt;</span></code></a></li>
        <li>you can use a <a href="/docs/reference/introspection/location/"><code>location</code></a></li>
        <li>call the <a href="/docs/reference/foundations/selector/"><code>selector</code></a> constructor to convert any of the above
        types into a selector value and use the methods below to refine it</li>
        </ul>
        <p>Selectors are used to <a href="/docs/reference/styling/#show-rules">apply styling rules</a> to
        elements. You can also use selectors to <a href="/docs/reference/introspection/query/">query</a> the document for
        certain types of elements.</p>
        <p>Furthermore, you can pass a selector to several of Typst's built-in
        functions to configure their behaviour. One such example is the
        <a href="/docs/reference/model/outline/">outline</a> where it can be used to change which elements are listed
        within the outline.</p>
        <p>Multiple selectors can be combined using the methods shown below. However,
        not all kinds of selectors are supported in all places, at the moment.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-func">query</span><span class="typ-punct">(</span>
          heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span>
            <span class="typ-punct">.</span><span class="typ-func">or</span><span class="typ-punct">(</span>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          loc<span class="typ-punct">,</span>
        <span class="typ-punct">)</span><span class="typ-punct">)</span>

        <span class="typ-heading">= This will be found</span>
        <span class="typ-heading">== So will this</span>
        <span class="typ-heading">=== But this will not.</span>
        </code></pre><div class="preview"><img src="/assets/docs/da862a11bd774f20c7b06214da3ffa85.png" alt="Preview" width="480" height="190"/></div></div>
      constructor:
        path: []
        name: selector
        title: Construct
        keywords: []
        oneliner: 'Turns a value into a selector. The following values are accepted:'
        element: false
        details: |-
          <p>Turns a value into a selector. The following values are accepted:</p>
          <ul>
          <li>An element function like a <code>heading</code> or <code>figure</code>.</li>
          <li>A <code><span class="typ-label">&lt;label&gt;</span></code>.</li>
          <li>A more complex selector like <code>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span></code>.</li>
          </ul>
        example: null
        self: false
        params:
        - name: target
          details: |-
            <p>Can be an element function like a <code>heading</code> or <code>figure</code>, a <code><span class="typ-label">&lt;label&gt;</span></code>
            or a more complex selector like <code>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span></code>.</p>
          example: null
          types:
          - str
          - regex
          - label
          - selector
          - location
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - selector
        scope: []
      scope:
      - path:
        - selector
        name: or
        title: Or
        keywords: []
        oneliner: Selects all elements that match this or any of the other selectors.
        element: false
        details: <p>Selects all elements that match this or any of the other selectors.</p>
        example: null
        self: true
        params:
        - name: others
          details: <p>The other selectors to match on.</p>
          example: null
          types:
          - label
          - selector
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - selector
        scope: []
      - path:
        - selector
        name: and
        title: And
        keywords: []
        oneliner: Selects all elements that match this and all of the the other selectors.
        element: false
        details: <p>Selects all elements that match this and all of the the other
          selectors.</p>
        example: null
        self: true
        params:
        - name: others
          details: <p>The other selectors to match on.</p>
          example: null
          types:
          - label
          - selector
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - selector
        scope: []
      - path:
        - selector
        name: before
        title: Before
        keywords: []
        oneliner: Returns a modified selector that will only match elements that occur
        element: false
        details: |-
          <p>Returns a modified selector that will only match elements that occur
          before the first match of <code>end</code>.</p>
        example: null
        self: true
        params:
        - name: end
          details: <p>The original selection will end at the first match of <code>end</code>.</p>
          example: null
          types:
          - label
          - selector
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: inclusive
          details: |-
            <p>Whether <code>end</code> itself should match or not. This is only relevant if
            both selectors match the same type of element. Defaults to <code><span class="typ-key">true</span></code>.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - selector
        scope: []
      - path:
        - selector
        name: after
        title: After
        keywords: []
        oneliner: Returns a modified selector that will only match elements that occur
        element: false
        details: |-
          <p>Returns a modified selector that will only match elements that occur
          after the first match of <code>start</code>.</p>
        example: null
        self: true
        params:
        - name: start
          details: <p>The original selection will start at the first match of <code>start</code>.</p>
          example: null
          types:
          - label
          - selector
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: inclusive
          details: |-
            <p>Whether <code>start</code> itself should match or not. This is only relevant
            if both selectors match the same type of element. Defaults to
            <code><span class="typ-key">true</span></code>.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - selector
        scope: []
  children: []
- route: /docs/reference/foundations/str/
  title: String
  description: String 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: escapes
    name: Escapes
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-value
      name: value
      children: []
    - id: constructor-base
      name: base
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-len
      name: Length
      children: []
    - id: definitions-first
      name: First
      children: []
    - id: definitions-last
      name: Last
      children: []
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-index
        name: index
        children: []
      - id: definitions-at-default
        name: default
        children: []
    - id: definitions-slice
      name: Slice
      children:
      - id: definitions-slice-start
        name: start
        children: []
      - id: definitions-slice-end
        name: end
        children: []
      - id: definitions-slice-count
        name: count
        children: []
    - id: definitions-clusters
      name: Clusters
      children: []
    - id: definitions-codepoints
      name: Codepoints
      children: []
    - id: definitions-to-unicode
      name: To Unicode
      children:
      - id: definitions-to-unicode-character
        name: character
        children: []
    - id: definitions-from-unicode
      name: From Unicode
      children:
      - id: definitions-from-unicode-value
        name: value
        children: []
    - id: definitions-contains
      name: Contains
      children:
      - id: definitions-contains-pattern
        name: pattern
        children: []
    - id: definitions-starts-with
      name: Starts With
      children:
      - id: definitions-starts-with-pattern
        name: pattern
        children: []
    - id: definitions-ends-with
      name: Ends With
      children:
      - id: definitions-ends-with-pattern
        name: pattern
        children: []
    - id: definitions-find
      name: Find
      children:
      - id: definitions-find-pattern
        name: pattern
        children: []
    - id: definitions-position
      name: Position
      children:
      - id: definitions-position-pattern
        name: pattern
        children: []
    - id: definitions-match
      name: Match
      children:
      - id: definitions-match-pattern
        name: pattern
        children: []
    - id: definitions-matches
      name: Matches
      children:
      - id: definitions-matches-pattern
        name: pattern
        children: []
    - id: definitions-replace
      name: Replace
      children:
      - id: definitions-replace-pattern
        name: pattern
        children: []
      - id: definitions-replace-replacement
        name: replacement
        children: []
      - id: definitions-replace-count
        name: count
        children: []
    - id: definitions-trim
      name: Trim
      children:
      - id: definitions-trim-pattern
        name: pattern
        children: []
      - id: definitions-trim-at
        name: at
        children: []
      - id: definitions-trim-repeat
        name: repeat
        children: []
    - id: definitions-split
      name: Split
      children:
      - id: definitions-split-pattern
        name: pattern
        children: []
    - id: definitions-rev
      name: Reverse
      children: []
  body:
    kind: type
    content:
      name: str
      title: String
      keywords: []
      oneliner: A sequence of Unicode codepoints.
      details: |-
        <p>A sequence of Unicode codepoints.</p>
        <p>You can iterate over the grapheme clusters of the string using a <a href="/docs/reference/scripting/#loops">for
        loop</a>. Grapheme clusters are basically characters but
        keep together things that belong together, e.g. multiple codepoints that
        together form a flag emoji. Strings can be added with the <code>+</code> operator,
        <a href="/docs/reference/scripting/#blocks">joined together</a> and multiplied with integers.</p>
        <p>Typst provides utility methods for string manipulation. Many of these
        methods (e.g., <code>split</code>, <code>trim</code> and <code>replace</code>) operate on <em>patterns:</em> A
        pattern can be either a string or a <a href="/docs/reference/foundations/regex/">regular expression</a>. This makes
        the methods quite versatile.</p>
        <p>All lengths and indices are expressed in terms of UTF-8 bytes. Indices are
        zero-based and negative indices wrap around to the end of the string.</p>
        <p>You can convert a value to a string with this type's constructor.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-str">#</span><span class="typ-str">&quot;hello world!&quot;</span> <span class="typ-escape">\</span>
        <span class="typ-str">#</span><span class="typ-str">&quot;\&quot;hello\n  world\&quot;!&quot;</span> <span class="typ-escape">\</span>
        <span class="typ-str">#</span><span class="typ-str">&quot;1 2 3&quot;</span><span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-str">#</span><span class="typ-str">&quot;1,2;3&quot;</span><span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;[,;]&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;\d+&quot;</span><span class="typ-punct">)</span> <span class="typ-key">in</span> <span class="typ-str">&quot;ten euros&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-func">regex</span><span class="typ-punct">(</span><span class="typ-str">&quot;\d+&quot;</span><span class="typ-punct">)</span> <span class="typ-key">in</span> <span class="typ-str">&quot;10 euros&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/fe8f72d72ed461728703a63c2ea85397.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="escapes">Escape sequences</h2>
        <p>Just like in markup, you can escape a few symbols in strings:</p>
        <ul>
        <li><code><span class="typ-escape">\\</span></code> for a backslash</li>
        <li><code><span class="typ-escape">\&quot;</span></code> for a quote</li>
        <li><code><span class="typ-escape">\n</span></code> for a newline</li>
        <li><code><span class="typ-escape">\r</span></code> for a carriage return</li>
        <li><code><span class="typ-escape">\t</span></code> for a tab</li>
        <li><code><span class="typ-escape">\u{1f600}</span></code> for a hexadecimal Unicode escape sequence</li>
        </ul>
      constructor:
        path: []
        name: str
        title: Construct
        keywords: []
        oneliner: Converts a value to a string.
        element: false
        details: |-
          <p>Converts a value to a string.</p>
          <ul>
          <li>Integers are formatted in base 10. This can be overridden with the
          optional <code>base</code> parameter.</li>
          <li>Floats are formatted in base 10 and never in exponential notation.</li>
          <li>From labels the name is extracted.</li>
          <li>Bytes are decoded as UTF-8.</li>
          </ul>
          <p>If you wish to convert from and to Unicode code points, see the
          <a href="/docs/reference/foundations/str/#definitions-to-unicode"><code>to-unicode</code></a> and <a href="/docs/reference/foundations/str/#definitions-from-unicode"><code>from-unicode</code></a>
          functions.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">4000</span><span class="typ-punct">,</span> base<span class="typ-punct">:</span> <span class="typ-num">16</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">2.7</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-num">1e8</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">str</span><span class="typ-punct">(</span><span class="typ-label">&lt;intro&gt;</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/71784fd087e991ed4bd08ca4161a444a.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The value that should be converted to a string.</p>
          example: null
          types:
          - int
          - float
          - str
          - bytes
          - label
          - version
          - type
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: base
          details: <p>The base (radix) to display integers in, between 2 and 36.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">10</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - str
        scope: []
      scope:
      - path:
        - str
        name: len
        title: Length
        keywords: []
        oneliner: The length of the string in UTF-8 encoded bytes.
        element: false
        details: <p>The length of the string in UTF-8 encoded bytes.</p>
        example: null
        self: true
        params: []
        returns:
        - int
        scope: []
      - path:
        - str
        name: first
        title: First
        keywords: []
        oneliner: Extracts the first grapheme cluster of the string.
        element: false
        details: |-
          <p>Extracts the first grapheme cluster of the string.
          Fails with an error if the string is empty.</p>
        example: null
        self: true
        params: []
        returns:
        - str
        scope: []
      - path:
        - str
        name: last
        title: Last
        keywords: []
        oneliner: Extracts the last grapheme cluster of the string.
        element: false
        details: |-
          <p>Extracts the last grapheme cluster of the string.
          Fails with an error if the string is empty.</p>
        example: null
        self: true
        params: []
        returns:
        - str
        scope: []
      - path:
        - str
        name: at
        title: At
        keywords: []
        oneliner: Extracts the first grapheme cluster after the specified index. Returns
        element: false
        details: |-
          <p>Extracts the first grapheme cluster after the specified index. Returns
          the default value if the index is out of bounds or fails with an error
          if no default value was specified.</p>
        example: null
        self: true
        params:
        - name: index
          details: <p>The byte index. If negative, indexes from the back.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: default
          details: <p>A default value to return if the index is out of bounds.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - str
        name: slice
        title: Slice
        keywords: []
        oneliner: Extracts a substring of the string.
        element: false
        details: |-
          <p>Extracts a substring of the string.
          Fails with an error if the start or end index is out of bounds.</p>
        example: null
        self: true
        params:
        - name: start
          details: |-
            <p>The start byte index (inclusive). If negative, indexes from the
            back.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: end
          details: |-
            <p>The end byte index (exclusive). If omitted, the whole slice until
            the end of the string is extracted. If negative, indexes from the
            back.</p>
          example: null
          types:
          - none
          - int
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: count
          details: |-
            <p>The number of bytes to extract. This is equivalent to passing
            <code>start + count</code> as the <code>end</code> position. Mutually exclusive with <code>end</code>.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - str
        scope: []
      - path:
        - str
        name: clusters
        title: Clusters
        keywords: []
        oneliner: Returns the grapheme clusters of the string as an array of substrings.
        element: false
        details: <p>Returns the grapheme clusters of the string as an array of substrings.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - str
        name: codepoints
        title: Codepoints
        keywords: []
        oneliner: Returns the Unicode codepoints of the string as an array of substrings.
        element: false
        details: <p>Returns the Unicode codepoints of the string as an array of substrings.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - str
        name: to-unicode
        title: To Unicode
        keywords: []
        oneliner: Converts a character into its corresponding code point.
        element: false
        details: <p>Converts a character into its corresponding code point.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-str">#</span><span class="typ-str">&quot;a&quot;</span><span class="typ-punct">.</span><span class="typ-func">to-unicode</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-str">&quot;a\u{0300}&quot;</span>
             <span class="typ-punct">.</span><span class="typ-func">codepoints</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
             <span class="typ-punct">.</span><span class="typ-func">map</span><span class="typ-punct">(</span>str<span class="typ-punct">.</span>to-unicode<span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/ed02b88f26d6c1c42a27d310a9c25f90.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: character
          details: <p>The character that should be converted.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - str
        name: from-unicode
        title: From Unicode
        keywords: []
        oneliner: Converts a unicode code point into its corresponding string.
        element: false
        details: <p>Converts a unicode code point into its corresponding string.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">str</span><span class="typ-punct">.</span><span class="typ-func">from-unicode</span><span class="typ-punct">(</span><span class="typ-num">97</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e6b3b512395c30de853382f7a0c680ad.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The code point that should be converted.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - str
        scope: []
      - path:
        - str
        name: contains
        title: Contains
        keywords: []
        oneliner: Whether the string contains the specified pattern.
        element: false
        details: |-
          <p>Whether the string contains the specified pattern.</p>
          <p>This method also has dedicated syntax: You can write <code><span class="typ-str">&quot;bc&quot;</span> <span class="typ-key">in</span> <span class="typ-str">&quot;abcd&quot;</span></code>
          instead of <code><span class="typ-str">&quot;abcd&quot;</span><span class="typ-punct">.</span><span class="typ-func">contains</span><span class="typ-punct">(</span><span class="typ-str">&quot;bc&quot;</span><span class="typ-punct">)</span></code>.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to search for.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - str
        name: starts-with
        title: Starts With
        keywords: []
        oneliner: Whether the string starts with the specified pattern.
        element: false
        details: <p>Whether the string starts with the specified pattern.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern the string might start with.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - str
        name: ends-with
        title: Ends With
        keywords: []
        oneliner: Whether the string ends with the specified pattern.
        element: false
        details: <p>Whether the string ends with the specified pattern.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern the string might end with.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - str
        name: find
        title: Find
        keywords: []
        oneliner: Searches for the specified pattern in the string and returns the
          first
        element: false
        details: |-
          <p>Searches for the specified pattern in the string and returns the first
          match as a string or <code><span class="typ-key">none</span></code> if there is no match.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to search for.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - none
        - str
        scope: []
      - path:
        - str
        name: position
        title: Position
        keywords: []
        oneliner: Searches for the specified pattern in the string and returns the
          index
        element: false
        details: |-
          <p>Searches for the specified pattern in the string and returns the index
          of the first match as an integer or <code><span class="typ-key">none</span></code> if there is no match.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to search for.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - none
        - int
        scope: []
      - path:
        - str
        name: match
        title: Match
        keywords: []
        oneliner: Searches for the specified pattern in the string and returns a
        element: false
        details: |-
          <p>Searches for the specified pattern in the string and returns a
          dictionary with details about the first match or <code><span class="typ-key">none</span></code> if there is no
          match.</p>
          <p>The returned dictionary has the following keys:</p>
          <ul>
          <li><code>start</code>: The start offset of the match</li>
          <li><code>end</code>: The end offset of the match</li>
          <li><code>text</code>: The text that matched.</li>
          <li><code>captures</code>: An array containing a string for each matched capturing
          group. The first item of the array contains the first matched
          capturing, not the whole match! This is empty unless the <code>pattern</code> was
          a regex with capturing groups.</li>
          </ul>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to search for.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - none
        - dictionary
        scope: []
      - path:
        - str
        name: matches
        title: Matches
        keywords: []
        oneliner: Searches for the specified pattern in the string and returns an
          array of
        element: false
        details: |-
          <p>Searches for the specified pattern in the string and returns an array of
          dictionaries with details about all matches. For details about the
          returned dictionaries, see above.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to search for.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - str
        name: replace
        title: Replace
        keywords: []
        oneliner: Replace at most `count` occurrences of the given pattern with a
        element: false
        details: |-
          <p>Replace at most <code>count</code> occurrences of the given pattern with a
          replacement string or function (beginning from the start). If no count
          is given, all occurrences are replaced.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to search for.</p>
          example: null
          types:
          - str
          - regex
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: replacement
          details: |-
            <p>The string to replace the matches with or a function that gets a
            dictionary for each match and can return individual replacement
            strings.</p>
          example: null
          types:
          - str
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: count
          details: <p>If given, only the first <code>count</code> matches of the pattern
            are placed.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - str
        scope: []
      - path:
        - str
        name: trim
        title: Trim
        keywords: []
        oneliner: Removes matches of a pattern from one or both sides of the string,
          once or
        element: false
        details: |-
          <p>Removes matches of a pattern from one or both sides of the string, once or
          repeatedly and returns the resulting string.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to search for.</p>
          example: null
          types:
          - none
          - str
          - regex
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: at
          details: |-
            <p>Can be <code>start</code> or <code>end</code> to only trim the start or end of the string.
            If omitted, both sides are trimmed.</p>
          example: null
          types:
          - alignment
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: repeat
          details: |-
            <p>Whether to repeatedly removes matches of the pattern or just once.
            Defaults to <code><span class="typ-key">true</span></code>.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - str
        scope: []
      - path:
        - str
        name: split
        title: Split
        keywords: []
        oneliner: Splits a string at matches of a specified pattern and returns an
          array
        element: false
        details: |-
          <p>Splits a string at matches of a specified pattern and returns an array
          of the resulting parts.</p>
        example: null
        self: true
        params:
        - name: pattern
          details: <p>The pattern to split at. Defaults to whitespace.</p>
          example: null
          types:
          - none
          - str
          - regex
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - str
        name: rev
        title: Reverse
        keywords: []
        oneliner: Reverse the string.
        element: false
        details: <p>Reverse the string.</p>
        example: null
        self: true
        params: []
        returns:
        - str
        scope: []
  children: []
- route: /docs/reference/foundations/style/
  title: Style
  description: '`style` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-func
      name: func
      children: []
  body:
    kind: func
    content:
      path: []
      name: style
      title: Style
      keywords: []
      oneliner: Provides access to active styles.
      element: false
      details: |-
        <p>Provides access to active styles.</p>
        <p>The styles are currently opaque and only useful in combination with the
        <a href="/docs/reference/layout/measure/"><code>measure</code></a> function. See its documentation for more details. In
        the future, the provided styles might also be directly accessed to look up
        styles defined by <a href="/docs/reference/styling/#set-rules">set rules</a>.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">thing</span><span class="typ-punct">(</span>body<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">style</span><span class="typ-punct">(</span>styles <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> size <span class="typ-op">=</span> <span class="typ-func">measure</span><span class="typ-punct">(</span>body<span class="typ-punct">,</span> styles<span class="typ-punct">)</span>
          <span class="typ-punct">[</span>Width of &quot;<span class="typ-pol">#</span><span class="typ-pol">body</span>&quot; is <span class="typ-pol">#</span><span class="typ-pol">size</span><span class="typ-punct">.</span><span class="typ-pol">width</span><span class="typ-punct">]</span>
        <span class="typ-punct">}</span><span class="typ-punct">)</span>

        <span class="typ-func">#</span><span class="typ-func">thing</span><span class="typ-punct">[</span>Hey<span class="typ-punct">]</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">thing</span><span class="typ-punct">[</span>Welcome<span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/83a224c4e09a77e16796d6bccb0b41fd.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: func
        details: |-
          <p>A function to call with the styles. Its return value is displayed
          in the document.</p>
          <p>This function is called once for each time the content returned by
          <code>style</code> appears in the document. That makes it possible to generate
          content that depends on the style context it appears in.</p>
        example: null
        types:
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/foundations/type/
  title: Type
  description: Type 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: compatibility
    name: Compatibility
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-value
      name: value
      children: []
  body:
    kind: type
    content:
      name: type
      title: Type
      keywords: []
      oneliner: Describes a kind of value.
      details: |-
        <p>Describes a kind of value.</p>
        <p>To style your document, you need to work with values of different kinds:
        Lengths specifying the size of your elements, colors for your text and
        shapes, and more. Typst categorizes these into clearly defined <em>types</em> and
        tells you where it expects which type of value.</p>
        <p>Apart from basic types for numeric values and <a href="/docs/reference/foundations/int/">typical</a>
        <a href="/docs/reference/foundations/float/">types</a> <a href="/docs/reference/foundations/str/">known</a> <a href="/docs/reference/foundations/array/">from</a> <a href="/docs/reference/foundations/dictionary/">programming</a>
        languages, Typst provides a special type for <a href="/docs/reference/foundations/content/"><em>content.</em></a> A value
        of this type can hold anything that you can enter into your document: Text,
        elements like headings and shapes, and style information.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> x <span class="typ-op">=</span> <span class="typ-num">10</span>
        <span class="typ-key">#</span><span class="typ-key">if</span> <span class="typ-func">type</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span> <span class="typ-op">==</span> int <span class="typ-punct">[</span>
          <span class="typ-pol">#</span><span class="typ-pol">x</span> is an integer!
        <span class="typ-punct">]</span> <span class="typ-key">else</span> <span class="typ-punct">[</span>
          <span class="typ-pol">#</span><span class="typ-pol">x</span> is another value<span class="typ-escape">...</span>
        <span class="typ-punct">]</span>

        An image is of type
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-func">image</span><span class="typ-punct">(</span><span class="typ-str">&quot;glacier.jpg&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>.
        </code></pre><div class="preview"><img src="/assets/docs/0ba7a1a71078943ca61975979b9abd02.png" alt="Preview" width="480" height="190"/></div></div>
        <p>The type of <code>10</code> is <code>int</code>. Now, what is the type of <code>int</code> or even <code>type</code>?</p>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>int<span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>type<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/88d8a7cb06ad3fde425cdadfb686d1d2.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="compatibility">Compatibility</h2>
        <p>In Typst 0.7 and lower, the <code>type</code> function returned a string instead of a
        type. Compatibility with the old way will remain for a while to give package
        authors time to upgrade, but it will be removed at some point.</p>
        <ul>
        <li>Checks like <code>int <span class="typ-op">==</span> <span class="typ-str">&quot;integer&quot;</span></code> evaluate to <code><span class="typ-key">true</span></code></li>
        <li>Adding/joining a type and string will yield a string</li>
        <li>The <code><span class="typ-key">in</span></code> operator on a type and a dictionary will evaluate to <code><span class="typ-key">true</span></code>
        if the dictionary has a string key matching the type's name</li>
        </ul>
      constructor:
        path: []
        name: type
        title: Construct
        keywords: []
        oneliner: Determines a value's type.
        element: false
        details: <p>Determines a value's type.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-num">12</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-num">14.7</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-str">&quot;hello&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-label">&lt;glacier&gt;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span><span class="typ-punct">[</span>Hi<span class="typ-punct">]</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>x <span class="typ-op">=&gt;</span> x <span class="typ-op">+</span> <span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">type</span><span class="typ-punct">(</span>type<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/88c574347f8e7e1205fedc4185307745.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The value whose type's to determine.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - type
        scope: []
      scope: []
  children: []
- route: /docs/reference/foundations/version/
  title: Version
  description: Version 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-components
      name: components
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-index
        name: index
        children: []
  body:
    kind: type
    content:
      name: version
      title: Version
      keywords: []
      oneliner: A version with an arbitrary number of components.
      details: |-
        <p>A version with an arbitrary number of components.</p>
        <p>The first three components have names that can be used as fields: <code>major</code>,
        <code>minor</code>, <code>patch</code>. All following components do not have names.</p>
        <p>The list of components is semantically extended by an infinite list of
        zeros. This means that, for example, <code>0.8</code> is the same as <code>0.8.0</code>. As a
        special case, the empty version (that has no components at all) is the same
        as <code>0</code>, <code>0.0</code>, <code>0.0.0</code>, and so on.</p>
        <p>You can convert a version to an array of explicitly given components using
        the <a href="/docs/reference/foundations/array/"><code>array</code></a> constructor.</p>
      constructor:
        path: []
        name: version
        title: Construct
        keywords: []
        oneliner: Creates a new version.
        element: false
        details: |-
          <p>Creates a new version.</p>
          <p>It can have any number of components (even zero).</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">version</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">version</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">version</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">version</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">version</span><span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/62d651ad51510ac4160a16db93d33568.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: components
          details: <p>The components of the version (array arguments are flattened)</p>
          example: null
          types:
          - int
          - array
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - version
        scope: []
      scope:
      - path:
        - version
        name: at
        title: At
        keywords: []
        oneliner: Retrieves a component of a version.
        element: false
        details: |-
          <p>Retrieves a component of a version.</p>
          <p>The returned integer is always non-negative. Returns <code>0</code> if the version
          isn't specified to the necessary length.</p>
        example: null
        self: true
        params:
        - name: index
          details: |-
            <p>The index at which to retrieve the component. If negative, indexes
            from the back of the explicitly given components.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
  children: []
- route: /docs/reference/foundations/sys
  title: 系统
  description: sys 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: functions
    name: Functions
    children: []
  body:
    kind: group
    content:
      name: sys
      title: 系统
      details: |-
        <p>用于系统交互的模块。</p>
        <p>目前，此模块定义了一个项目：<code>sys.version</code> 常量（类型为 <a href="/docs/reference/foundations/version/"><code>version</code></a>），指定当前活动的 Typst 编译器版本。</p>
      functions: []
  children: []
- route: /docs/reference/foundations/calc
  title: 计算
  description: calc 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-abs
      name: Absolute
      children:
      - id: functions-abs-value
        name: value
        children: []
    - id: functions-pow
      name: Power
      children:
      - id: functions-pow-base
        name: base
        children: []
      - id: functions-pow-exponent
        name: exponent
        children: []
    - id: functions-exp
      name: Exponential
      children:
      - id: functions-exp-exponent
        name: exponent
        children: []
    - id: functions-sqrt
      name: Square Root
      children:
      - id: functions-sqrt-value
        name: value
        children: []
    - id: functions-root
      name: Root
      children:
      - id: functions-root-radicand
        name: radicand
        children: []
      - id: functions-root-index
        name: index
        children: []
    - id: functions-sin
      name: Sine
      children:
      - id: functions-sin-angle
        name: angle
        children: []
    - id: functions-cos
      name: Cosine
      children:
      - id: functions-cos-angle
        name: angle
        children: []
    - id: functions-tan
      name: Tangent
      children:
      - id: functions-tan-angle
        name: angle
        children: []
    - id: functions-asin
      name: Arcsine
      children:
      - id: functions-asin-value
        name: value
        children: []
    - id: functions-acos
      name: Arccosine
      children:
      - id: functions-acos-value
        name: value
        children: []
    - id: functions-atan
      name: Arctangent
      children:
      - id: functions-atan-value
        name: value
        children: []
    - id: functions-atan2
      name: Four-quadrant Arctangent
      children:
      - id: functions-atan2-x
        name: x
        children: []
      - id: functions-atan2-y
        name: y
        children: []
    - id: functions-sinh
      name: Hyperbolic Sine
      children:
      - id: functions-sinh-value
        name: value
        children: []
    - id: functions-cosh
      name: Hyperbolic Cosine
      children:
      - id: functions-cosh-value
        name: value
        children: []
    - id: functions-tanh
      name: Hyperbolic Tangent
      children:
      - id: functions-tanh-value
        name: value
        children: []
    - id: functions-log
      name: Logarithm
      children:
      - id: functions-log-value
        name: value
        children: []
      - id: functions-log-base
        name: base
        children: []
    - id: functions-ln
      name: Natural Logarithm
      children:
      - id: functions-ln-value
        name: value
        children: []
    - id: functions-fact
      name: Factorial
      children:
      - id: functions-fact-number
        name: number
        children: []
    - id: functions-perm
      name: Permutation
      children:
      - id: functions-perm-base
        name: base
        children: []
      - id: functions-perm-numbers
        name: numbers
        children: []
    - id: functions-binom
      name: Binomial
      children:
      - id: functions-binom-n
        name: n
        children: []
      - id: functions-binom-k
        name: k
        children: []
    - id: functions-gcd
      name: Greatest Common Divisor
      children:
      - id: functions-gcd-a
        name: a
        children: []
      - id: functions-gcd-b
        name: b
        children: []
    - id: functions-lcm
      name: Least Common Multiple
      children:
      - id: functions-lcm-a
        name: a
        children: []
      - id: functions-lcm-b
        name: b
        children: []
    - id: functions-floor
      name: Floor
      children:
      - id: functions-floor-value
        name: value
        children: []
    - id: functions-ceil
      name: Ceil
      children:
      - id: functions-ceil-value
        name: value
        children: []
    - id: functions-trunc
      name: Truncate
      children:
      - id: functions-trunc-value
        name: value
        children: []
    - id: functions-fract
      name: Fractional
      children:
      - id: functions-fract-value
        name: value
        children: []
    - id: functions-round
      name: Round
      children:
      - id: functions-round-value
        name: value
        children: []
      - id: functions-round-digits
        name: digits
        children: []
    - id: functions-clamp
      name: Clamp
      children:
      - id: functions-clamp-value
        name: value
        children: []
      - id: functions-clamp-min
        name: min
        children: []
      - id: functions-clamp-max
        name: max
        children: []
    - id: functions-min
      name: Minimum
      children:
      - id: functions-min-values
        name: values
        children: []
    - id: functions-max
      name: Maximum
      children:
      - id: functions-max-values
        name: values
        children: []
    - id: functions-even
      name: Even
      children:
      - id: functions-even-value
        name: value
        children: []
    - id: functions-odd
      name: Odd
      children:
      - id: functions-odd-value
        name: value
        children: []
    - id: functions-rem
      name: Remainder
      children:
      - id: functions-rem-dividend
        name: dividend
        children: []
      - id: functions-rem-divisor
        name: divisor
        children: []
    - id: functions-div-euclid
      name: Euclidean Division
      children:
      - id: functions-div-euclid-dividend
        name: dividend
        children: []
      - id: functions-div-euclid-divisor
        name: divisor
        children: []
    - id: functions-rem-euclid
      name: Euclidean Remainder
      children:
      - id: functions-rem-euclid-dividend
        name: dividend
        children: []
      - id: functions-rem-euclid-divisor
        name: divisor
        children: []
    - id: functions-quo
      name: Quotient
      children:
      - id: functions-quo-dividend
        name: dividend
        children: []
      - id: functions-quo-divisor
        name: divisor
        children: []
  body:
    kind: group
    content:
      name: calc
      title: 计算
      details: |-
        <p>用于计算和处理数字值的模块。</p>
        <p>这些定义是 <code>calc</code> 模块的一部分，不会默认导入。除了下面列出的功能之外，<code>calc</code> 模块还定义了常量 <code>pi</code>、<code>tau</code>、<code>e</code>、<code>inf</code> 和 <code>nan</code>。</p>
      functions:
      - path:
        - calc
        name: abs
        title: Absolute
        keywords: []
        oneliner: Calculates the absolute value of a numeric value.
        element: false
        details: <p>Calculates the absolute value of a numeric value.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-num">5pt</span> <span class="typ-op">-</span> <span class="typ-num">2cm</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-num">2fr</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e510ee8d00f4e2c888a53ba546c26c14.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The value whose absolute value to calculate.</p>
          example: null
          types:
          - int
          - float
          - length
          - angle
          - ratio
          - fraction
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - calc
        name: pow
        title: Power
        keywords: []
        oneliner: Raises a value to some exponent.
        element: false
        details: <p>Raises a value to some exponent.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">pow</span><span class="typ-punct">(</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/d58c2fba1429f6271ecfa7220f6d8199.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: base
          details: <p>The base of the power.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: exponent
          details: <p>The exponent of the power.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - float
        scope: []
      - path:
        - calc
        name: exp
        title: Exponential
        keywords: []
        oneliner: Raises a value to some exponent of e.
        element: false
        details: <p>Raises a value to some exponent of e.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">exp</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/49f9c1f68f122165e1705342c87d7985.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: exponent
          details: <p>The exponent of the power.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: sqrt
        title: Square Root
        keywords: []
        oneliner: Calculates the square root of a number.
        element: false
        details: <p>Calculates the square root of a number.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sqrt</span><span class="typ-punct">(</span><span class="typ-num">16</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sqrt</span><span class="typ-punct">(</span><span class="typ-num">2.5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/5b931ca2767047a142be8cc72f87d802.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number whose square root to calculate. Must be non-negative.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: root
        title: Root
        keywords: []
        oneliner: Calculates the real nth root of a number.
        element: false
        details: |-
          <p>Calculates the real nth root of a number.</p>
          <p>If the number is negative, then n must be odd.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">root</span><span class="typ-punct">(</span><span class="typ-num">16.0</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">root</span><span class="typ-punct">(</span><span class="typ-num">27.0</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/9477308c0aacce626b93671a71fa8927.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: radicand
          details: <p>The expression to take the root of</p>
          example: null
          types:
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: index
          details: <p>Which root of the radicand to take</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: sin
        title: Sine
        keywords: []
        oneliner: Calculates the sine of an angle.
        element: false
        details: |-
          <p>Calculates the sine of an angle.</p>
          <p>When called with an integer or a float, they will be interpreted as
          radians.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span> <span class="typ-op">==</span> calc<span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">270deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sin</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/9a343f290b69c6546ce3068c8c32d9ea.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: angle
          details: <p>The angle whose sine to calculate.</p>
          example: null
          types:
          - int
          - float
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: cos
        title: Cosine
        keywords: []
        oneliner: Calculates the cosine of an angle.
        element: false
        details: |-
          <p>Calculates the cosine of an angle.</p>
          <p>When called with an integer or a float, they will be interpreted as
          radians.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cos</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cos</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cos</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/5eefa7a2d93c8b89041d62c4187a2c30.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: angle
          details: <p>The angle whose cosine to calculate.</p>
          example: null
          types:
          - int
          - float
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: tan
        title: Tangent
        keywords: []
        oneliner: Calculates the tangent of an angle.
        element: false
        details: |-
          <p>Calculates the tangent of an angle.</p>
          <p>When called with an integer or a float, they will be interpreted as
          radians.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tan</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tan</span><span class="typ-punct">(</span><span class="typ-num">90deg</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/b0d4d791b53918afd48eadd8d8a486c6.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: angle
          details: <p>The angle whose tangent to calculate.</p>
          example: null
          types:
          - int
          - float
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: asin
        title: Arcsine
        keywords: []
        oneliner: Calculates the arcsine of a number.
        element: false
        details: <p>Calculates the arcsine of a number.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">asin</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">asin</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/4e3534f3677072cae71d2151b1ea3cca.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number whose arcsine to calculate. Must be between -1 and
            1.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - angle
        scope: []
      - path:
        - calc
        name: acos
        title: Arccosine
        keywords: []
        oneliner: Calculates the arccosine of a number.
        element: false
        details: <p>Calculates the arccosine of a number.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">acos</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">acos</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/0423e3e221058490a01d9be936113706.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number whose arcsine to calculate. Must be between -1 and
            1.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - angle
        scope: []
      - path:
        - calc
        name: atan
        title: Arctangent
        keywords: []
        oneliner: Calculates the arctangent of a number.
        element: false
        details: <p>Calculates the arctangent of a number.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/0c307d4fe6fb00142b84518f3bb1869a.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number whose arctangent to calculate.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - angle
        scope: []
      - path:
        - calc
        name: atan2
        title: Four-quadrant Arctangent
        keywords: []
        oneliner: Calculates the four-quadrant arctangent of a coordinate.
        element: false
        details: |-
          <p>Calculates the four-quadrant arctangent of a coordinate.</p>
          <p>The arguments are <code>(x, y)</code>, not <code>(y, x)</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan2</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">atan2</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/d804133f4d02ee61b3a7f5a4ad5f0a4c.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: x
          details: <p>The X coordinate.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: y
          details: <p>The Y coordinate.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - angle
        scope: []
      - path:
        - calc
        name: sinh
        title: Hyperbolic Sine
        keywords: []
        oneliner: Calculates the hyperbolic sine of a hyperbolic angle.
        element: false
        details: <p>Calculates the hyperbolic sine of a hyperbolic angle.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sinh</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">sinh</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/c062ac2864096e6a91bf82cade922dbe.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The hyperbolic angle whose hyperbolic sine to calculate.</p>
          example: null
          types:
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: cosh
        title: Hyperbolic Cosine
        keywords: []
        oneliner: Calculates the hyperbolic cosine of a hyperbolic angle.
        element: false
        details: <p>Calculates the hyperbolic cosine of a hyperbolic angle.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cosh</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">cosh</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/8731566fc671a877e2755e69793fc8c9.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The hyperbolic angle whose hyperbolic cosine to calculate.</p>
          example: null
          types:
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: tanh
        title: Hyperbolic Tangent
        keywords: []
        oneliner: Calculates the hyperbolic tangent of an hyperbolic angle.
        element: false
        details: <p>Calculates the hyperbolic tangent of an hyperbolic angle.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tanh</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">tanh</span><span class="typ-punct">(</span><span class="typ-num">1.5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/a5cf70185c7cdd1289b110da69dde187.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The hyperbolic angle whose hyperbolic tangent to calculate.</p>
          example: null
          types:
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: log
        title: Logarithm
        keywords: []
        oneliner: Calculates the logarithm of a number.
        element: false
        details: |-
          <p>Calculates the logarithm of a number.</p>
          <p>If the base is not specified, the logarithm is calculated in base 10.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">log</span><span class="typ-punct">(</span><span class="typ-num">100</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/f280746542998704b07551b9c4f7a334.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number whose logarithm to calculate. Must be strictly positive.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: base
          details: <p>The base of the logarithm. May not be zero.</p>
          example: null
          types:
          - float
          strings: []
          default: <code><span class="typ-num">10</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: ln
        title: Natural Logarithm
        keywords: []
        oneliner: Calculates the natural logarithm of a number.
        element: false
        details: <p>Calculates the natural logarithm of a number.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">ln</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>e<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e809f2f5235f582e80badf01f1c5ec1b.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number whose logarithm to calculate. Must be strictly positive.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - float
        scope: []
      - path:
        - calc
        name: fact
        title: Factorial
        keywords: []
        oneliner: Calculates the factorial of a number.
        element: false
        details: <p>Calculates the factorial of a number.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">fact</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/10eb9ad85b719fb4313dbb869b5f20ad.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: number
          details: <p>The number whose factorial to calculate. Must be non-negative.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: perm
        title: Permutation
        keywords: []
        oneliner: Calculates a permutation.
        element: false
        details: |-
          <p>Calculates a permutation.</p>
          <p>Returns the <code>k</code>-permutation of <code>n</code>, or the number of ways to choose <code>k</code>
          items from a set of <code>n</code> with regard to order.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-str">&quot;perm&quot;</span>(n, k) <span class="typ-math-op">&amp;</span>= n!<span class="typ-math-op">/</span><span class="typ-punct">(</span>(n <span class="typ-escape">-</span> k)!<span class="typ-punct">)</span> <span class="typ-escape">\</span>
            <span class="typ-str">&quot;perm&quot;</span>(5, 3) <span class="typ-math-op">&amp;</span>= <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">perm</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/8ba0160417321b9b7330d12b12d38315.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: base
          details: <p>The base number. Must be non-negative.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: numbers
          details: <p>The number of permutations. Must be non-negative.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: binom
        title: Binomial
        keywords: []
        oneliner: Calculates a binomial coefficient.
        element: false
        details: |-
          <p>Calculates a binomial coefficient.</p>
          <p>Returns the <code>k</code>-combination of <code>n</code>, or the number of ways to choose <code>k</code>
          items from a set of <code>n</code> without regard to order.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">binom</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/09fcfb4060edd792a9285daa8214210e.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: n
          details: <p>The upper coefficient. Must be non-negative.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: k
          details: <p>The lower coefficient. Must be non-negative.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: gcd
        title: Greatest Common Divisor
        keywords: []
        oneliner: Calculates the greatest common divisor of two integers.
        element: false
        details: <p>Calculates the greatest common divisor of two integers.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">gcd</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">42</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/c0d8d5caa2ef320457568f72d8e52e67.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: a
          details: <p>The first integer.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: b
          details: <p>The second integer.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: lcm
        title: Least Common Multiple
        keywords: []
        oneliner: Calculates the least common multiple of two integers.
        element: false
        details: <p>Calculates the least common multiple of two integers.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">lcm</span><span class="typ-punct">(</span><span class="typ-num">96</span><span class="typ-punct">,</span> <span class="typ-num">13</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/76ea73b1ad252a14e59212e49a6375fb.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: a
          details: <p>The first integer.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: b
          details: <p>The second integer.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: floor
        title: Floor
        keywords: []
        oneliner: Rounds a number down to the nearest integer.
        element: false
        details: |-
          <p>Rounds a number down to the nearest integer.</p>
          <p>If the number is already an integer, it is returned unchanged.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">floor</span><span class="typ-punct">(</span><span class="typ-num">3.14</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">floor</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">floor</span><span class="typ-punct">(</span><span class="typ-num">500.1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/61eb20d7f3cd6373b777b4b105768cc6.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to round down.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: ceil
        title: Ceil
        keywords: []
        oneliner: Rounds a number up to the nearest integer.
        element: false
        details: |-
          <p>Rounds a number up to the nearest integer.</p>
          <p>If the number is already an integer, it is returned unchanged.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">ceil</span><span class="typ-punct">(</span><span class="typ-num">3.14</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">ceil</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">ceil</span><span class="typ-punct">(</span><span class="typ-num">500.1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/69b2ab694eb4909e595d80cf4942bd27.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to round up.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: trunc
        title: Truncate
        keywords: []
        oneliner: Returns the integer part of a number.
        element: false
        details: |-
          <p>Returns the integer part of a number.</p>
          <p>If the number is already an integer, it is returned unchanged.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">trunc</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">trunc</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">3.7</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">trunc</span><span class="typ-punct">(</span><span class="typ-num">15.9</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/a8f77e7eaa51dc0a953d69933f1e263f.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to truncate.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
      - path:
        - calc
        name: fract
        title: Fractional
        keywords: []
        oneliner: Returns the fractional part of a number.
        element: false
        details: |-
          <p>Returns the fractional part of a number.</p>
          <p>If the number is an integer, returns <code>0</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">fract</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">0</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">fract</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">3.1</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e95d212f509a3f674b880f65d01a720a.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to truncate.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - float
        scope: []
      - path:
        - calc
        name: round
        title: Round
        keywords: []
        oneliner: Rounds a number to the nearest integer.
        element: false
        details: |-
          <p>Rounds a number to the nearest integer.</p>
          <p>Optionally, a number of decimal places can be specified.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">round</span><span class="typ-punct">(</span><span class="typ-num">3.14</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">round</span><span class="typ-punct">(</span><span class="typ-num">3.5</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">round</span><span class="typ-punct">(</span><span class="typ-num">3.1415</span><span class="typ-punct">,</span> digits<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/909cf2add30990bd12abe88252ffd37d.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to round.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: digits
          details: <p>The number of decimal places.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">0</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - int
        - float
        scope: []
      - path:
        - calc
        name: clamp
        title: Clamp
        keywords: []
        oneliner: Clamps a number between a minimum and maximum value.
        element: false
        details: <p>Clamps a number between a minimum and maximum value.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">clamp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">,</span> <span class="typ-num">10</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">5</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">assert</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span><span class="typ-func">clamp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">6</span><span class="typ-punct">,</span> <span class="typ-num">10</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-num">6</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">clamp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">,</span> <span class="typ-num">4</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/73b6c954f13326954ddededb400d41c2.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to clamp.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: min
          details: <p>The inclusive minimum value.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: max
          details: <p>The inclusive maximum value.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - float
        scope: []
      - path:
        - calc
        name: min
        title: Minimum
        keywords: []
        oneliner: Determines the minimum of a sequence of values.
        element: false
        details: <p>Determines the minimum of a sequence of values.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">min</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">20</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">6</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">min</span><span class="typ-punct">(</span><span class="typ-str">&quot;typst&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;in&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;beta&quot;</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/fb22eeb2bde8fae1b41f607e630f4657.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: values
          details: |-
            <p>The sequence of values from which to extract the minimum.
            Must not be empty.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - any
        scope: []
      - path:
        - calc
        name: max
        title: Maximum
        keywords: []
        oneliner: Determines the maximum of a sequence of values.
        element: false
        details: <p>Determines the maximum of a sequence of values.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">max</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">20</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">,</span> <span class="typ-num">6</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">max</span><span class="typ-punct">(</span><span class="typ-str">&quot;typst&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;in&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;beta&quot;</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/0cc0245e974c507873103cb34aacc634.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: values
          details: |-
            <p>The sequence of values from which to extract the maximum.
            Must not be empty.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - any
        scope: []
      - path:
        - calc
        name: even
        title: Even
        keywords: []
        oneliner: Determines whether an integer is even.
        element: false
        details: <p>Determines whether an integer is even.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">even</span><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">even</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">filter</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>even<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/2621ae26c6c004f52ca08b301541a4b2.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to check for evenness.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - calc
        name: odd
        title: Odd
        keywords: []
        oneliner: Determines whether an integer is odd.
        element: false
        details: <p>Determines whether an integer is odd.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">odd</span><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">odd</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">filter</span><span class="typ-punct">(</span>calc<span class="typ-punct">.</span>odd<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/afd09ad4fbff9a70a0c9a4458e52bb14.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: value
          details: <p>The number to check for oddness.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bool
        scope: []
      - path:
        - calc
        name: rem
        title: Remainder
        keywords: []
        oneliner: Calculates the remainder of two numbers.
        element: false
        details: |-
          <p>Calculates the remainder of two numbers.</p>
          <p>The value <code>calc.rem(x, y)</code> always has the same sign as <code>x</code>, and is smaller
          in magnitude than <code>y</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">1.75</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e77bb2090ab9d5d93da0df8237fad1bd.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: dividend
          details: <p>The dividend of the remainder.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: divisor
          details: <p>The divisor of the remainder.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - float
        scope: []
      - path:
        - calc
        name: div-euclid
        title: Euclidean Division
        keywords: []
        oneliner: Performs euclidean division of two numbers.
        element: false
        details: |-
          <p>Performs euclidean division of two numbers.</p>
          <p>The result of this computation is that of a division rounded to the integer
          <code>n</code> such that the dividend is greater than or equal to <code>n</code> times the divisor.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">div-euclid</span><span class="typ-punct">(</span><span class="typ-num">1.75</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/bd780ec1a24e5250e30b9845c23817e7.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: dividend
          details: <p>The dividend of the division.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: divisor
          details: <p>The divisor of the division.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - float
        scope: []
      - path:
        - calc
        name: rem-euclid
        title: Euclidean Remainder
        keywords: []
        oneliner: This calculates the least nonnegative remainder of a division.
        element: false
        details: |-
          <p>This calculates the least nonnegative remainder of a division.</p>
          <p>Warning: Due to a floating point round-off error, the remainder may equal the absolute
          value of the divisor if the dividend is much smaller in magnitude than the divisor
          and the dividend is negative. This only applies for floating point inputs.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem-euclid</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">7</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">rem</span><span class="typ-punct">(</span><span class="typ-num">1.75</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/44d12330a4ce0842a3cc47a4628cac5f.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: dividend
          details: <p>The dividend of the remainder.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: divisor
          details: <p>The divisor of the remainder.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - float
        scope: []
      - path:
        - calc
        name: quo
        title: Quotient
        keywords: []
        oneliner: Calculates the quotient (floored division) of two numbers.
        element: false
        details: <p>Calculates the quotient (floored division) of two numbers.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-str">&quot;quo&quot;</span>(a, b) <span class="typ-math-op">&amp;</span>= <span class="typ-func">floor</span><span class="typ-punct">(</span>a<span class="typ-math-op">/</span>b<span class="typ-punct">)</span> <span class="typ-escape">\</span>
            <span class="typ-str">&quot;quo&quot;</span>(14, 5) <span class="typ-math-op">&amp;</span>= <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">quo</span><span class="typ-punct">(</span><span class="typ-num">14</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
            <span class="typ-str">&quot;quo&quot;</span>(3.46, 0.5) <span class="typ-math-op">&amp;</span>= <span class="typ-pol">#</span><span class="typ-pol">calc</span><span class="typ-punct">.</span><span class="typ-func">quo</span><span class="typ-punct">(</span><span class="typ-num">3.46</span><span class="typ-punct">,</span> <span class="typ-num">0.5</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/440f7e6e130cf956c93e8db3196f28fc.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: dividend
          details: <p>The dividend of the quotient.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: divisor
          details: <p>The divisor of the quotient.</p>
          example: null
          types:
          - int
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        scope: []
  children: []
