route: /docs/reference/text/
title: 文本
description: Typst 中与文本有关联的函数族的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: definitions
  name: Definitions
  children: []
body:
  kind: category
  content:
    name: text
    title: 文本
    details: |-
      <p>文本样式。</p>
      <p>其中 <a href="/docs/reference/text/text/">文本函数</a> 尤其有趣。</p>
    items:
    - name: highlight
      route: /docs/reference/text/highlight/
      oneliner: 高亮显示文本。
      code: true
    - name: linebreak
      route: /docs/reference/text/linebreak/
      oneliner: 插入换行符。
      code: true
    - name: lorem
      route: /docs/reference/text/lorem/
      oneliner: 创建假文。
      code: true
    - name: lower
      route: /docs/reference/text/lower/
      oneliner: 将字符串或内容转换为小写。
      code: true
    - name: overline
      route: /docs/reference/text/overline/
      oneliner: 在文本上方添加一条线。
      code: true
    - name: raw
      route: /docs/reference/text/raw/
      oneliner: 具有可选语法突出显示的原始文本。
      code: true
    - name: smallcaps
      route: /docs/reference/text/smallcaps/
      oneliner: 以小大写字母显示文本。
      code: true
    - name: smartquote
      route: /docs/reference/text/smartquote/
      oneliner: 对其上下文做出反应的语言感知引号。
      code: true
    - name: strike
      route: /docs/reference/text/strike/
      oneliner: 在文本中画一条线。
      code: true
    - name: sub
      route: /docs/reference/text/sub/
      oneliner: 以下标形式呈现文本。
      code: true
    - name: super
      route: /docs/reference/text/super/
      oneliner: 以上标形式呈现文本。
      code: true
    - name: text
      route: /docs/reference/text/text/
      oneliner: 以各种方式自定义文本的外观和布局。
      code: true
    - name: underline
      route: /docs/reference/text/underline/
      oneliner: 给文本加下划线。
      code: true
    - name: upper
      route: /docs/reference/text/upper/
      oneliner: 将字符串或内容转换为大写。
      code: true
    shorthands: null
children:
- route: /docs/reference/text/highlight/
  title: Highlight
  description: '`highlight` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-top-edge
      name: top-edge
      children: []
    - id: parameters-bottom-edge
      name: bottom-edge
      children: []
    - id: parameters-extent
      name: extent
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: highlight
      title: Highlight
      keywords: []
      oneliner: Highlights text with a background color.
      element: true
      details: |-
        <p>Highlights text with a background color.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>This is <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>important<span class="typ-punct">]</span>.
        </code></pre><div class="preview"><img src="/assets/docs/f83e413af4289329bae19114bf7b5ade.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: fill
        details: |-
          <p>The color to highlight the text with.
          (Default: 0xffff5f)</p>
        example: |-
          <div class="previewed-code"><pre><code>This is <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> blue<span class="typ-punct">)</span><span class="typ-punct">[</span>with blue<span class="typ-punct">]</span>.
          </code></pre><div class="preview"><img src="/assets/docs/111d0ec4615abd9bf808872af2ab2278.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span
          class="typ-str">&quot;#ffff5f&quot;</span><span class="typ-punct">)</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: top-edge
        details: <p>The top end of the background rectangle.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">highlight</span><span class="typ-punct">(</span>top-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;ascender&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>a<span class="typ-punct">]</span> <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>aib<span class="typ-punct">]</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">highlight</span><span class="typ-punct">(</span>top-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;x-height&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>a<span class="typ-punct">]</span> <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>aib<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/988df6ed3bd4d33f6d7bbdd6f6110ae1.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        - str
        strings:
        - string: ascender
          details: <p>The font's ascender, which typically exceeds the height of all
            glyphs.</p>
        - string: cap-height
          details: <p>The approximate height of uppercase letters.</p>
        - string: x-height
          details: <p>The approximate height of non-ascending lowercase letters.</p>
        - string: baseline
          details: <p>The baseline on which the letters rest.</p>
        - string: bounds
          details: <p>The top edge of the glyph's bounding box.</p>
        default: <code><span class="typ-str">&quot;ascender&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: bottom-edge
        details: <p>The bottom end of the background rectangle.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">highlight</span><span class="typ-punct">(</span>bottom-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;descender&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>a<span class="typ-punct">]</span> <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>ap<span class="typ-punct">]</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">highlight</span><span class="typ-punct">(</span>bottom-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;baseline&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>a<span class="typ-punct">]</span> <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">[</span>ap<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/856d2e8503440279a2d9d5ff9363f06f.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        - str
        strings:
        - string: baseline
          details: <p>The baseline on which the letters rest.</p>
        - string: descender
          details: <p>The font's descender, which typically exceeds the depth of all
            glyphs.</p>
        - string: bounds
          details: <p>The bottom edge of the glyph's bounding box.</p>
        default: <code><span class="typ-str">&quot;descender&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: extent
        details: |-
          <p>The amount by which to extend the background to the sides beyond
          (or within if negative) the content.</p>
        example: |-
          <div class="previewed-code"><pre><code>A long <span class="typ-func">#</span><span class="typ-func">highlight</span><span class="typ-punct">(</span>extent<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>background<span class="typ-punct">]</span>.
          </code></pre><div class="preview"><img src="/assets/docs/e9ec3d05ec75a5cbefed05e0bd438c4b.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The content that should be highlighted.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/linebreak/
  title: Line Break
  description: '`linebreak` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: syntax
    name: Syntax
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-justify
      name: justify
      children: []
  body:
    kind: func
    content:
      path: []
      name: linebreak
      title: Line Break
      keywords: []
      oneliner: Inserts a line break.
      element: true
      details: |-
        <p>Inserts a line break.</p>
        <p>Advances the paragraph to the next line. A single trailing line break at the
        end of a paragraph is ignored, but more than one creates additional empty
        lines.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-strong">*Date:*</span> 26.12.2022 <span class="typ-escape">\</span>
        <span class="typ-strong">*Topic:*</span> Infrastructure Test <span class="typ-escape">\</span>
        <span class="typ-strong">*Severity:*</span> High <span class="typ-escape">\</span>
        </code></pre><div class="preview"><img src="/assets/docs/2df1c0e733c1628030900158678b67c9.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="syntax">Syntax</h2>
        <p>This function also has dedicated syntax: To insert a line break, simply write
        a backslash followed by whitespace. This always creates an unjustified
        break.</p>
      example: null
      self: false
      params:
      - name: justify
        details: |-
          <p>Whether to justify the line before the break.</p>
          <p>This is useful if you found a better line break opportunity in your
          justified text than Typst did.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">par</span><span class="typ-punct">(</span>justify<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">let</span> jb <span class="typ-op">=</span> <span class="typ-func">linebreak</span><span class="typ-punct">(</span>justify<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>

          I have manually tuned the <span class="typ-pol">#</span><span class="typ-pol">jb</span>
          line breaks in this paragraph <span class="typ-pol">#</span><span class="typ-pol">jb</span>
          for an <span class="typ-emph">_interesting_</span> result. <span class="typ-pol">#</span><span class="typ-pol">jb</span>
          </code></pre><div class="preview"><img src="/assets/docs/71d5dafb28147bb22ac8ddaa28f4f93a.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/lorem/
  title: Lorem
  description: '`lorem` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-words
      name: words
      children: []
  body:
    kind: func
    content:
      path: []
      name: lorem
      title: Lorem
      keywords:
      - Blind Text
      oneliner: Creates blind text.
      element: false
      details: |-
        <p>Creates blind text.</p>
        <p>This function yields a Latin-like <em>Lorem Ipsum</em> blind text with the given
        number of words. The sequence of words generated by the function is always
        the same but randomly chosen. As usual for blind texts, it does not make any
        sense. Use it as a placeholder to try layouts.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-heading">= Blind Text</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">30</span><span class="typ-punct">)</span>

        <span class="typ-heading">= More Blind Text</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">15</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/cd2e88b299efda4524fc9763879d1ff1.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: words
        details: <p>The length of the blind text in words.</p>
        example: null
        types:
        - int
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - str
      scope: []
  children: []
- route: /docs/reference/text/lower/
  title: Lowercase
  description: '`lower` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-text
      name: text
      children: []
  body:
    kind: func
    content:
      path: []
      name: lower
      title: Lowercase
      keywords: []
      oneliner: Converts a string or content to lowercase.
      element: false
      details: |-
        <p>Converts a string or content to lowercase.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">lower</span><span class="typ-punct">(</span><span class="typ-str">&quot;ABC&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">lower</span><span class="typ-punct">[</span><span class="typ-strong">*My Text*</span><span class="typ-punct">]</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">lower</span><span class="typ-punct">[</span>already low<span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/50c436cfa73661f9da838fdf204eabab.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: text
        details: <p>The text to convert to lowercase.</p>
        example: null
        types:
        - str
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - str
      - content
      scope: []
  children: []
- route: /docs/reference/text/overline/
  title: Overline
  description: '`overline` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-offset
      name: offset
      children: []
    - id: parameters-extent
      name: extent
      children: []
    - id: parameters-evade
      name: evade
      children: []
    - id: parameters-background
      name: background
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: overline
      title: Overline
      keywords: []
      oneliner: Adds a line over text.
      element: true
      details: |-
        <p>Adds a line over text.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">overline</span><span class="typ-punct">[</span>A line over text.<span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/c3bb5d5987203353af84bd6015985b33.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: stroke
        details: |-
          <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a> the line.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, takes on the text's color and a thickness defined in
          the current font.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> olive<span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">overline</span><span class="typ-punct">(</span>
            stroke<span class="typ-punct">:</span> green<span class="typ-punct">.</span><span class="typ-func">darken</span><span class="typ-punct">(</span><span class="typ-num">20%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            offset<span class="typ-punct">:</span> <span class="typ-op">-</span><span class="typ-num">12pt</span><span class="typ-punct">,</span>
            <span class="typ-punct">[</span>The Forest Theme<span class="typ-punct">]</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/b442afeb9bcb3485a3c83c6314fbe43b.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: offset
        details: |-
          <p>The position of the line relative to the baseline. Read from the font
          tables if <code><span class="typ-key">auto</span></code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">overline</span><span class="typ-punct">(</span>offset<span class="typ-punct">:</span> <span class="typ-op">-</span><span class="typ-num">1.2em</span><span class="typ-punct">)</span><span class="typ-punct">[</span>
            The Tale Of A Faraway Line II
          <span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/fb6e6eb234e96be90d4a146a5a294850.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - length
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: extent
        details: |-
          <p>The amount by which to extend the line beyond (or within if negative)
          the content.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">overline</span><span class="typ-punct">(</span>extent<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">underline</span><span class="typ-punct">(</span>extent<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">overline</span><span class="typ-punct">(</span><span class="typ-func">underline</span><span class="typ-punct">[</span>Typography Today<span class="typ-punct">]</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/4c71e5ec1fad3b893f363364760f7fd8.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: evade
        details: |-
          <p>Whether the line skips sections in which it would collide with the
          glyphs.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">overline</span><span class="typ-punct">(</span>
            evade<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">,</span>
            offset<span class="typ-punct">:</span> <span class="typ-op">-</span><span class="typ-num">7.5pt</span><span class="typ-punct">,</span>
            stroke<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">,</span>
            extent<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">,</span>
            <span class="typ-punct">[</span>Temple<span class="typ-punct">]</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/f38c2082e229847da24e2843eb5c81c6.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: background
        details: <p>Whether the line is placed behind the content it overlines.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">overline</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>thickness<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span> paint<span class="typ-punct">:</span> maroon<span class="typ-punct">,</span> cap<span class="typ-punct">:</span> <span class="typ-str">&quot;round&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">overline</span><span class="typ-punct">(</span>background<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>This is stylized.<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">overline</span><span class="typ-punct">(</span>background<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">[</span>This is partially hidden.<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/8edac6f44c7e167475f59817292c848e.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The content to add a line over.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/raw/
  title: Raw Text / Code
  description: '`raw` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: syntax
    name: Syntax
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-text
      name: text
      children: []
    - id: parameters-block
      name: block
      children: []
    - id: parameters-lang
      name: lang
      children: []
    - id: parameters-align
      name: align
      children: []
    - id: parameters-syntaxes
      name: syntaxes
      children: []
    - id: parameters-theme
      name: theme
      children: []
    - id: parameters-tab-size
      name: tab-size
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-line
      name: Raw Text / Code Line
      children:
      - id: definitions-line-number
        name: number
        children: []
      - id: definitions-line-count
        name: count
        children: []
      - id: definitions-line-text
        name: text
        children: []
      - id: definitions-line-body
        name: body
        children: []
  body:
    kind: func
    content:
      path: []
      name: raw
      title: Raw Text / Code
      keywords: []
      oneliner: Raw text with optional syntax highlighting.
      element: true
      details: |-
        <p>Raw text with optional syntax highlighting.</p>
        <p>Displays the text verbatim and in a monospace font. This is typically used
        to embed computer code into your document.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>Adding <span class="typ-raw">`rbx`</span> to <span class="typ-raw">`rcx`</span> gives
        the desired result.

        What is <span class="typ-raw">```rust fn main()```</span> in Rust
        would be <span class="typ-raw">```c int main()```</span> in C.

        <span class="typ-raw">```rust
        fn main() {
            println!(&quot;Hello World!&quot;);
        }
        ```</span>

        This has <span class="typ-raw">``` `backticks` ```</span> in it
        (but the spaces are trimmed). And
        <span class="typ-raw">``` here```</span> the leading space is
        also trimmed.
        </code></pre><div class="preview"><img src="/assets/docs/4d059815fc030797337a320eb65c3828.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="syntax">Syntax</h2>
        <p>This function also has dedicated syntax. You can enclose text in 1 or 3+
        backticks (<code>`</code>) to make it raw. Two backticks produce empty raw text.
        When you use three or more backticks, you can additionally specify a
        language tag for syntax highlighting directly after the opening backticks.
        Within raw blocks, everything (except for the language tag, if applicable)
        is rendered as is, in particular, there are no escape sequences.</p>
        <p>The language tag is an identifier that directly follows the opening
        backticks only if there are three or more backticks. If your text starts
        with something that looks like an identifier, but no syntax highlighting is
        needed, start the text with a single space (which will be trimmed) or use
        the single backtick syntax. If your text should start or end with a
        backtick, put a space before or after it (it will be trimmed).</p>
      example: null
      self: false
      params:
      - name: text
        details: |-
          <p>The raw text.</p>
          <p>You can also use raw blocks creatively to create custom syntaxes for
          your automations.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-comment">// Parse numbers in raw blocks with the</span>
          <span class="typ-comment">// `mydsl` tag and sum them up.</span>
          <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;mydsl&quot;</span><span class="typ-punct">)</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
            <span class="typ-key">let</span> sum <span class="typ-op">=</span> <span class="typ-num">0</span>
            <span class="typ-key">for</span> part <span class="typ-key">in</span> it<span class="typ-punct">.</span>text<span class="typ-punct">.</span><span class="typ-func">split</span><span class="typ-punct">(</span><span class="typ-str">&quot;+&quot;</span><span class="typ-punct">)</span> <span class="typ-punct">{</span>
              sum <span class="typ-op">+=</span> <span class="typ-func">int</span><span class="typ-punct">(</span>part<span class="typ-punct">.</span><span class="typ-func">trim</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
            <span class="typ-punct">}</span>
            sum
          <span class="typ-punct">}</span>

          <span class="typ-raw">```mydsl
          1 + 2 + 3 + 4 + 5
          ```</span>
          </code></pre><div class="preview"><img src="/assets/docs/bde85482e73ea5451d489ec50b6d23ba.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: block
        details: |-
          <p>Whether the raw text is displayed as a separate block.</p>
          <p>In markup mode, using one-backtick notation makes this <code><span class="typ-key">false</span></code>.
          Using three-backtick notation makes it <code><span class="typ-key">true</span></code> if the enclosed content
          contains at least one line break.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-comment">// Display inline code in a small box</span>
          <span class="typ-comment">// that retains the correct baseline.</span>
          <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>block<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">:</span> box<span class="typ-punct">.</span><span class="typ-func">with</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> <span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">240</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            inset<span class="typ-punct">:</span> <span class="typ-punct">(</span>x<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">,</span> y<span class="typ-punct">:</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            outset<span class="typ-punct">:</span> <span class="typ-punct">(</span>y<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            radius<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>

          <span class="typ-comment">// Display block code in a larger block</span>
          <span class="typ-comment">// with more padding.</span>
          <span class="typ-key">#</span><span class="typ-key">show</span> raw<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>block<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">:</span> block<span class="typ-punct">.</span><span class="typ-func">with</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> <span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">240</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            inset<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">,</span>
            radius<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>

          With <span class="typ-raw">`rg`</span>, you can search through your files quickly.
          This example searches the current directory recursively
          for the text <span class="typ-raw">`Hello World`</span>:

          <span class="typ-raw">```bash
          rg &quot;Hello World&quot;
          ```</span>
          </code></pre><div class="preview"><img src="/assets/docs/12f58e9211d4d9c5d586630e143971a2.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: lang
        details: |-
          <p>The language to syntax-highlight in.</p>
          <p>Apart from typical language tags known from Markdown, this supports the
          <code><span class="typ-str">&quot;typ&quot;</span></code> and <code><span class="typ-str">&quot;typc&quot;</span></code> tags for Typst markup and Typst code,
          respectively.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-raw">```typ
          This is *Typst!*
          ```</span>

          This is <span class="typ-raw">```typ also *Typst*```</span>, but inline!
          </code></pre><div class="preview"><img src="/assets/docs/1d8174ac34248a5e5715acf2490b2cba.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - str
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: align
        details: |-
          <p>The horizontal alignment that each line in a raw block should have.
          This option is ignored if this is not a raw block (if specified
          <code>block: false</code> or single backticks were used in markup mode).</p>
          <p>By default, this is set to <code>start</code>, meaning that raw text is
          aligned towards the start of the text direction inside the block
          by default, regardless of the current context's alignment (allowing
          you to center the raw block itself without centering the text inside
          it, for example).</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">raw</span><span class="typ-punct">(</span>align<span class="typ-punct">:</span> center<span class="typ-punct">)</span>

          <span class="typ-raw">```typc
          let f(x) = x
          code = &quot;centered&quot;
          ```</span>
          </code></pre><div class="preview"><img src="/assets/docs/3329ad5b36132aa190d787eb5927b1aa.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - alignment
        strings: []
        default: <code>start</code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: syntaxes
        details: |-
          <p>One or multiple additional syntax definitions to load. The syntax
          definitions should be in the
          <a href="https://www.sublimetext.com/docs/syntax.html"><code>sublime-syntax</code> file format</a>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">raw</span><span class="typ-punct">(</span>syntaxes<span class="typ-punct">:</span> <span class="typ-str">&quot;SExpressions.sublime-syntax&quot;</span><span class="typ-punct">)</span>

          <span class="typ-raw">```sexp
          (defun factorial (x)
            (if (zerop x)
              ; with a comment
              1
              (* x (factorial (- x 1)))))
          ```</span>
          </code></pre><div class="preview"><img src="/assets/docs/7777214ef3477bb1fc911fc35cf324cc.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - str
        - array
        strings: []
        default: <code><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: theme
        details: |-
          <p>The theme to use for syntax highlighting. Theme files should be in the
          in the <a href="https://www.sublimetext.com/docs/color_schemes_tmtheme.html"><code>tmTheme</code> file format</a>.</p>
          <p>Applying a theme only affects the color of specifically highlighted
          text. It does not consider the theme's foreground and background
          properties, so that you retain control over the color of raw text. You
          can apply the foreground color yourself with the <a href="/docs/reference/text/text/"><code>text</code></a>
          function and the background with a <a href="/docs/reference/layout/block/#parameters-fill">filled block</a>. You
          could also use the <a href="/docs/reference/data-loading/xml/"><code>xml</code></a> function to extract these properties
          from the theme.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">raw</span><span class="typ-punct">(</span>theme<span class="typ-punct">:</span> <span class="typ-str">&quot;halcyon.tmTheme&quot;</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-func">raw</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-func">block</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#1d2433&quot;</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            inset<span class="typ-punct">:</span> <span class="typ-num">8pt</span><span class="typ-punct">,</span>
            radius<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span>
            <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#a2aabc&quot;</span><span class="typ-punct">)</span><span class="typ-punct">,</span> it<span class="typ-punct">)</span>
          <span class="typ-punct">)</span>

          <span class="typ-raw">```typ
          = Chapter 1
          #let hi = &quot;Hello World&quot;
          ```</span>
          </code></pre><div class="preview"><img src="/assets/docs/9009911872ae520fd503c1609b962bc8.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - str
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: tab-size
        details: |-
          <p>The size for a tab stop in spaces. A tab is replaced with enough spaces to
          align with the next multiple of the size.</p>
        example: "<div class=\"previewed-code\"><pre><code><span class=\"typ-key\"\
          >#</span><span class=\"typ-key\">set</span> <span class=\"typ-func\">raw</span><span\
          \ class=\"typ-punct\">(</span>tab-size<span class=\"typ-punct\">:</span>\
          \ <span class=\"typ-num\">8</span><span class=\"typ-punct\">)</span>\n<span\
          \ class=\"typ-raw\">```tsv\nYear\tMonth\tDay\n2000\t2\t3\n2001\t2\t1\n2002\t\
          3\t10\n```</span>\n</code></pre><div class=\"preview\"><img src=\"/assets/docs/a9fc7c872c3de1fc9b7c46043d34e867.png\"\
          \ alt=\"Preview\" width=\"480\" height=\"190\"/></div></div>"
        types:
        - int
        strings: []
        default: <code><span class="typ-num">2</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope:
      - path:
        - raw
        name: line
        title: Raw Text / Code Line
        keywords: []
        oneliner: A highlighted line of raw text.
        element: true
        details: |-
          <p>A highlighted line of raw text.</p>
          <p>This is a helper element that is synthesized by <a href="/docs/reference/text/raw/"><code>raw</code></a> elements.</p>
          <p>It allows you to access various properties of the line, such as the line
          number, the raw non-highlighted text, the highlighted text, and whether it
          is the first or last line of the raw block.</p>
        example: null
        self: false
        params:
        - name: number
          details: <p>The line number of the raw line inside of the raw block, starts
            at 1.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: count
          details: <p>The total number of lines in the raw block.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: text
          details: <p>The line of raw text.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: body
          details: <p>The highlighted raw text.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/text/smallcaps/
  title: Small Capitals
  description: '`smallcaps` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: smallcaps
      title: Small Capitals
      keywords: []
      oneliner: Displays text in small capitals.
      element: false
      details: |-
        <p>Displays text in small capitals.</p>
        <p><em>Note:</em> This enables the OpenType <code>smcp</code> feature for the font. Not all fonts
        support this feature. Sometimes smallcaps are part of a dedicated font and
        sometimes they are not available at all. In the future, this function will
        support selecting a dedicated smallcaps font as well as synthesizing
        smallcaps from normal letters, but this is not yet implemented.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">par</span><span class="typ-punct">(</span>justify<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;I.&quot;</span><span class="typ-punct">)</span>

        <span class="typ-key">#</span><span class="typ-key">show</span> <span class="typ-func">heading</span><span class="typ-punct">:</span> it <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-key">set</span> <span class="typ-func">block</span><span class="typ-punct">(</span>below<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">)</span>
          <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>weight<span class="typ-punct">:</span> <span class="typ-str">&quot;regular&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">align</span><span class="typ-punct">(</span>center<span class="typ-punct">,</span> <span class="typ-func">smallcaps</span><span class="typ-punct">(</span>it<span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-punct">}</span>

        <span class="typ-heading">= Introduction</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">40</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/cdf947cb116d99f7ab9b7491b11f5676.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: body
        details: <p>The text to display to small capitals.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/smartquote/
  title: Smartquote
  description: '`smartquote` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: syntax
    name: Syntax
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-double
      name: double
      children: []
    - id: parameters-enabled
      name: enabled
      children: []
    - id: parameters-alternative
      name: alternative
      children: []
    - id: parameters-quotes
      name: quotes
      children: []
  body:
    kind: func
    content:
      path: []
      name: smartquote
      title: Smartquote
      keywords: []
      oneliner: A language-aware quote that reacts to its context.
      element: true
      details: |-
        <p>A language-aware quote that reacts to its context.</p>
        <p>Automatically turns into an appropriate opening or closing quote based on
        the active <a href="/docs/reference/text/text/#parameters-lang">text language</a>.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>&quot;This is in quotes.&quot;

        <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;de&quot;</span><span class="typ-punct">)</span>
        &quot;Das ist in Anführungszeichen.&quot;

        <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;fr&quot;</span><span class="typ-punct">)</span>
        &quot;C&#39;est entre guillemets.&quot;
        </code></pre><div class="preview"><img src="/assets/docs/d8ae0e27ceabe7db27a5d570785d0e09.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="syntax">Syntax</h2>
        <p>This function also has dedicated syntax: The normal quote characters
        (<code>'</code> and <code>&quot;</code>). Typst automatically makes your quotes smart.</p>
      example: null
      self: false
      params:
      - name: double
        details: <p>Whether this should be a double quote.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: enabled
        details: |-
          <p>Whether smart quotes are enabled.</p>
          <p>To disable smartness for a single quote, you can also escape it with a
          backslash.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">smartquote</span><span class="typ-punct">(</span>enabled<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span>

          These are &quot;dumb&quot; quotes.
          </code></pre><div class="preview"><img src="/assets/docs/97534d7145e2ba0bc7efaabe227e3da0.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: alternative
        details: |-
          <p>Whether to use alternative quotes.</p>
          <p>Does nothing for languages that don't have alternative quotes, or if
          explicit quotes were set.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;de&quot;</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">smartquote</span><span class="typ-punct">(</span>alternative<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>

          &quot;Das ist in anderen Anführungszeichen.&quot;
          </code></pre><div class="preview"><img src="/assets/docs/5c3460227def2ea6db1015c5c127155d.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: quotes
        details: |-
          <p>The quotes to use.</p>
          <ul>
          <li>When set to <code><span class="typ-key">auto</span></code>, the appropriate single quotes for the
          <a href="/docs/reference/text/text/#parameters-lang">text language</a> will be used. This is the default.</li>
          <li>Custom quotes can be passed as a string, array, or dictionary of either
          <ul>
          <li><a href="/docs/reference/foundations/str/">string</a>: a string consisting of two characters containing the
          opening and closing double quotes (characters here refer to Unicode
          grapheme clusters)</li>
          <li><a href="/docs/reference/foundations/array/">array</a>: an array containing the opening and closing double
          quotes</li>
          <li><a href="/docs/reference/foundations/dictionary/">dictionary</a>: an array containing the double and single
          quotes, each specified as either <code><span class="typ-key">auto</span></code>, string, or array</li>
          </ul>
          </li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;de&quot;</span><span class="typ-punct">)</span>
          &#39;Das sind normale Anführungszeichen.&#39;

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">smartquote</span><span class="typ-punct">(</span>quotes<span class="typ-punct">:</span> <span class="typ-str">&quot;()&quot;</span><span class="typ-punct">)</span>
          &quot;Das sind eigene Anführungszeichen.&quot;

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">smartquote</span><span class="typ-punct">(</span>quotes<span class="typ-punct">:</span> <span class="typ-punct">(</span>single<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-str">&quot;[[&quot;</span><span class="typ-punct">,</span> <span class="typ-str">&quot;]]&quot;</span><span class="typ-punct">)</span><span class="typ-punct">,</span>  double<span class="typ-punct">:</span> <span class="typ-key">auto</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          &#39;Das sind eigene Anführungszeichen.&#39;
          </code></pre><div class="preview"><img src="/assets/docs/4795f58c8c1e6b031f007e96bb72eb7c.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - str
        - array
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/strike/
  title: Strikethrough
  description: '`strike` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-offset
      name: offset
      children: []
    - id: parameters-extent
      name: extent
      children: []
    - id: parameters-background
      name: background
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: strike
      title: Strikethrough
      keywords: []
      oneliner: Strikes through text.
      element: true
      details: |-
        <p>Strikes through text.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>This is <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">[</span>not<span class="typ-punct">]</span> relevant.
        </code></pre><div class="preview"><img src="/assets/docs/3b08403b55bd279eb85136e82aaf946b.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: stroke
        details: |-
          <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a> the line.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, takes on the text's color and a thickness defined in
          the current font.</p>
          <p><em>Note:</em> Please don't use this for real redaction as you can still copy
          paste the text.</p>
        example: |-
          <div class="previewed-code"><pre><code>This is <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">1.5pt</span> <span class="typ-op">+</span> red<span class="typ-punct">)</span><span class="typ-punct">[</span>very stricken through<span class="typ-punct">]</span>. <span class="typ-escape">\</span>
          This is <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>redacted<span class="typ-punct">]</span>.
          </code></pre><div class="preview"><img src="/assets/docs/fdbc9ea4caee2b300f30504e0bec0143.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: offset
        details: |-
          <p>The position of the line relative to the baseline. Read from the font
          tables if <code><span class="typ-key">auto</span></code>.</p>
          <p>This is useful if you are unhappy with the offset your font provides.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;Inria Serif&quot;</span><span class="typ-punct">)</span>
          This is <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>offset<span class="typ-punct">:</span> <span class="typ-key">auto</span><span class="typ-punct">)</span><span class="typ-punct">[</span>low-ish<span class="typ-punct">]</span>. <span class="typ-escape">\</span>
          This is <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>offset<span class="typ-punct">:</span> <span class="typ-op">-</span><span class="typ-num">3.5pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>on-top<span class="typ-punct">]</span>.
          </code></pre><div class="preview"><img src="/assets/docs/ad745f58a4ba8ec30386984b59500313.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - length
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: extent
        details: |-
          <p>The amount by which to extend the line beyond (or within if negative)
          the content.</p>
        example: |-
          <div class="previewed-code"><pre><code>This <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>extent<span class="typ-punct">:</span> <span class="typ-op">-</span><span class="typ-num">2pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>skips<span class="typ-punct">]</span> parts of the word.
          This <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>extent<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>extends<span class="typ-punct">]</span> beyond the word.
          </code></pre><div class="preview"><img src="/assets/docs/a9f7ff968dbf85d36df3b50a41200f29.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: background
        details: <p>Whether the line is placed behind the content.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">strike</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> red<span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>background<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>This is behind.<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">strike</span><span class="typ-punct">(</span>background<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">[</span>This is in front.<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/70fce3c1dc980fc700124673f6a5f567.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The content to strike through.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/sub/
  title: Subscript
  description: '`sub` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-typographic
      name: typographic
      children: []
    - id: parameters-baseline
      name: baseline
      children: []
    - id: parameters-size
      name: size
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: sub
      title: Subscript
      keywords: []
      oneliner: Renders text in subscript.
      element: true
      details: |-
        <p>Renders text in subscript.</p>
        <p>The text is rendered smaller and its baseline is lowered.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>Revenue<span class="typ-func">#</span><span class="typ-func">sub</span><span class="typ-punct">[</span>yearly<span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/d20c919c7df7c28b37464ab943a08964.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: typographic
        details: |-
          <p>Whether to prefer the dedicated subscript characters of the font.</p>
          <p>If this is enabled, Typst first tries to transform the text to subscript
          codepoints. If that fails, it falls back to rendering lowered and shrunk
          normal letters.</p>
        example: |-
          <div class="previewed-code"><pre><code>N<span class="typ-func">#</span><span class="typ-func">sub</span><span class="typ-punct">(</span>typographic<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>1<span class="typ-punct">]</span>
          N<span class="typ-func">#</span><span class="typ-func">sub</span><span class="typ-punct">(</span>typographic<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">[</span>1<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/8eb740d03cb4d65306b79eef81ff74e3.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: baseline
        details: |-
          <p>The baseline shift for synthetic subscripts. Does not apply if
          <code>typographic</code> is true and the font has subscript codepoints for the
          given <code>body</code>.</p>
        example: null
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0.2em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: size
        details: |-
          <p>The font size for synthetic subscripts. Does not apply if
          <code>typographic</code> is true and the font has subscript codepoints for the
          given <code>body</code>.</p>
        example: null
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0.6em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The text to display in subscript.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/super/
  title: Superscript
  description: '`super` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-typographic
      name: typographic
      children: []
    - id: parameters-baseline
      name: baseline
      children: []
    - id: parameters-size
      name: size
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: super
      title: Superscript
      keywords: []
      oneliner: Renders text in superscript.
      element: true
      details: |-
        <p>Renders text in superscript.</p>
        <p>The text is rendered smaller and its baseline is raised.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>1<span class="typ-func">#</span><span class="typ-func">super</span><span class="typ-punct">[</span>st<span class="typ-punct">]</span> try!
        </code></pre><div class="preview"><img src="/assets/docs/fd50918366fd34c3aeaf45b2e2e38b4c.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: typographic
        details: |-
          <p>Whether to prefer the dedicated superscript characters of the font.</p>
          <p>If this is enabled, Typst first tries to transform the text to
          superscript codepoints. If that fails, it falls back to rendering
          raised and shrunk normal letters.</p>
        example: |-
          <div class="previewed-code"><pre><code>N<span class="typ-func">#</span><span class="typ-func">super</span><span class="typ-punct">(</span>typographic<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>1<span class="typ-punct">]</span>
          N<span class="typ-func">#</span><span class="typ-func">super</span><span class="typ-punct">(</span>typographic<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">[</span>1<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/1f1b30bdc6dbefed58e2d5b106289303.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: baseline
        details: |-
          <p>The baseline shift for synthetic superscripts. Does not apply if
          <code>typographic</code> is true and the font has superscript codepoints for the
          given <code>body</code>.</p>
        example: null
        types:
        - length
        strings: []
        default: <code><span class="typ-op">−</span><span class="typ-num">0.5em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: size
        details: |-
          <p>The font size for synthetic superscripts. Does not apply if
          <code>typographic</code> is true and the font has superscript codepoints for the
          given <code>body</code>.</p>
        example: null
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0.6em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The text to display in superscript.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/text/
  title: Text
  description: '`text` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-font
      name: font
      children: []
    - id: parameters-fallback
      name: fallback
      children: []
    - id: parameters-style
      name: style
      children: []
    - id: parameters-weight
      name: weight
      children: []
    - id: parameters-stretch
      name: stretch
      children: []
    - id: parameters-size
      name: size
      children: []
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-tracking
      name: tracking
      children: []
    - id: parameters-spacing
      name: spacing
      children: []
    - id: parameters-cjk-latin-spacing
      name: cjk-latin-spacing
      children: []
    - id: parameters-baseline
      name: baseline
      children: []
    - id: parameters-overhang
      name: overhang
      children: []
    - id: parameters-top-edge
      name: top-edge
      children: []
    - id: parameters-bottom-edge
      name: bottom-edge
      children: []
    - id: parameters-lang
      name: lang
      children: []
    - id: parameters-region
      name: region
      children: []
    - id: parameters-script
      name: script
      children: []
    - id: parameters-dir
      name: dir
      children: []
    - id: parameters-hyphenate
      name: hyphenate
      children: []
    - id: parameters-kerning
      name: kerning
      children: []
    - id: parameters-alternates
      name: alternates
      children: []
    - id: parameters-stylistic-set
      name: stylistic-set
      children: []
    - id: parameters-ligatures
      name: ligatures
      children: []
    - id: parameters-discretionary-ligatures
      name: discretionary-ligatures
      children: []
    - id: parameters-historical-ligatures
      name: historical-ligatures
      children: []
    - id: parameters-number-type
      name: number-type
      children: []
    - id: parameters-number-width
      name: number-width
      children: []
    - id: parameters-slashed-zero
      name: slashed-zero
      children: []
    - id: parameters-fractions
      name: fractions
      children: []
    - id: parameters-features
      name: features
      children: []
    - id: parameters-body
      name: body
      children: []
    - id: parameters-text
      name: text
      children: []
  body:
    kind: func
    content:
      path: []
      name: text
      title: Text
      keywords: []
      oneliner: Customizes the look and layout of text in a variety of ways.
      element: true
      details: |-
        <p>Customizes the look and layout of text in a variety of ways.</p>
        <p>This function is used frequently, both with set rules and directly. While
        the set rule is often the simpler choice, calling the <code>text</code> function
        directly can be useful when passing text as an argument to another function.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span><span class="typ-num">18pt</span><span class="typ-punct">)</span>
        With a set rule.

        <span class="typ-func">#</span><span class="typ-func">emph</span><span class="typ-punct">(</span><span class="typ-func">text</span><span class="typ-punct">(</span>blue<span class="typ-punct">)</span><span class="typ-punct">[</span>
          With a function call.
        <span class="typ-punct">]</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/1798620674b9dbb4c11ebe7e32fe87c8.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: font
        details: |-
          <p>A font family name or priority list of font family names.</p>
          <p>When processing text, Typst tries all specified font families in order
          until it finds a font that has the necessary glyphs. In the example
          below, the font <code>Inria Serif</code> is preferred, but since it does not
          contain Arabic glyphs, the arabic text uses <code>Noto Sans Arabic</code> instead.</p>
          <p>The collection of available fonts differs by platform:</p>
          <ul>
          <li>
          <p>In the web app, you can see the list of available fonts by clicking on
          the &quot;Ag&quot; button. You can provide additional fonts by uploading <code>.ttf</code>
          or <code>.otf</code> files into your project. They will be discovered
          automatically.</p>
          </li>
          <li>
          <p>Locally, Typst uses your installed system fonts. In addition, you can
          use the <code>--font-path</code> argument or <code>TYPST_FONT_PATHS</code> environment
          variable to add directories that should be scanned for fonts.</p>
          </li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;PT Sans&quot;</span><span class="typ-punct">)</span>
          This is sans-serif.

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-punct">(</span>
            <span class="typ-str">&quot;Inria Serif&quot;</span><span class="typ-punct">,</span>
            <span class="typ-str">&quot;Noto Sans Arabic&quot;</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">)</span>

          This is Latin. <span class="typ-escape">\</span>
          هذا عربي.
          </code></pre><div class="preview"><img src="/assets/docs/e8afd3143accf1cba02aee7fd27169c1.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - str
        - array
        strings: []
        default: <code><span class="typ-str">&quot;linux libertine&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fallback
        details: |-
          <p>Whether to allow last resort font fallback when the primary font list
          contains no match. This lets Typst search through all available fonts
          for the most similar one that has the necessary glyphs.</p>
          <p><em>Note:</em> Currently, there are no warnings when fallback is disabled and
          no glyphs are found. Instead, your text shows up in the form of &quot;tofus&quot;:
          Small boxes that indicate the lack of an appropriate glyph. In the
          future, you will be able to instruct Typst to issue warnings so you know
          something is up.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;Inria Serif&quot;</span><span class="typ-punct">)</span>
          هذا عربي

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>fallback<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span>
          هذا عربي
          </code></pre><div class="preview"><img src="/assets/docs/bf03aa462d7c10c93185026e8b709e3b.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: style
        details: |-
          <p>The desired font style.</p>
          <p>When an italic style is requested and only an oblique one is available,
          it is used. Similarly, the other way around, an italic style can stand
          in for an oblique one.  When neither an italic nor an oblique style is
          available, Typst selects the normal style. Since most fonts are only
          available either in an italic or oblique style, the difference between
          italic and oblique style is rarely observable.</p>
          <p>If you want to emphasize your text, you should do so using the
          <a href="/docs/reference/model/emph/">emph</a> function instead. This makes it easy to adapt the style
          later if you change your mind about how to signify the emphasis.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;Linux Libertine&quot;</span><span class="typ-punct">,</span> style<span class="typ-punct">:</span> <span class="typ-str">&quot;italic&quot;</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Italic<span class="typ-punct">]</span>
          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;DejaVu Sans&quot;</span><span class="typ-punct">,</span> style<span class="typ-punct">:</span> <span class="typ-str">&quot;oblique&quot;</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Oblique<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/50f6c17278b2799fc7207e00ab68d482.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - str
        strings:
        - string: normal
          details: <p>The default, typically upright style.</p>
        - string: italic
          details: <p>A cursive style with custom letterform.</p>
        - string: oblique
          details: <p>Just a slanted version of the normal style.</p>
        default: <code><span class="typ-str">&quot;normal&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: weight
        details: |-
          <p>The desired thickness of the font's glyphs. Accepts an integer between
          <code><span class="typ-num">100</span></code> and <code><span class="typ-num">900</span></code> or one of the predefined weight names. When the
          desired weight is not available, Typst selects the font from the family
          that is closest in weight.</p>
          <p>If you want to strongly emphasize your text, you should do so using the
          <a href="/docs/reference/model/strong/">strong</a> function instead. This makes it easy to adapt the
          style later if you change your mind about how to signify the strong
          emphasis.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;IBM Plex Sans&quot;</span><span class="typ-punct">)</span>

          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>weight<span class="typ-punct">:</span> <span class="typ-str">&quot;light&quot;</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Light<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>weight<span class="typ-punct">:</span> <span class="typ-str">&quot;regular&quot;</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Regular<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>weight<span class="typ-punct">:</span> <span class="typ-str">&quot;medium&quot;</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Medium<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>weight<span class="typ-punct">:</span> <span class="typ-num">500</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Medium<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>weight<span class="typ-punct">:</span> <span class="typ-str">&quot;bold&quot;</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Bold<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/01e654fdb2266c6084f521d21e12510d.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - int
        - str
        strings:
        - string: thin
          details: <p>Thin weight (100).</p>
        - string: extralight
          details: <p>Extra light weight (200).</p>
        - string: light
          details: <p>Light weight (300).</p>
        - string: regular
          details: <p>Regular weight (400).</p>
        - string: medium
          details: <p>Medium weight (500).</p>
        - string: semibold
          details: <p>Semibold weight (600).</p>
        - string: bold
          details: <p>Bold weight (700).</p>
        - string: extrabold
          details: <p>Extrabold weight (800).</p>
        - string: black
          details: <p>Black weight (900).</p>
        default: <code><span class="typ-str">&quot;regular&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stretch
        details: |-
          <p>The desired width of the glyphs. Accepts a ratio between <code><span class="typ-num">50%</span></code> and
          <code><span class="typ-num">200%</span></code>. When the desired width is not available, Typst selects the
          font from the family that is closest in stretch. This will only stretch
          the text if a condensed or expanded version of the font is available.</p>
          <p>If you want to adjust the amount of space between characters instead of
          stretching the glyphs itself, use the <a href="/docs/reference/text/text/#parameters-tracking"><code>tracking</code></a>
          property instead.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>stretch<span class="typ-punct">:</span> <span class="typ-num">75%</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Condensed<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>stretch<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Normal<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/ef1eba3154c28004d592a3d208885527.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - ratio
        strings: []
        default: <code><span class="typ-num">100%</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: size
        details: |-
          <p>The size of the glyphs. This value forms the basis of the <code>em</code> unit:
          <code><span class="typ-num">1em</span></code> is equivalent to the font size.</p>
          <p>You can also give the font size itself in <code>em</code> units. Then, it is
          relative to the previous font size.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>size<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span>
          very <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span><span class="typ-num">1.5em</span><span class="typ-punct">)</span><span class="typ-punct">[</span>big<span class="typ-punct">]</span> text
          </code></pre><div class="preview"><img src="/assets/docs/a4c0be8c8fe69c79fa5e4a46d30b7e40.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        strings: []
        default: <code><span class="typ-num">11pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fill
        details: <p>The glyph fill paint.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> red<span class="typ-punct">)</span>
          This text is red.
          </code></pre><div class="preview"><img src="/assets/docs/d7b96852492c1e7f79155180cc974df7.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-func">luma</span><span class="typ-punct">(</span><span
          class="typ-num">0%</span><span class="typ-punct">)</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: tracking
        details: <p>The amount of space that should be added between characters.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>tracking<span class="typ-punct">:</span> <span class="typ-num">1.5pt</span><span class="typ-punct">)</span>
          Distant text.
          </code></pre><div class="preview"><img src="/assets/docs/3b48e9c3ec02f47b3df9ac43399e424e.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: spacing
        details: |-
          <p>The amount of space between words.</p>
          <p>Can be given as an absolute length, but also relative to the width of
          the space character in the font.</p>
          <p>If you want to adjust the amount of space between characters rather than
          words, use the <a href="/docs/reference/text/text/#parameters-tracking"><code>tracking</code></a> property instead.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>spacing<span class="typ-punct">:</span> <span class="typ-num">200%</span><span class="typ-punct">)</span>
          Text with distant words.
          </code></pre><div class="preview"><img src="/assets/docs/fab9015900832363e9c63dc2f796f090.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">100%</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: cjk-latin-spacing
        details: <p>Whether to automatically insert spacing between CJK and Latin
          characters.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>cjk-latin-spacing<span class="typ-punct">:</span> <span class="typ-key">auto</span><span class="typ-punct">)</span>
          第4章介绍了基本的API。

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>cjk-latin-spacing<span class="typ-punct">:</span> <span class="typ-key">none</span><span class="typ-punct">)</span>
          第4章介绍了基本的API。
          </code></pre><div class="preview"><img src="/assets/docs/5fae16abf8723ec3c6f4e182578388eb.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - auto
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: baseline
        details: <p>An amount to shift the text baseline by.</p>
        example: |-
          <div class="previewed-code"><pre><code>A <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>baseline<span class="typ-punct">:</span> <span class="typ-num">3pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>lowered<span class="typ-punct">]</span>
          word.
          </code></pre><div class="preview"><img src="/assets/docs/d14deb43c72235eea81207315cc477fb.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: overhang
        details: |-
          <p>Whether certain glyphs can hang over into the margin in justified text.
          This can make justification visually more pleasing.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">par</span><span class="typ-punct">(</span>justify<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>
          This justified text has a hyphen in
          the paragraph&#39;s first line. Hanging
          the hyphen slightly into the margin
          results in a clearer paragraph edge.

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>overhang<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span>
          This justified text has a hyphen in
          the paragraph&#39;s first line. Hanging
          the hyphen slightly into the margin
          results in a clearer paragraph edge.
          </code></pre><div class="preview"><img src="/assets/docs/61e2e01db9ae6b1f1be953864768bdd0.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: top-edge
        details: |-
          <p>The top end of the conceptual frame around the text used for layout and
          positioning. This affects the size of containers that hold text.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">rect</span><span class="typ-punct">(</span>inset<span class="typ-punct">:</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>size<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>top-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;ascender&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> aqua<span class="typ-punct">)</span><span class="typ-punct">[</span>Typst<span class="typ-punct">]</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>top-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;cap-height&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> aqua<span class="typ-punct">)</span><span class="typ-punct">[</span>Typst<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/6924fa1fe5ca3922ec8cff778631e083.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        - str
        strings:
        - string: ascender
          details: <p>The font's ascender, which typically exceeds the height of all
            glyphs.</p>
        - string: cap-height
          details: <p>The approximate height of uppercase letters.</p>
        - string: x-height
          details: <p>The approximate height of non-ascending lowercase letters.</p>
        - string: baseline
          details: <p>The baseline on which the letters rest.</p>
        - string: bounds
          details: <p>The top edge of the glyph's bounding box.</p>
        default: <code><span class="typ-str">&quot;cap-height&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: bottom-edge
        details: |-
          <p>The bottom end of the conceptual frame around the text used for layout
          and positioning. This affects the size of containers that hold text.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">rect</span><span class="typ-punct">(</span>inset<span class="typ-punct">:</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>size<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>bottom-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;baseline&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> aqua<span class="typ-punct">)</span><span class="typ-punct">[</span>Typst<span class="typ-punct">]</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>bottom-edge<span class="typ-punct">:</span> <span class="typ-str">&quot;descender&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> aqua<span class="typ-punct">)</span><span class="typ-punct">[</span>Typst<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/72f2bd7786bb0da324e2dbbf92fc2cbf.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        - str
        strings:
        - string: baseline
          details: <p>The baseline on which the letters rest.</p>
        - string: descender
          details: <p>The font's descender, which typically exceeds the depth of all
            glyphs.</p>
        - string: bounds
          details: <p>The bottom edge of the glyph's bounding box.</p>
        default: <code><span class="typ-str">&quot;baseline&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: lang
        details: |-
          <p>An <a href="https://en.wikipedia.org/wiki/ISO_639">ISO 639-1/2/3 language code.</a></p>
          <p>Setting the correct language affects various parts of Typst:</p>
          <ul>
          <li>The text processing pipeline can make more informed choices.</li>
          <li>Hyphenation will use the correct patterns for the language.</li>
          <li><a href="/docs/reference/text/smartquote/">Smart quotes</a> turns into the correct quotes for the
          language.</li>
          <li>And all other things which are language-aware.</li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;de&quot;</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">outline</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

          <span class="typ-heading">= Einleitung</span>
          In diesem Dokument, <span class="typ-escape">...</span>
          </code></pre><div class="preview"><img src="/assets/docs/14fc83552e06d2c744e443ffb47d977e.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - str
        strings: []
        default: <code><span class="typ-str">&quot;en&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: region
        details: |-
          <p>An <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2 region code.</a></p>
          <p>This lets the text processing pipeline make more informed choices.</p>
        example: null
        types:
        - none
        - str
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: script
        details: |-
          <p>The OpenType writing script.</p>
          <p>The combination of <code>lang</code> and <code>script</code> determine how font features,
          such as glyph substitution, are implemented. Frequently the value is a
          modified (all-lowercase) ISO 15924 script identifier, and the <code>math</code>
          writing script is used for features appropriate for mathematical
          symbols.</p>
          <p>When set to <code><span class="typ-key">auto</span></code>, the default and recommended setting, an
          appropriate script is chosen for each block of characters sharing a
          common Unicode script property.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>
            font<span class="typ-punct">:</span> <span class="typ-str">&quot;Linux Libertine&quot;</span><span class="typ-punct">,</span>
            size<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>

          <span class="typ-key">#</span><span class="typ-key">let</span> scedilla <span class="typ-op">=</span> <span class="typ-punct">[</span>Ş<span class="typ-punct">]</span>
          <span class="typ-pol">#</span><span class="typ-pol">scedilla</span> <span class="typ-comment">// S with a cedilla</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;ro&quot;</span><span class="typ-punct">,</span> script<span class="typ-punct">:</span> <span class="typ-str">&quot;latn&quot;</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">scedilla</span> <span class="typ-comment">// S with a subscript comma</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>lang<span class="typ-punct">:</span> <span class="typ-str">&quot;ro&quot;</span><span class="typ-punct">,</span> script<span class="typ-punct">:</span> <span class="typ-str">&quot;grek&quot;</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">scedilla</span> <span class="typ-comment">// S with a cedilla</span>
          </code></pre><div class="preview"><img src="/assets/docs/c92bd58e8ea706185de662638c552133.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - str
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: dir
        details: |-
          <p>The dominant direction for text and inline objects. Possible values are:</p>
          <ul>
          <li><code><span class="typ-key">auto</span></code>: Automatically infer the direction from the <code>lang</code> property.</li>
          <li><code>ltr</code>: Layout text from left to right.</li>
          <li><code>rtl</code>: Layout text from right to left.</li>
          </ul>
          <p>When writing in right-to-left scripts like Arabic or Hebrew, you should
          set the <a href="/docs/reference/text/text/#parameters-lang">text language</a> or direction. While individual runs
          of text are automatically layouted in the correct direction, setting the
          dominant direction gives the bidirectional reordering algorithm the
          necessary information to correctly place punctuation and inline objects.
          Furthermore, setting the direction affects the alignment values <code>start</code>
          and <code>end</code>, which are equivalent to <code>left</code> and <code>right</code> in <code>ltr</code> text and
          the other way around in <code>rtl</code> text.</p>
          <p>If you set this to <code>rtl</code> and experience bugs or in some way bad looking
          output, please do get in touch with us through the
          <a href="https://typst.app/contact">contact form</a> or our
          <a href="/docs/community/#discord">Discord server</a>!</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>dir<span class="typ-punct">:</span> rtl<span class="typ-punct">)</span>
          هذا عربي.
          </code></pre><div class="preview"><img src="/assets/docs/4170a86e60932ccec40577dd8aa2305d.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - direction
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: hyphenate
        details: |-
          <p>Whether to hyphenate text to improve line breaking. When <code><span class="typ-key">auto</span></code>, text
          will be hyphenated if and only if justification is enabled.</p>
          <p>Setting the <a href="/docs/reference/text/text/#parameters-lang">text language</a> ensures that the correct
          hyphenation patterns are used.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>width<span class="typ-punct">:</span> <span class="typ-num">200pt</span><span class="typ-punct">)</span>

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">par</span><span class="typ-punct">(</span>justify<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>
          This text illustrates how
          enabling hyphenation can
          improve justification.

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>hyphenate<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span>
          This text illustrates how
          enabling hyphenation can
          improve justification.
          </code></pre><div class="preview"><img src="/assets/docs/c71fcc1deec3442f9ad0d6a67a2efabf.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - bool
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: kerning
        details: |-
          <p>Whether to apply kerning.</p>
          <p>When enabled, specific letter pairings move closer together or further
          apart for a more visually pleasing result. The example below
          demonstrates how decreasing the gap between the &quot;T&quot; and &quot;o&quot; results in a
          more natural look. Setting this to <code><span class="typ-key">false</span></code> disables kerning by turning
          off the OpenType <code>kern</code> font feature.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>size<span class="typ-punct">:</span> <span class="typ-num">25pt</span><span class="typ-punct">)</span>
          Totally

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>kerning<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span>
          Totally
          </code></pre><div class="preview"><img src="/assets/docs/e40b35166d53f5fd05dafb6975a57d1c.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: alternates
        details: |-
          <p>Whether to apply stylistic alternates.</p>
          <p>Sometimes fonts contain alternative glyphs for the same codepoint.
          Setting this to <code><span class="typ-key">true</span></code> switches to these by enabling the OpenType
          <code>salt</code> font feature.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>
            font<span class="typ-punct">:</span> <span class="typ-str">&quot;IBM Plex Sans&quot;</span><span class="typ-punct">,</span>
            size<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>

          0, a, g, ß

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>alternates<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>
          0, a, g, ß
          </code></pre><div class="preview"><img src="/assets/docs/3b9e1ca6bd9f5cad8fa5e5f08c88f5c5.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stylistic-set
        details: |-
          <p>Which stylistic set to apply. Font designers can categorize alternative
          glyphs forms into stylistic sets. As this value is highly font-specific,
          you need to consult your font to know which sets are available. When set
          to an integer between <code><span class="typ-num">1</span></code> and <code><span class="typ-num">20</span></code>, enables the corresponding
          OpenType font feature from <code>ss01</code>, ..., <code>ss20</code>.</p>
        example: null
        types:
        - none
        - int
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: ligatures
        details: |-
          <p>Whether standard ligatures are active.</p>
          <p>Certain letter combinations like &quot;fi&quot; are often displayed as a single
          merged glyph called a <em>ligature.</em> Setting this to <code><span class="typ-key">false</span></code> disables
          these ligatures by turning off the OpenType <code>liga</code> and <code>clig</code> font
          features.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>size<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span>
          A fine ligature.

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>ligatures<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span>
          A fine ligature.
          </code></pre><div class="preview"><img src="/assets/docs/8c48757c66229d93ae8e8d725a80d20f.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: discretionary-ligatures
        details: |-
          <p>Whether ligatures that should be used sparingly are active. Setting this
          to <code><span class="typ-key">true</span></code> enables the OpenType <code>dlig</code> font feature.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: historical-ligatures
        details: |-
          <p>Whether historical ligatures are active. Setting this to <code><span class="typ-key">true</span></code>
          enables the OpenType <code>hlig</code> font feature.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: number-type
        details: |-
          <p>Which kind of numbers / figures to select. When set to <code><span class="typ-key">auto</span></code>, the
          default numbers for the font are used.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;Noto Sans&quot;</span><span class="typ-punct">,</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>number-type<span class="typ-punct">:</span> <span class="typ-str">&quot;lining&quot;</span><span class="typ-punct">)</span>
          Number 9.

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>number-type<span class="typ-punct">:</span> <span class="typ-str">&quot;old-style&quot;</span><span class="typ-punct">)</span>
          Number 9.
          </code></pre><div class="preview"><img src="/assets/docs/9565cf689e3caffd42600484ec46169f.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - str
        strings:
        - string: lining
          details: |-
            <p>Numbers that fit well with capital text (the OpenType <code>lnum</code>
            font feature).</p>
        - string: old-style
          details: |-
            <p>Numbers that fit well into a flow of upper- and lowercase text (the
            OpenType <code>onum</code> font feature).</p>
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: number-width
        details: |-
          <p>The width of numbers / figures. When set to <code><span class="typ-key">auto</span></code>, the default
          numbers for the font are used.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;Noto Sans&quot;</span><span class="typ-punct">,</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>number-width<span class="typ-punct">:</span> <span class="typ-str">&quot;proportional&quot;</span><span class="typ-punct">)</span>
          A 12 B 34. <span class="typ-escape">\</span>
          A 56 B 78.

          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>number-width<span class="typ-punct">:</span> <span class="typ-str">&quot;tabular&quot;</span><span class="typ-punct">)</span>
          A 12 B 34. <span class="typ-escape">\</span>
          A 56 B 78.
          </code></pre><div class="preview"><img src="/assets/docs/fe66c83917a8638b72ca75cc0a4c26ec.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - str
        strings:
        - string: proportional
          details: <p>Numbers with glyph-specific widths (the OpenType <code>pnum</code>
            font feature).</p>
        - string: tabular
          details: <p>Numbers of equal width (the OpenType <code>tnum</code> font
            feature).</p>
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: slashed-zero
        details: |-
          <p>Whether to have a slash through the zero glyph. Setting this to <code><span class="typ-key">true</span></code>
          enables the OpenType <code>zero</code> font feature.</p>
        example: |-
          <div class="previewed-code"><pre><code>0, <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>slashed-zero<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>0<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/5925acaf0363a29e71668bd6a0837504.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fractions
        details: |-
          <p>Whether to turn numbers into fractions. Setting this to <code><span class="typ-key">true</span></code>
          enables the OpenType <code>frac</code> font feature.</p>
          <p>It is not advisable to enable this property globally as it will mess
          with all appearances of numbers after a slash (e.g., in URLs). Instead,
          enable it locally when you want a fraction.</p>
        example: |-
          <div class="previewed-code"><pre><code>1/2 <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span>fractions<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>1/2<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/e7fab59cdabd0a5bb85fd95176de1438.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: features
        details: |-
          <p>Raw OpenType features to apply.</p>
          <ul>
          <li>If given an array of strings, sets the features identified by the
          strings to <code><span class="typ-num">1</span></code>.</li>
          <li>If given a dictionary mapping to numbers, sets the features
          identified by the keys to the values.</li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-comment">// Enable the `frac` feature manually.</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>features<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-str">&quot;frac&quot;</span><span class="typ-punct">,</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          1/2
          </code></pre><div class="preview"><img src="/assets/docs/1f8db42134ff6bf0c9df63ae4ab55504.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - array
        - dictionary
        strings: []
        default: <code><span class="typ-punct">(</span><span class="typ-punct">:</span><span
          class="typ-punct">)</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>Content in which all text is styled according to the other arguments.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: text
        details: <p>The text.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/underline/
  title: Underline
  description: '`underline` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-offset
      name: offset
      children: []
    - id: parameters-extent
      name: extent
      children: []
    - id: parameters-evade
      name: evade
      children: []
    - id: parameters-background
      name: background
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: underline
      title: Underline
      keywords: []
      oneliner: Underlines text.
      element: true
      details: |-
        <p>Underlines text.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>This is <span class="typ-func">#</span><span class="typ-func">underline</span><span class="typ-punct">[</span>important<span class="typ-punct">]</span>.
        </code></pre><div class="preview"><img src="/assets/docs/8649800c82550f9aa58665cc9b64e2c0.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: stroke
        details: |-
          <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a> the line.</p>
          <p>If set to <code><span class="typ-key">auto</span></code>, takes on the text's color and a thickness defined in
          the current font.</p>
        example: |-
          <div class="previewed-code"><pre><code>Take <span class="typ-func">#</span><span class="typ-func">underline</span><span class="typ-punct">(</span>
            stroke<span class="typ-punct">:</span> <span class="typ-num">1.5pt</span> <span class="typ-op">+</span> red<span class="typ-punct">,</span>
            offset<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">,</span>
            <span class="typ-punct">[</span>care<span class="typ-punct">]</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/a4c9342e577ef4d3e81ced6ec3b941ec.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: offset
        details: |-
          <p>The position of the line relative to the baseline, read from the font
          tables if <code><span class="typ-key">auto</span></code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">underline</span><span class="typ-punct">(</span>offset<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>
            The Tale Of A Faraway Line I
          <span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/c75fd0c3af6c077f729cec3aab2e1ccb.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - length
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: extent
        details: |-
          <p>The amount by which to extend the line beyond (or within if negative)
          the content.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">align</span><span class="typ-punct">(</span>center<span class="typ-punct">,</span>
            <span class="typ-func">underline</span><span class="typ-punct">(</span>extent<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">)</span><span class="typ-punct">[</span>Chapter 1<span class="typ-punct">]</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/ef40d284a9d87f7360305a0261b51fc8.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: evade
        details: |-
          <p>Whether the line skips sections in which it would collide with the
          glyphs.</p>
        example: |-
          <div class="previewed-code"><pre><code>This <span class="typ-func">#</span><span class="typ-func">underline</span><span class="typ-punct">(</span>evade<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>is great<span class="typ-punct">]</span>.
          This <span class="typ-func">#</span><span class="typ-func">underline</span><span class="typ-punct">(</span>evade<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">[</span>is less great<span class="typ-punct">]</span>.
          </code></pre><div class="preview"><img src="/assets/docs/2e23dcf289c65677d5677d884350928c.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">true</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: background
        details: <p>Whether the line is placed behind the content it underlines.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">underline</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>thickness<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span> paint<span class="typ-punct">:</span> maroon<span class="typ-punct">,</span> cap<span class="typ-punct">:</span> <span class="typ-str">&quot;round&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">underline</span><span class="typ-punct">(</span>background<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">[</span>This is stylized.<span class="typ-punct">]</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">underline</span><span class="typ-punct">(</span>background<span class="typ-punct">:</span> <span class="typ-key">false</span><span class="typ-punct">)</span><span class="typ-punct">[</span>This is partially hidden.<span class="typ-punct">]</span>
          </code></pre><div class="preview"><img src="/assets/docs/0258509438a5606a253aae3b677bd887.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The content to underline.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/text/upper/
  title: Uppercase
  description: '`upper` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-text
      name: text
      children: []
  body:
    kind: func
    content:
      path: []
      name: upper
      title: Uppercase
      keywords: []
      oneliner: Converts a string or content to uppercase.
      element: false
      details: |-
        <p>Converts a string or content to uppercase.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">upper</span><span class="typ-punct">(</span><span class="typ-str">&quot;abc&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">upper</span><span class="typ-punct">[</span><span class="typ-strong">*my text*</span><span class="typ-punct">]</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">upper</span><span class="typ-punct">[</span>ALREADY HIGH<span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/f1897e9e3cdcc4948ff5480fc813b89b.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: text
        details: <p>The text to convert to uppercase.</p>
        example: null
        types:
        - str
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - str
      - content
      scope: []
  children: []
