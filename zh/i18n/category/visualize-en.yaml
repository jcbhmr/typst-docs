route: /docs/reference/visualize/
title: Visualize
description: Typst 中与 Visualize 有关联的函数族的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: definitions
  name: Definitions
  children: []
body:
  kind: category
  content:
    name: visualize
    title: Visualize
    details: |-
      <p>Drawing and data visualization.</p>
      <p>If you want to create more advanced drawings or plots, also have a look at
      the <a href="https://github.com/johannes-wolf/cetz">CetZ</a> package as well as more
      specialized <a href="/docs/packages/">packages</a> for your use case.</p>
    items:
    - name: circle
      route: /docs/reference/visualize/circle/
      oneliner: A circle with optional content.
      code: true
    - name: color
      route: /docs/reference/visualize/color/
      oneliner: A color in a specific color space.
      code: true
    - name: ellipse
      route: /docs/reference/visualize/ellipse/
      oneliner: An ellipse with optional content.
      code: true
    - name: gradient
      route: /docs/reference/visualize/gradient/
      oneliner: A color gradient.
      code: true
    - name: image
      route: /docs/reference/visualize/image/
      oneliner: A raster or vector graphic.
      code: true
    - name: line
      route: /docs/reference/visualize/line/
      oneliner: A line from one point to another.
      code: true
    - name: path
      route: /docs/reference/visualize/path/
      oneliner: A path through a list of points, connected by Bezier curves.
      code: true
    - name: pattern
      route: /docs/reference/visualize/pattern/
      oneliner: A repeating pattern fill.
      code: true
    - name: polygon
      route: /docs/reference/visualize/polygon/
      oneliner: A closed polygon.
      code: true
    - name: rect
      route: /docs/reference/visualize/rect/
      oneliner: A rectangle with optional content.
      code: true
    - name: square
      route: /docs/reference/visualize/square/
      oneliner: A square with optional content.
      code: true
    - name: stroke
      route: /docs/reference/visualize/stroke/
      oneliner: Defines how to draw a line.
      code: true
    shorthands: null
children:
- route: /docs/reference/visualize/circle/
  title: Circle
  description: '`circle` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-radius
      name: radius
      children: []
    - id: parameters-width
      name: width
      children: []
    - id: parameters-height
      name: height
      children: []
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-inset
      name: inset
      children: []
    - id: parameters-outset
      name: outset
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: circle
      title: Circle
      keywords: []
      oneliner: A circle with optional content.
      element: true
      details: |-
        <p>A circle with optional content.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-comment">// Without content.</span>
        <span class="typ-func">#</span><span class="typ-func">circle</span><span class="typ-punct">(</span>radius<span class="typ-punct">:</span> <span class="typ-num">25pt</span><span class="typ-punct">)</span>

        <span class="typ-comment">// With content.</span>
        <span class="typ-func">#</span><span class="typ-func">circle</span><span class="typ-punct">[</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">align</span><span class="typ-punct">(</span>center <span class="typ-op">+</span> horizon<span class="typ-punct">)</span>
          Automatically <span class="typ-escape">\</span>
          sized to fit.
        <span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/add2d726e805e135b41d8fcda4252a8e.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: radius
        details: |-
          <p>The circle's radius. This is mutually exclusive with <code>width</code> and
          <code>height</code>.</p>
        example: null
        types:
        - length
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: width
        details: |-
          <p>The circle's width. This is mutually exclusive with <code>radius</code> and
          <code>height</code>.</p>
          <p>In contrast to <code>radius</code>, this can be relative to the parent container's
          width.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: height
        details: |-
          <p>The circle's height. This is mutually exclusive with <code>radius</code> and
          <code>width</code>.</p>
          <p>In contrast to <code>radius</code>, this can be relative to the parent container's
          height.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fill
        details: |-
          <p>How to fill the circle. See the <a href="/docs/reference/visualize/rect/#parameters-fill">rectangle's documentation</a>
          for more details.</p>
        example: null
        types:
        - none
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: |-
          <p>How to stroke the circle. See the
          <a href="/docs/reference/visualize/rect/#parameters-stroke">rectangle's documentation</a> for more details.</p>
        example: null
        types:
        - none
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: inset
        details: |-
          <p>How much to pad the circle's content. See the
          <a href="/docs/reference/layout/box/#parameters-inset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">5pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: outset
        details: |-
          <p>How much to expand the circle's size without affecting the layout. See
          the <a href="/docs/reference/layout/box/#parameters-outset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: |-
          <p>The content to place into the circle. The circle expands to fit this
          content, keeping the 1-1 aspect ratio.</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/visualize/color/
  title: Color
  description: Color 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: predefined-colors
    name: Predefined Colors
    children: []
  - id: predefined-color-maps
    name: Predefined Color Maps
    children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-luma
      name: Luma
      children:
      - id: definitions-luma-lightness
        name: lightness
        children: []
      - id: definitions-luma-color
        name: color
        children: []
    - id: definitions-oklab
      name: Oklab
      children:
      - id: definitions-oklab-lightness
        name: lightness
        children: []
      - id: definitions-oklab-a
        name: a
        children: []
      - id: definitions-oklab-b
        name: b
        children: []
      - id: definitions-oklab-alpha
        name: alpha
        children: []
      - id: definitions-oklab-color
        name: color
        children: []
    - id: definitions-oklch
      name: Oklch
      children:
      - id: definitions-oklch-lightness
        name: lightness
        children: []
      - id: definitions-oklch-chroma
        name: chroma
        children: []
      - id: definitions-oklch-hue
        name: hue
        children: []
      - id: definitions-oklch-alpha
        name: alpha
        children: []
      - id: definitions-oklch-color
        name: color
        children: []
    - id: definitions-linear-rgb
      name: Linear RGB
      children:
      - id: definitions-linear-rgb-red
        name: red
        children: []
      - id: definitions-linear-rgb-green
        name: green
        children: []
      - id: definitions-linear-rgb-blue
        name: blue
        children: []
      - id: definitions-linear-rgb-alpha
        name: alpha
        children: []
      - id: definitions-linear-rgb-color
        name: color
        children: []
    - id: definitions-rgb
      name: RGB
      children:
      - id: definitions-rgb-red
        name: red
        children: []
      - id: definitions-rgb-green
        name: green
        children: []
      - id: definitions-rgb-blue
        name: blue
        children: []
      - id: definitions-rgb-alpha
        name: alpha
        children: []
      - id: definitions-rgb-hex
        name: hex
        children: []
      - id: definitions-rgb-color
        name: color
        children: []
    - id: definitions-cmyk
      name: CMYK
      children:
      - id: definitions-cmyk-cyan
        name: cyan
        children: []
      - id: definitions-cmyk-magenta
        name: magenta
        children: []
      - id: definitions-cmyk-yellow
        name: yellow
        children: []
      - id: definitions-cmyk-key
        name: key
        children: []
      - id: definitions-cmyk-color
        name: color
        children: []
    - id: definitions-hsl
      name: HSL
      children:
      - id: definitions-hsl-hue
        name: hue
        children: []
      - id: definitions-hsl-saturation
        name: saturation
        children: []
      - id: definitions-hsl-lightness
        name: lightness
        children: []
      - id: definitions-hsl-alpha
        name: alpha
        children: []
      - id: definitions-hsl-color
        name: color
        children: []
    - id: definitions-hsv
      name: HSV
      children:
      - id: definitions-hsv-hue
        name: hue
        children: []
      - id: definitions-hsv-saturation
        name: saturation
        children: []
      - id: definitions-hsv-value
        name: value
        children: []
      - id: definitions-hsv-alpha
        name: alpha
        children: []
      - id: definitions-hsv-color
        name: color
        children: []
    - id: definitions-components
      name: Components
      children:
      - id: definitions-components-alpha
        name: alpha
        children: []
    - id: definitions-space
      name: Space
      children: []
    - id: definitions-to-hex
      name: To Hex
      children: []
    - id: definitions-lighten
      name: Lighten
      children:
      - id: definitions-lighten-factor
        name: factor
        children: []
    - id: definitions-darken
      name: Darken
      children:
      - id: definitions-darken-factor
        name: factor
        children: []
    - id: definitions-saturate
      name: Saturate
      children:
      - id: definitions-saturate-factor
        name: factor
        children: []
    - id: definitions-desaturate
      name: Desaturate
      children:
      - id: definitions-desaturate-factor
        name: factor
        children: []
    - id: definitions-negate
      name: Negate
      children: []
    - id: definitions-rotate
      name: Rotate
      children:
      - id: definitions-rotate-angle
        name: angle
        children: []
      - id: definitions-rotate-space
        name: space
        children: []
    - id: definitions-mix
      name: Mix
      children:
      - id: definitions-mix-colors
        name: colors
        children: []
      - id: definitions-mix-space
        name: space
        children: []
  body:
    kind: type
    content:
      name: color
      title: Color
      keywords: []
      oneliner: A color in a specific color space.
      details: |-
        <p>A color in a specific color space.</p>
        <p>Typst supports:</p>
        <ul>
        <li>sRGB through the <a href="/docs/reference/visualize/color/#definitions-rgb"><code>rgb</code> function</a></li>
        <li>Device CMYK through <a href="/docs/reference/visualize/color/#definitions-cmyk"><code>cmyk</code> function</a></li>
        <li>D65 Gray through the <a href="/docs/reference/visualize/color/#definitions-luma"><code>luma</code> function</a></li>
        <li>Oklab through the <a href="/docs/reference/visualize/color/#definitions-oklab"><code>oklab</code> function</a></li>
        <li>Oklch through the <a href="/docs/reference/visualize/color/#definitions-oklch"><code>oklch</code> function</a></li>
        <li>Linear RGB through the <a href="/docs/reference/visualize/color/#definitions-linear-rgb"><code>color.linear-rgb</code> function</a></li>
        <li>HSL through the <a href="/docs/reference/visualize/color/#definitions-hsl"><code>color.hsl</code> function</a></li>
        <li>HSV through the <a href="/docs/reference/visualize/color/#definitions-hsv"><code>color.hsv</code> function</a></li>
        </ul>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> aqua<span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/90f2b6a88dd0e86c2e96e90445674f20.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="predefined-colors">Predefined colors</h2>
        <p>Typst defines the following built-in colors:</p>
        <table><thead><tr><th>Color</th><th style="text-align: left">Definition</th></tr></thead><tbody>
        <tr><td><code>black</code></td><td style="text-align: left"><code><span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>gray</code></td><td style="text-align: left"><code><span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">170</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>silver</code></td><td style="text-align: left"><code><span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">221</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>white</code></td><td style="text-align: left"><code><span class="typ-func">luma</span><span class="typ-punct">(</span><span class="typ-num">255</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>navy</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#001f3f&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>blue</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#0074d9&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>aqua</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#7fdbff&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>teal</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#39cccc&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>eastern</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#239dad&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>purple</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#b10dc9&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>fuchsia</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#f012be&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>maroon</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#85144b&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>red</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#ff4136&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>orange</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#ff851b&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>yellow</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#ffdc00&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>olive</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#3d9970&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>green</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#2ecc40&quot;</span><span class="typ-punct">)</span></code></td></tr>
        <tr><td><code>lime</code></td><td style="text-align: left"><code><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#01ff70&quot;</span><span class="typ-punct">)</span></code></td></tr>
        </tbody></table>
        <p>The predefined colors and the most important color constructors are
        available globally and also in the color type's scope, so you can write
        either <code>color.red</code> or just <code>red</code>.</p>
        <h2 id="predefined-color-maps">Predefined color maps</h2>
        <p>Typst also includes a number of preset color maps that can be used for
        gradients. Most of these color maps are chosen to be color blind friendly.</p>
        <table><thead><tr><th>Map</th><th style="text-align: left">Details</th></tr></thead><tbody>
        <tr><td><code>turbo</code></td><td style="text-align: left">A perceptually uniform rainbow-like color map. Read <a href="https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html">this blog post</a> for more details.</td></tr>
        <tr><td><code>cividis</code></td><td style="text-align: left">A blue to gray to yellow color map. See <a href="https://bids.github.io/colormap/">this blog post</a> for more details.</td></tr>
        <tr><td><code>rainbow</code></td><td style="text-align: left">Cycles through the full color spectrum. This color map is best used by setting the interpolation color space to <a href="/docs/reference/visualize/color/#definitions-hsl">HSL</a>. The rainbow gradient is <strong>not suitable</strong> for data visualization because it is not perceptually uniform, so the differences between values become unclear to your readers. It should only be used for decorative purposes.</td></tr>
        <tr><td><code>spectral</code></td><td style="text-align: left">Red to yellow to blue color map.</td></tr>
        <tr><td><code>viridis</code></td><td style="text-align: left">A purple to teal to yellow color map.</td></tr>
        <tr><td><code>inferno</code></td><td style="text-align: left">A black to red to yellow color map.</td></tr>
        <tr><td><code>magma</code></td><td style="text-align: left">A black to purple to yellow color map.</td></tr>
        <tr><td><code>plasma</code></td><td style="text-align: left">A purple to pink to yellow color map.</td></tr>
        <tr><td><code>rocket</code></td><td style="text-align: left">A black to red to white color map.</td></tr>
        <tr><td><code>mako</code></td><td style="text-align: left">A black to teal to yellow color map.</td></tr>
        <tr><td><code>vlag</code></td><td style="text-align: left">A light blue to white to red color map.</td></tr>
        <tr><td><code>icefire</code></td><td style="text-align: left">A light teal to black to yellow color map.</td></tr>
        <tr><td><code>flare</code></td><td style="text-align: left">A orange to purple color map that is perceptually uniform.</td></tr>
        <tr><td><code>crest</code></td><td style="text-align: left">A blue to white to red color map.</td></tr>
        </tbody></table>
        <p>Some popular presets are not included because they are not available under a
        free licence. Others, like
        <a href="https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/">Jet</a>,
        are not included because they are not color blind friendly. Feel free to use
        or create a package with other presets that are useful to you!</p>
      constructor: null
      scope:
      - path:
        - color
        name: luma
        title: Luma
        keywords: []
        oneliner: Create a grayscale color.
        element: false
        details: |-
          <p>Create a grayscale color.</p>
          <p>A grayscale color is represented internally by a single <code>lightness</code>
          component.</p>
          <p>These components are also available using the
          <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a> method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">for</span> x <span class="typ-key">in</span> <span class="typ-func">range</span><span class="typ-punct">(</span><span class="typ-num">250</span><span class="typ-punct">,</span> step<span class="typ-punct">:</span> <span class="typ-num">50</span><span class="typ-punct">)</span> <span class="typ-punct">{</span>
            <span class="typ-func">box</span><span class="typ-punct">(</span><span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> <span class="typ-func">luma</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-punct">}</span>
          </code></pre><div class="preview"><img src="/assets/docs/1aa2cf2b25d34b2e2fea8240fab55935.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: lightness
          details: <p>The lightness component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to grayscale.</p>
            <p>If this is given, the <code>lightness</code> should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: oklab
        title: Oklab
        keywords: []
        oneliner: Create an [Oklab](https://bottosson.github.io/posts/oklab/) color.
        element: false
        details: |-
          <p>Create an <a href="https://bottosson.github.io/posts/oklab/">Oklab</a> color.</p>
          <p>This color space is well suited for the following use cases:</p>
          <ul>
          <li>Color manipulation such as saturating while keeping perceived hue</li>
          <li>Creating grayscale images with uniform perceived lightness</li>
          <li>Creating smooth and uniform color transition and gradients</li>
          </ul>
          <p>A linear Oklab color is represented internally by an array of four
          components:</p>
          <ul>
          <li>lightness (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>a (<a href="/docs/reference/foundations/float/"><code>float</code></a> or <a href="/docs/reference/layout/ratio/"><code>ratio</code></a>.
          Ratios are relative to <code><span class="typ-num">0.4</span></code>; meaning <code><span class="typ-num">50%</span></code> is equal to <code><span class="typ-num">0.2</span></code>)</li>
          <li>b (<a href="/docs/reference/foundations/float/"><code>float</code></a> or <a href="/docs/reference/layout/ratio/"><code>ratio</code></a>.
          Ratios are relative to <code><span class="typ-num">0.4</span></code>; meaning <code><span class="typ-num">50%</span></code> is equal to <code><span class="typ-num">0.2</span></code>)</li>
          <li>alpha (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          </ul>
          <p>These components are also available using the
          <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a> method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> <span class="typ-func">oklab</span><span class="typ-punct">(</span><span class="typ-num">27%</span><span class="typ-punct">,</span> <span class="typ-num">20%</span><span class="typ-punct">,</span> <span class="typ-op">-</span><span class="typ-num">3%</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e8652fd85f8b296cd86c63e686e10fe7.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: lightness
          details: <p>The lightness component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: a
          details: <p>The a (&quot;green/red&quot;) component.</p>
          example: null
          types:
          - float
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: b
          details: <p>The b (&quot;blue/yellow&quot;) component.</p>
          example: null
          types:
          - float
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: alpha
          details: <p>The alpha component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to Oklab.</p>
            <p>If this is given, the individual components should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: oklch
        title: Oklch
        keywords: []
        oneliner: Create an [Oklch](https://bottosson.github.io/posts/oklab/) color.
        element: false
        details: |-
          <p>Create an <a href="https://bottosson.github.io/posts/oklab/">Oklch</a> color.</p>
          <p>This color space is well suited for the following use cases:</p>
          <ul>
          <li>Color manipulation involving lightness, chroma, and hue</li>
          <li>Creating grayscale images with uniform perceived lightness</li>
          <li>Creating smooth and uniform color transition and gradients</li>
          </ul>
          <p>A linear Oklch color is represented internally by an array of four
          components:</p>
          <ul>
          <li>lightness (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>chroma (<a href="/docs/reference/foundations/float/"><code>float</code></a> or <a href="/docs/reference/layout/ratio/"><code>ratio</code></a>.
          Ratios are relative to <code><span class="typ-num">0.4</span></code>; meaning <code><span class="typ-num">50%</span></code> is equal to <code><span class="typ-num">0.2</span></code>)</li>
          <li>hue (<a href="/docs/reference/layout/angle/"><code>angle</code></a>)</li>
          <li>alpha (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          </ul>
          <p>These components are also available using the
          <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a> method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> <span class="typ-func">oklch</span><span class="typ-punct">(</span><span class="typ-num">40%</span><span class="typ-punct">,</span> <span class="typ-num">0.2</span><span class="typ-punct">,</span> <span class="typ-num">160deg</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/7ef0f0c309ae2433748bdc9b973e0a4d.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: lightness
          details: <p>The lightness component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: chroma
          details: <p>The chroma component.</p>
          example: null
          types:
          - float
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: hue
          details: <p>The hue component.</p>
          example: null
          types:
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: alpha
          details: <p>The alpha component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to Oklch.</p>
            <p>If this is given, the individual components should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: linear-rgb
        title: Linear RGB
        keywords: []
        oneliner: Create an RGB(A) color with linear luma.
        element: false
        details: |-
          <p>Create an RGB(A) color with linear luma.</p>
          <p>This color space is similar to sRGB, but with the distinction that the
          color component are not gamma corrected. This makes it easier to perform
          color operations such as blending and interpolation. Although, you
          should prefer to use the <a href="/docs/reference/visualize/color/#definitions-oklab"><code>oklab</code> function</a> for these.</p>
          <p>A linear RGB(A) color is represented internally by an array of four
          components:</p>
          <ul>
          <li>red (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>green (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>blue (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>alpha (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          </ul>
          <p>These components are also available using the
          <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a> method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> color<span class="typ-punct">.</span><span class="typ-func">linear-rgb</span><span class="typ-punct">(</span>
            <span class="typ-num">30%</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">10%</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/b1587bce8c3dce634ea8cd5c5eb8b60d.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: red
          details: <p>The red component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: green
          details: <p>The green component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: blue
          details: <p>The blue component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: alpha
          details: <p>The alpha component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to linear RGB(A).</p>
            <p>If this is given, the individual components should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: rgb
        title: RGB
        keywords: []
        oneliner: Create an RGB(A) color.
        element: false
        details: |-
          <p>Create an RGB(A) color.</p>
          <p>The color is specified in the sRGB color space.</p>
          <p>An RGB(A) color is represented internally by an array of four components:</p>
          <ul>
          <li>red (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>green (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>blue (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>alpha (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          </ul>
          <p>These components are also available using the <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a>
          method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#b1f2eb&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-num">87</span><span class="typ-punct">,</span> <span class="typ-num">127</span><span class="typ-punct">,</span> <span class="typ-num">230</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-num">25%</span><span class="typ-punct">,</span> <span class="typ-num">13%</span><span class="typ-punct">,</span> <span class="typ-num">65%</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/1bc56d7aeef07e0435d66371387f13c0.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: red
          details: <p>The red component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: green
          details: <p>The green component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: blue
          details: <p>The blue component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: alpha
          details: <p>The alpha component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: hex
          details: |-
            <p>Alternatively: The color in hexadecimal notation.</p>
            <p>Accepts three, four, six or eight hexadecimal digits and optionally
            a leading hash.</p>
            <p>If this is given, the individual components should not be given.</p>
          example: |-
            <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">text</span><span class="typ-punct">(</span><span class="typ-num">16pt</span><span class="typ-punct">,</span> <span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-str">&quot;#239dad&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">[</span>
              <span class="typ-strong">*Typst*</span>
            <span class="typ-punct">]</span>
            </code></pre><div class="preview"><img src="/assets/docs/4f6b86b72e34b44e39e85fd847f3421b.png" alt="Preview" width="480" height="190"/></div></div>
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to RGB(a).</p>
            <p>If this is given, the individual components should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: cmyk
        title: CMYK
        keywords: []
        oneliner: Create a CMYK color.
        element: false
        details: |-
          <p>Create a CMYK color.</p>
          <p>This is useful if you want to target a specific printer. The conversion
          to RGB for display preview might differ from how your printer reproduces
          the color.</p>
          <p>An HSL color is represented internally by an array of four components:</p>
          <ul>
          <li>cyan (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>magenta (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>yellow (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>key (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          </ul>
          <p>These components are also available using the
          <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a> method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> <span class="typ-func">cmyk</span><span class="typ-punct">(</span><span class="typ-num">27%</span><span class="typ-punct">,</span> <span class="typ-num">0%</span><span class="typ-punct">,</span> <span class="typ-num">3%</span><span class="typ-punct">,</span> <span class="typ-num">5%</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/ba913143dfc94a799bdaec785400b707.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: cyan
          details: <p>The cyan component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: magenta
          details: <p>The magenta component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: yellow
          details: <p>The yellow component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: key
          details: <p>The key component.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to CMYK.</p>
            <p>If this is given, the individual components should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: hsl
        title: HSL
        keywords: []
        oneliner: Create an HSL color.
        element: false
        details: |-
          <p>Create an HSL color.</p>
          <p>This color space is useful for specifying colors by hue, saturation and
          lightness. It is also useful for color manipulation, such as saturating
          while keeping perceived hue.</p>
          <p>An HSL color is represented internally by an array of four components:</p>
          <ul>
          <li>hue (<a href="/docs/reference/layout/angle/"><code>angle</code></a>)</li>
          <li>saturation (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>lightness (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>alpha (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          </ul>
          <p>These components are also available using the
          <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a> method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> color<span class="typ-punct">.</span><span class="typ-func">hsl</span><span class="typ-punct">(</span><span class="typ-num">30deg</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">60%</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/8f749c3ddf5a03313e9c0e88db636802.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: hue
          details: <p>The hue angle.</p>
          example: null
          types:
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: saturation
          details: <p>The saturation component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: lightness
          details: <p>The lightness component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: alpha
          details: <p>The alpha component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to HSL.</p>
            <p>If this is given, the individual components should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: hsv
        title: HSV
        keywords: []
        oneliner: Create an HSV color.
        element: false
        details: |-
          <p>Create an HSV color.</p>
          <p>This color space is useful for specifying colors by hue, saturation and
          value. It is also useful for color manipulation, such as saturating
          while keeping perceived hue.</p>
          <p>An HSV color is represented internally by an array of four components:</p>
          <ul>
          <li>hue (<a href="/docs/reference/layout/angle/"><code>angle</code></a>)</li>
          <li>saturation (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>value (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          <li>alpha (<a href="/docs/reference/layout/ratio/"><code>ratio</code></a>)</li>
          </ul>
          <p>These components are also available using the
          <a href="/docs/reference/visualize/color/#definitions-components"><code>components</code></a> method.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> color<span class="typ-punct">.</span><span class="typ-func">hsv</span><span class="typ-punct">(</span><span class="typ-num">30deg</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">60%</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/ec9ddda43d074d38554f5485722219db.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: hue
          details: <p>The hue angle.</p>
          example: null
          types:
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: saturation
          details: <p>The saturation component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: value
          details: <p>The value component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: alpha
          details: <p>The alpha component.</p>
          example: null
          types:
          - int
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: color
          details: |-
            <p>Alternatively: The color to convert to HSL.</p>
            <p>If this is given, the individual components should not be given.</p>
          example: null
          types:
          - color
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: components
        title: Components
        keywords: []
        oneliner: Extracts the components of this color.
        element: false
        details: |-
          <p>Extracts the components of this color.</p>
          <p>The size and values of this array depends on the color space. You can
          obtain the color space using <a href="/docs/reference/visualize/color/#definitions-space"><code>space</code></a>. Below is a table
          of the color spaces and their components:</p>
          <table><thead><tr><th>Color space</th><th>C1</th><th>C2</th><th>C3</th><th>C4</th></tr></thead><tbody>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-luma"><code>luma</code></a></td><td>Lightness</td><td></td><td></td><td></td></tr>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-oklab"><code>oklab</code></a></td><td>Lightness</td><td><code>a</code></td><td><code>b</code></td><td>Alpha</td></tr>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-oklch"><code>oklch</code></a></td><td>Lightness</td><td>Chroma</td><td>Hue</td><td>Alpha</td></tr>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-linear-rgb"><code>linear-rgb</code></a></td><td>Red</td><td>Green</td><td>Blue</td><td>Alpha</td></tr>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-rgb"><code>rgb</code></a></td><td>Red</td><td>Green</td><td>Blue</td><td>Alpha</td></tr>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-cmyk"><code>cmyk</code></a></td><td>Cyan</td><td>Magenta</td><td>Yellow</td><td>Key</td></tr>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-hsl"><code>hsl</code></a></td><td>Hue</td><td>Saturation</td><td>Lightness</td><td>Alpha</td></tr>
          <tr><td><a href="/docs/reference/visualize/color/#definitions-hsv"><code>hsv</code></a></td><td>Hue</td><td>Saturation</td><td>Value</td><td>Alpha</td></tr>
          </tbody></table>
          <p>For the meaning and type of each individual value, see the documentation
          of the corresponding color space. The alpha component is optional and
          only included if the <code>alpha</code> argument is <code>true</code>. The length of the
          returned array depends on the number of components and whether the alpha
          component is included.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-comment">// note that the alpha component is included by default</span>
          <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-func">rgb</span><span class="typ-punct">(</span><span class="typ-num">40%</span><span class="typ-punct">,</span> <span class="typ-num">60%</span><span class="typ-punct">,</span> <span class="typ-num">80%</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">components</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-punct">(</span><span class="typ-num">40%</span><span class="typ-punct">,</span> <span class="typ-num">60%</span><span class="typ-punct">,</span> <span class="typ-num">80%</span><span class="typ-punct">,</span> <span class="typ-num">100%</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/6256b6a7300a0fc8a2526dd5401230c8.png" alt="Preview" width="480" height="190"/></div></div>
        self: true
        params:
        - name: alpha
          details: <p>Whether to include the alpha component.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
      - path:
        - color
        name: space
        title: Space
        keywords: []
        oneliner: 'Returns the constructor function for this color''s space:'
        element: false
        details: |-
          <p>Returns the constructor function for this color's space:</p>
          <ul>
          <li><a href="/docs/reference/visualize/color/#definitions-luma"><code>luma</code></a></li>
          <li><a href="/docs/reference/visualize/color/#definitions-oklab"><code>oklab</code></a></li>
          <li><a href="/docs/reference/visualize/color/#definitions-oklch"><code>oklch</code></a></li>
          <li><a href="/docs/reference/visualize/color/#definitions-linear-rgb"><code>linear-rgb</code></a></li>
          <li><a href="/docs/reference/visualize/color/#definitions-rgb"><code>rgb</code></a></li>
          <li><a href="/docs/reference/visualize/color/#definitions-cmyk"><code>cmyk</code></a></li>
          <li><a href="/docs/reference/visualize/color/#definitions-hsl"><code>hsl</code></a></li>
          <li><a href="/docs/reference/visualize/color/#definitions-hsv"><code>hsv</code></a></li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> color <span class="typ-op">=</span> <span class="typ-func">cmyk</span><span class="typ-punct">(</span><span class="typ-num">1%</span><span class="typ-punct">,</span> <span class="typ-num">2%</span><span class="typ-punct">,</span> <span class="typ-num">3%</span><span class="typ-punct">,</span> <span class="typ-num">4%</span><span class="typ-punct">)</span>
          <span class="typ-punct">#</span><span class="typ-punct">(</span>color<span class="typ-punct">.</span><span class="typ-func">space</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-op">==</span> cmyk<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/894dcb2783141d3c088be0f7801ac62c.png" alt="Preview" width="480" height="190"/></div></div>
        self: true
        params: []
        returns:
        - any
        scope: []
      - path:
        - color
        name: to-hex
        title: To Hex
        keywords: []
        oneliner: Returns the color's RGB(A) hex representation (such as `#ffaa32`
          or
        element: false
        details: |-
          <p>Returns the color's RGB(A) hex representation (such as <code>#ffaa32</code> or
          <code>#020304fe</code>). The alpha component (last two digits in <code>#020304fe</code>) is
          omitted if it is equal to <code>ff</code> (255 / 100%).</p>
        example: null
        self: true
        params: []
        returns:
        - str
        scope: []
      - path:
        - color
        name: lighten
        title: Lighten
        keywords: []
        oneliner: Lightens a color by a given factor.
        element: false
        details: <p>Lightens a color by a given factor.</p>
        example: null
        self: true
        params:
        - name: factor
          details: <p>The factor to lighten the color by.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: darken
        title: Darken
        keywords: []
        oneliner: Darkens a color by a given factor.
        element: false
        details: <p>Darkens a color by a given factor.</p>
        example: null
        self: true
        params:
        - name: factor
          details: <p>The factor to darken the color by.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: saturate
        title: Saturate
        keywords: []
        oneliner: Increases the saturation of a color by a given factor.
        element: false
        details: <p>Increases the saturation of a color by a given factor.</p>
        example: null
        self: true
        params:
        - name: factor
          details: <p>The factor to saturate the color by.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: desaturate
        title: Desaturate
        keywords: []
        oneliner: Decreases the saturation of a color by a given factor.
        element: false
        details: <p>Decreases the saturation of a color by a given factor.</p>
        example: null
        self: true
        params:
        - name: factor
          details: <p>The factor to desaturate the color by.</p>
          example: null
          types:
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: negate
        title: Negate
        keywords: []
        oneliner: Produces the negative of the color.
        element: false
        details: <p>Produces the negative of the color.</p>
        example: null
        self: true
        params: []
        returns:
        - color
        scope: []
      - path:
        - color
        name: rotate
        title: Rotate
        keywords: []
        oneliner: Rotates the hue of the color by a given angle.
        element: false
        details: <p>Rotates the hue of the color by a given angle.</p>
        example: null
        self: true
        params:
        - name: angle
          details: <p>The angle to rotate the hue by.</p>
          example: null
          types:
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: space
          details: |-
            <p>The color space used to rotate. By default, this happens in a perceptual
            color space (<a href="/docs/reference/visualize/color/#definitions-oklch"><code>oklch</code></a>).</p>
          example: null
          types:
          - any
          strings: []
          default: <code>oklch</code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - color
        name: mix
        title: Mix
        keywords: []
        oneliner: Create a color by mixing two or more colors.
        element: false
        details: <p>Create a color by mixing two or more colors.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">block</span><span class="typ-punct">(</span>height<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">,</span> width<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">block</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> red<span class="typ-punct">.</span><span class="typ-func">mix</span><span class="typ-punct">(</span>blue<span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">block</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> red<span class="typ-punct">.</span><span class="typ-func">mix</span><span class="typ-punct">(</span>blue<span class="typ-punct">,</span> space<span class="typ-punct">:</span> rgb<span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">block</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> color<span class="typ-punct">.</span><span class="typ-func">mix</span><span class="typ-punct">(</span>red<span class="typ-punct">,</span> blue<span class="typ-punct">,</span> white<span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">block</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> color<span class="typ-punct">.</span><span class="typ-func">mix</span><span class="typ-punct">(</span><span class="typ-punct">(</span>red<span class="typ-punct">,</span> <span class="typ-num">70%</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span>blue<span class="typ-punct">,</span> <span class="typ-num">30%</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/978e3523abe474a41bb3a8404b875593.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: colors
          details: |-
            <p>The colors, optionally with weights, specified as a pair (array of
            length two) of color and weight (float or ratio).</p>
            <p>The weights do not need to add to <code><span class="typ-num">100%</span></code>, they are relative to the
            sum of all weights.</p>
          example: null
          types:
          - color
          - array
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        - name: space
          details: |-
            <p>The color space to mix in. By default, this happens in a perceptual
            color space (<a href="/docs/reference/visualize/color/#definitions-oklab"><code>oklab</code></a>).</p>
          example: null
          types:
          - any
          strings: []
          default: <code>oklab</code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - color
        scope: []
  children: []
- route: /docs/reference/visualize/ellipse/
  title: Ellipse
  description: '`ellipse` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-width
      name: width
      children: []
    - id: parameters-height
      name: height
      children: []
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-inset
      name: inset
      children: []
    - id: parameters-outset
      name: outset
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: ellipse
      title: Ellipse
      keywords: []
      oneliner: An ellipse with optional content.
      element: true
      details: |-
        <p>An ellipse with optional content.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-comment">// Without content.</span>
        <span class="typ-func">#</span><span class="typ-func">ellipse</span><span class="typ-punct">(</span>width<span class="typ-punct">:</span> <span class="typ-num">35%</span><span class="typ-punct">,</span> height<span class="typ-punct">:</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span>

        <span class="typ-comment">// With content.</span>
        <span class="typ-func">#</span><span class="typ-func">ellipse</span><span class="typ-punct">[</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">align</span><span class="typ-punct">(</span>center<span class="typ-punct">)</span>
          Automatically sized <span class="typ-escape">\</span>
          to fit the content.
        <span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/76f10ce7aa56755b157208e0907ab77d.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: width
        details: <p>The ellipse's width, relative to its parent container.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: height
        details: <p>The ellipse's height, relative to its parent container.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fill
        details: |-
          <p>How to fill the ellipse. See the <a href="/docs/reference/visualize/rect/#parameters-fill">rectangle's documentation</a>
          for more details.</p>
        example: null
        types:
        - none
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: |-
          <p>How to stroke the ellipse. See the
          <a href="/docs/reference/visualize/rect/#parameters-stroke">rectangle's documentation</a> for more details.</p>
        example: null
        types:
        - none
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: inset
        details: |-
          <p>How much to pad the ellipse's content. See the
          <a href="/docs/reference/layout/box/#parameters-inset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">5pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: outset
        details: |-
          <p>How much to expand the ellipse's size without affecting the layout. See
          the <a href="/docs/reference/layout/box/#parameters-outset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: |-
          <p>The content to place into the ellipse.</p>
          <p>When this is omitted, the ellipse takes on a default size of at most
          <code><span class="typ-num">45pt</span></code> by <code><span class="typ-num">30pt</span></code>.</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/visualize/gradient/
  title: Gradient
  description: Gradient 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: examples
    name: Examples
    children: []
  - id: stops
    name: Stops
    children: []
  - id: relativeness
    name: Relativeness
    children: []
  - id: color-spaces-and-interpolation
    name: Color Spaces And Interpolation
    children: []
  - id: direction
    name: Direction
    children: []
  - id: presets
    name: Presets
    children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-linear
      name: Linear Gradient
      children:
      - id: definitions-linear-stops
        name: stops
        children: []
      - id: definitions-linear-space
        name: space
        children: []
      - id: definitions-linear-relative
        name: relative
        children: []
      - id: definitions-linear-dir
        name: dir
        children: []
      - id: definitions-linear-angle
        name: angle
        children: []
    - id: definitions-radial
      name: Radial
      children:
      - id: definitions-radial-stops
        name: stops
        children: []
      - id: definitions-radial-space
        name: space
        children: []
      - id: definitions-radial-relative
        name: relative
        children: []
      - id: definitions-radial-center
        name: center
        children: []
      - id: definitions-radial-radius
        name: radius
        children: []
      - id: definitions-radial-focal-center
        name: focal-center
        children: []
      - id: definitions-radial-focal-radius
        name: focal-radius
        children: []
    - id: definitions-conic
      name: Conic
      children:
      - id: definitions-conic-stops
        name: stops
        children: []
      - id: definitions-conic-angle
        name: angle
        children: []
      - id: definitions-conic-space
        name: space
        children: []
      - id: definitions-conic-relative
        name: relative
        children: []
      - id: definitions-conic-center
        name: center
        children: []
    - id: definitions-sharp
      name: Sharp
      children:
      - id: definitions-sharp-steps
        name: steps
        children: []
      - id: definitions-sharp-smoothness
        name: smoothness
        children: []
    - id: definitions-repeat
      name: Repeat
      children:
      - id: definitions-repeat-repetitions
        name: repetitions
        children: []
      - id: definitions-repeat-mirror
        name: mirror
        children: []
    - id: definitions-kind
      name: Kind
      children: []
    - id: definitions-stops
      name: Stops
      children: []
    - id: definitions-space
      name: Space
      children: []
    - id: definitions-relative
      name: Relative
      children: []
    - id: definitions-angle
      name: Angle
      children: []
    - id: definitions-sample
      name: Sample
      children:
      - id: definitions-sample-t
        name: t
        children: []
    - id: definitions-samples
      name: Samples
      children:
      - id: definitions-samples-ts
        name: ts
        children: []
  body:
    kind: type
    content:
      name: gradient
      title: Gradient
      keywords: []
      oneliner: A color gradient.
      details: |-
        <p>A color gradient.</p>
        <p>Typst supports linear gradients through the
        <a href="/docs/reference/visualize/gradient/#definitions-linear"><code>gradient.linear</code> function</a>, radial gradients through
        the <a href="/docs/reference/visualize/gradient/#definitions-radial"><code>gradient.radial</code> function</a>, and conic gradients
        through the <a href="/docs/reference/visualize/gradient/#definitions-conic"><code>gradient.conic</code> function</a>.</p>
        <p>A gradient can be used for the following purposes:</p>
        <ul>
        <li>As a fill to paint the interior of a shape:
        <code><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span><span class="typ-punct">)</span><span class="typ-punct">)</span></code></li>
        <li>As a stroke to paint the outline of a shape:
        <code><span class="typ-func">rect</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">1pt</span> <span class="typ-op">+</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span><span class="typ-punct">)</span><span class="typ-punct">)</span></code></li>
        <li>As the fill of text:
        <code><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span><span class="typ-punct">)</span><span class="typ-punct">)</span></code></li>
        <li>As a color map you can <a href="/docs/reference/visualize/gradient/#definitions-sample">sample</a> from:
        <code>gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">sample</span><span class="typ-punct">(</span><span class="typ-num">0.5</span><span class="typ-punct">)</span></code></li>
        </ul>
        <h2 id="examples">Examples</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
          dir<span class="typ-punct">:</span> ltr<span class="typ-punct">,</span>
          spacing<span class="typ-punct">:</span> <span class="typ-num">1fr</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">radial</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">conic</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/dfd0b93470d06c9e36abf8e57a9d8264.png" alt="Preview" width="480" height="190"/></div></div>
        <p>Gradients are also supported on text, but only when setting the
        <a href="/docs/reference/visualize/gradient/#definitions-relative">relativeness</a> to either <code><span class="typ-key">auto</span></code> (the default value) or
        <code><span class="typ-str">&quot;parent&quot;</span></code>. To create word-by-word or glyph-by-glyph gradients, you can
        wrap the words or characters of your text in <a href="/docs/reference/layout/box/">boxes</a> manually or
        through a <a href="/docs/reference/styling/#show-rules">show rule</a>.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span>red<span class="typ-punct">,</span> blue<span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">rainbow</span><span class="typ-punct">(</span>content<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
          <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">box</span><span class="typ-punct">(</span>content<span class="typ-punct">)</span>
        <span class="typ-punct">}</span>

        This is a gradient on text, but with a <span class="typ-func">#</span><span class="typ-func">rainbow</span><span class="typ-punct">[</span>twist<span class="typ-punct">]</span>!
        </code></pre><div class="preview"><img src="/assets/docs/28ee492b7f476abb5353acd3248662ad.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="stops">Stops</h2>
        <p>A gradient is composed of a series of stops. Each of these stops has a color
        and an offset. The offset is a <a href="/docs/reference/layout/ratio/">ratio</a> between <code><span class="typ-num">0%</span></code> and <code><span class="typ-num">100%</span></code> or
        an angle between <code><span class="typ-num">0deg</span></code> and <code><span class="typ-num">360deg</span></code>. The offset is a relative position
        that determines how far along the gradient the stop is located. The stop's
        color is the color of the gradient at that position. You can choose to omit
        the offsets when defining a gradient. In this case, Typst will space all
        stops evenly.</p>
        <h2 id="relativeness">Relativeness</h2>
        <p>The location of the <code><span class="typ-num">0%</span></code> and <code><span class="typ-num">100%</span></code> stops depends on the dimensions
        of a container. This container can either be the shape that it is being
        painted on, or the closest surrounding container. This is controlled by the
        <code>relative</code> argument of a gradient constructor. By default, gradients are
        relative to the shape they are being painted on, unless the gradient is
        applied on text, in which case they are relative to the closest ancestor
        container.</p>
        <p>Typst determines the ancestor container as follows:</p>
        <ul>
        <li>For shapes that are placed at the root/top level of the document, the
        closest ancestor is the page itself.</li>
        <li>For other shapes, the ancestor is the innermost <a href="/docs/reference/layout/block/"><code>block</code></a> or
        <a href="/docs/reference/layout/box/"><code>box</code></a> that contains the shape. This includes the boxes and blocks
        that are implicitly created by show rules and elements. For example, a
        <a href="/docs/reference/layout/rotate/"><code>rotate</code></a> will not affect the parent of a gradient, but a
        <a href="/docs/reference/layout/grid/"><code>grid</code></a> will.</li>
        </ul>
        <h2 id="color-spaces-and-interpolation">Color spaces and interpolation</h2>
        <p>Gradients can be interpolated in any color space. By default, gradients are
        interpolated in the <a href="/docs/reference/visualize/color/#definitions-oklab">Oklab</a> color space, which is a
        <a href="https://programmingdesignsystems.com/color/perceptually-uniform-color-spaces/index.html">perceptually uniform</a>
        color space. This means that the gradient will be perceived as having a
        smooth progression of colors. This is particularly useful for data
        visualization.</p>
        <p>However, you can choose to interpolate the gradient in any supported color
        space you want, but beware that some color spaces are not suitable for
        perceptually interpolating between colors. Consult the table below when
        choosing an interpolation space.</p>
        <table><thead><tr><th>Color space</th><th>Perceptually uniform?</th></tr></thead><tbody>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-oklab">Oklab</a></td><td><em>Yes</em></td></tr>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-oklch">Oklch</a></td><td><em>Yes</em></td></tr>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-rgb">sRGB</a></td><td><em>No</em></td></tr>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-linear-rgb">linear-RGB</a></td><td><em>Yes</em></td></tr>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-cmyk">CMYK</a></td><td><em>No</em></td></tr>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-luma">Grayscale</a></td><td><em>Yes</em></td></tr>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-hsl">HSL</a></td><td><em>No</em></td></tr>
        <tr><td><a href="/docs/reference/visualize/color/#definitions-hsv">HSV</a></td><td><em>No</em></td></tr>
        </tbody></table>
        <h2 id="direction">Direction</h2>
        <p>Some gradients are sensitive to direction. For example, a linear gradient
        has an angle that determines its direction. Typst uses a clockwise angle,
        with 0° being from left to right, 90° from top to bottom, 180° from right to
        left, and 270° from bottom to top.</p>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
          dir<span class="typ-punct">:</span> ltr<span class="typ-punct">,</span>
          spacing<span class="typ-punct">:</span> <span class="typ-num">1fr</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span>red<span class="typ-punct">,</span> blue<span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-num">0deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span>red<span class="typ-punct">,</span> blue<span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-num">90deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span>red<span class="typ-punct">,</span> blue<span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-num">180deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span>red<span class="typ-punct">,</span> blue<span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-num">270deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/2e5fc136fe08bd2ce1808cfcfb5313f5.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="presets">Presets</h2>
        <p>Typst predefines color maps that you can use with your gradients. See the
        <a href="/docs/reference/visualize/color//#predefined-color-maps"><code>color</code></a> documentation for more details.</p>
      constructor: null
      scope:
      - path:
        - gradient
        name: linear
        title: Linear Gradient
        keywords: []
        oneliner: Creates a new linear gradient, in which colors transition along
          a
        element: false
        details: |-
          <p>Creates a new linear gradient, in which colors transition along a
          straight line.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>
            width<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span>
            height<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">,</span>
            fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span>
              <span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>viridis<span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/5622b4d75899d21ebcb7c5171472c318.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: stops
          details: <p>The color <a href="#stops">stops</a> of the gradient.</p>
          example: null
          types:
          - color
          - array
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        - name: space
          details: |-
            <p>The color space in which to interpolate the gradient.</p>
            <p>Defaults to a perceptually uniform color space called
            <a href="/docs/reference/visualize/color/#definitions-oklab">Oklab</a>.</p>
          example: null
          types:
          - any
          strings: []
          default: <code>oklab</code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: relative
          details: |-
            <p>The <a href="#relativeness">relative placement</a> of the gradient.</p>
            <p>For an element placed at the root/top level of the document, the
            parent is the page itself. For other elements, the parent is the
            innermost block, box, column, grid, or stack that contains the
            element.</p>
          example: null
          types:
          - auto
          - str
          strings:
          - string: self
            details: <p>The gradient is relative to itself (its own bounding box).</p>
          - string: parent
            details: <p>The gradient is relative to its parent (the parent's bounding
              box).</p>
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: dir
          details: <p>The direction of the gradient.</p>
          example: null
          types:
          - direction
          strings: []
          default: <code>ltr</code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: angle
          details: <p>The angle of the gradient.</p>
          example: null
          types:
          - angle
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - gradient
        scope: []
      - path:
        - gradient
        name: radial
        title: Radial
        keywords: []
        oneliner: Creates a new radial gradient, in which colors radiate away from
          an
        element: false
        details: |-
          <p>Creates a new radial gradient, in which colors radiate away from an
          origin.</p>
          <p>The gradient is defined by two circles: the focal circle and the end
          circle. The focal circle is a circle with center <code>focal-center</code> and
          radius <code>focal-radius</code>, that defines the points at which the gradient
          starts and has the color of the first stop. The end circle is a circle
          with center <code>center</code> and radius <code>radius</code>, that defines the points at
          which the gradient ends and has the color of the last stop. The gradient
          is then interpolated between these two circles.</p>
          <p>Using these four values, also called the focal point for the starting
          circle and the center and radius for the end circle, we can define a
          gradient with more interesting properties than a basic radial gradient.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
            dir<span class="typ-punct">:</span> ltr<span class="typ-punct">,</span>
            spacing<span class="typ-punct">:</span> <span class="typ-num">1fr</span><span class="typ-punct">,</span>
            <span class="typ-func">circle</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">radial</span><span class="typ-punct">(</span>
              <span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>viridis<span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">circle</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">radial</span><span class="typ-punct">(</span>
              <span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>viridis<span class="typ-punct">,</span>
              focal-center<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">10%</span><span class="typ-punct">,</span> <span class="typ-num">40%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
              focal-radius<span class="typ-punct">:</span> <span class="typ-num">5%</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/620675dca92d685a03c1af303306e654.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: stops
          details: <p>The color <a href="#stops">stops</a> of the gradient.</p>
          example: null
          types:
          - color
          - array
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        - name: space
          details: |-
            <p>The color space in which to interpolate the gradient.</p>
            <p>Defaults to a perceptually uniform color space called
            <a href="/docs/reference/visualize/color/#definitions-oklab">Oklab</a>.</p>
          example: null
          types:
          - any
          strings: []
          default: <code>oklab</code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: relative
          details: |-
            <p>The <a href="#relativeness">relative placement</a> of the gradient.</p>
            <p>For an element placed at the root/top level of the document, the parent
            is the page itself. For other elements, the parent is the innermost block,
            box, column, grid, or stack that contains the element.</p>
          example: null
          types:
          - auto
          - str
          strings:
          - string: self
            details: <p>The gradient is relative to itself (its own bounding box).</p>
          - string: parent
            details: <p>The gradient is relative to its parent (the parent's bounding
              box).</p>
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: center
          details: |-
            <p>The center of the end circle of the gradient.</p>
            <p>A value of <code><span class="typ-punct">(</span><span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span></code> means that the end circle is
            centered inside of its container.</p>
          example: null
          types:
          - array
          strings: []
          default: <code><span class="typ-punct">(</span><span class="typ-num">50%</span><span
            class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: radius
          details: |-
            <p>The radius of the end circle of the gradient.</p>
            <p>By default, it is set to <code><span class="typ-num">50%</span></code>. The ending radius must be bigger
            than the focal radius.</p>
          example: null
          types:
          - ratio
          strings: []
          default: <code><span class="typ-num">50%</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: focal-center
          details: |-
            <p>The center of the focal circle of the gradient.</p>
            <p>The focal center must be inside of the end circle.</p>
            <p>A value of <code><span class="typ-punct">(</span><span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span></code> means that the focal circle is
            centered inside of its container.</p>
            <p>By default it is set to the same as the center of the last circle.</p>
          example: null
          types:
          - auto
          - array
          strings: []
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: focal-radius
          details: |-
            <p>The radius of the focal circle of the gradient.</p>
            <p>The focal center must be inside of the end circle.</p>
            <p>By default, it is set to <code><span class="typ-num">0%</span></code>. The focal radius must be smaller
            than the ending radius`.</p>
          example: null
          types:
          - ratio
          strings: []
          default: <code><span class="typ-num">0%</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - gradient
        scope: []
      - path:
        - gradient
        name: conic
        title: Conic
        keywords: []
        oneliner: Creates a new conic gradient, in which colors change radially around
          a
        element: false
        details: |-
          <p>Creates a new conic gradient, in which colors change radially around a
          center point.</p>
          <p>You can control the center point of the gradient by using the <code>center</code>
          argument. By default, the center point is the center of the shape.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
            dir<span class="typ-punct">:</span> ltr<span class="typ-punct">,</span>
            spacing<span class="typ-punct">:</span> <span class="typ-num">1fr</span><span class="typ-punct">,</span>
            <span class="typ-func">circle</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">conic</span><span class="typ-punct">(</span>
              <span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>viridis<span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">circle</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> gradient<span class="typ-punct">.</span><span class="typ-func">conic</span><span class="typ-punct">(</span>
              <span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>viridis<span class="typ-punct">,</span>
              center<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">20%</span><span class="typ-punct">,</span> <span class="typ-num">30%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/b1189896a219532b51943b5da59def30.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: stops
          details: <p>The color <a href="#stops">stops</a> of the gradient.</p>
          example: null
          types:
          - color
          - array
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        - name: angle
          details: <p>The angle of the gradient.</p>
          example: null
          types:
          - angle
          strings: []
          default: <code><span class="typ-num">0deg</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: space
          details: |-
            <p>The color space in which to interpolate the gradient.</p>
            <p>Defaults to a perceptually uniform color space called
            <a href="/docs/reference/visualize/color/#definitions-oklab">Oklab</a>.</p>
          example: null
          types:
          - any
          strings: []
          default: <code>oklab</code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: relative
          details: |-
            <p>The <a href="#relativeness">relative placement</a> of the gradient.</p>
            <p>For an element placed at the root/top level of the document, the parent
            is the page itself. For other elements, the parent is the innermost block,
            box, column, grid, or stack that contains the element.</p>
          example: null
          types:
          - auto
          - str
          strings:
          - string: self
            details: <p>The gradient is relative to itself (its own bounding box).</p>
          - string: parent
            details: <p>The gradient is relative to its parent (the parent's bounding
              box).</p>
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: center
          details: |-
            <p>The center of the last circle of the gradient.</p>
            <p>A value of <code><span class="typ-punct">(</span><span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span></code> means that the end circle is
            centered inside of its container.</p>
          example: null
          types:
          - array
          strings: []
          default: <code><span class="typ-punct">(</span><span class="typ-num">50%</span><span
            class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - gradient
        scope: []
      - path:
        - gradient
        name: sharp
        title: Sharp
        keywords: []
        oneliner: Creates a sharp version of this gradient.
        element: false
        details: |-
          <p>Creates a sharp version of this gradient.</p>
          <p>Sharp gradients have discrete jumps between colors, instead of a
          smooth transition. They are particularly useful for creating color
          lists for a preset gradient.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">rect</span><span class="typ-punct">(</span>width<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span> height<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">let</span> grad <span class="typ-op">=</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> grad<span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> grad<span class="typ-punct">.</span><span class="typ-func">sharp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> grad<span class="typ-punct">.</span><span class="typ-func">sharp</span><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span> smoothness<span class="typ-punct">:</span> <span class="typ-num">20%</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/921af5b22a47515b0bfcdcff75eaecb0.png" alt="Preview" width="480" height="190"/></div></div>
        self: true
        params:
        - name: steps
          details: <p>The number of stops in the gradient.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: smoothness
          details: <p>How much to smooth the gradient.</p>
          example: null
          types:
          - ratio
          strings: []
          default: <code><span class="typ-num">0%</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - gradient
        scope: []
      - path:
        - gradient
        name: repeat
        title: Repeat
        keywords: []
        oneliner: Repeats this gradient a given number of times, optionally mirroring
          it
        element: false
        details: |-
          <p>Repeats this gradient a given number of times, optionally mirroring it
          at each repetition.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">circle</span><span class="typ-punct">(</span>
            radius<span class="typ-punct">:</span> <span class="typ-num">40pt</span><span class="typ-punct">,</span>
            fill<span class="typ-punct">:</span> gradient
              <span class="typ-punct">.</span><span class="typ-func">radial</span><span class="typ-punct">(</span>aqua<span class="typ-punct">,</span> white<span class="typ-punct">)</span>
              <span class="typ-punct">.</span><span class="typ-func">repeat</span><span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/eaf84a5e3e7993d037696762b956118e.png" alt="Preview" width="480" height="190"/></div></div>
        self: true
        params:
        - name: repetitions
          details: <p>The number of times to repeat the gradient.</p>
          example: null
          types:
          - int
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: mirror
          details: <p>Whether to mirror the gradient at each repetition.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">false</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - gradient
        scope: []
      - path:
        - gradient
        name: kind
        title: Kind
        keywords: []
        oneliner: Returns the kind of this gradient.
        element: false
        details: <p>Returns the kind of this gradient.</p>
        example: null
        self: true
        params: []
        returns:
        - function
        scope: []
      - path:
        - gradient
        name: stops
        title: Stops
        keywords: []
        oneliner: Returns the stops of this gradient.
        element: false
        details: <p>Returns the stops of this gradient.</p>
        example: null
        self: true
        params: []
        returns:
        - array
        scope: []
      - path:
        - gradient
        name: space
        title: Space
        keywords: []
        oneliner: Returns the mixing space of this gradient.
        element: false
        details: <p>Returns the mixing space of this gradient.</p>
        example: null
        self: true
        params: []
        returns:
        - any
        scope: []
      - path:
        - gradient
        name: relative
        title: Relative
        keywords: []
        oneliner: Returns the relative placement of this gradient.
        element: false
        details: <p>Returns the relative placement of this gradient.</p>
        example: null
        self: true
        params: []
        returns:
        - auto
        scope: []
      - path:
        - gradient
        name: angle
        title: Angle
        keywords: []
        oneliner: Returns the angle of this gradient.
        element: false
        details: <p>Returns the angle of this gradient.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - angle
        scope: []
      - path:
        - gradient
        name: sample
        title: Sample
        keywords: []
        oneliner: Sample the gradient at a given position.
        element: false
        details: |-
          <p>Sample the gradient at a given position.</p>
          <p>The position is either a position along the gradient (a <a href="/docs/reference/layout/ratio/">ratio</a>
          between <code><span class="typ-num">0%</span></code> and <code><span class="typ-num">100%</span></code>) or an <a href="/docs/reference/layout/angle/">angle</a>. Any value outside
          of this range will be clamped.</p>
        example: null
        self: true
        params:
        - name: t
          details: <p>The position at which to sample the gradient.</p>
          example: null
          types:
          - angle
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - color
        scope: []
      - path:
        - gradient
        name: samples
        title: Samples
        keywords: []
        oneliner: Samples the gradient at multiple positions at once and returns the
        element: false
        details: |-
          <p>Samples the gradient at multiple positions at once and returns the
          results as an array.</p>
        example: null
        self: true
        params:
        - name: ts
          details: <p>The positions at which to sample the gradient.</p>
          example: null
          types:
          - angle
          - ratio
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: true
          settable: false
        returns:
        - array
        scope: []
  children: []
- route: /docs/reference/visualize/image/
  title: Image
  description: '`image` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
    - id: parameters-format
      name: format
      children: []
    - id: parameters-width
      name: width
      children: []
    - id: parameters-height
      name: height
      children: []
    - id: parameters-alt
      name: alt
      children: []
    - id: parameters-fit
      name: fit
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-decode
      name: Decode Image
      children:
      - id: definitions-decode-data
        name: data
        children: []
      - id: definitions-decode-format
        name: format
        children: []
      - id: definitions-decode-width
        name: width
        children: []
      - id: definitions-decode-height
        name: height
        children: []
      - id: definitions-decode-alt
        name: alt
        children: []
      - id: definitions-decode-fit
        name: fit
        children: []
  body:
    kind: func
    content:
      path: []
      name: image
      title: Image
      keywords: []
      oneliner: A raster or vector graphic.
      element: true
      details: |-
        <p>A raster or vector graphic.</p>
        <p>Supported formats are PNG, JPEG, GIF and SVG.</p>
        <p><em>Note:</em> Work on SVG export is ongoing and there might be visual inaccuracies
        in the resulting PDF. Make sure to double-check embedded SVG images. If you
        have an issue, also feel free to report it on <a href="https://github.com/typst/typst/issues?q=is%3Aopen+is%3Aissue+label%3Asvg">GitHub</a>.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">figure</span><span class="typ-punct">(</span>
          <span class="typ-func">image</span><span class="typ-punct">(</span><span class="typ-str">&quot;molecular.jpg&quot;</span><span class="typ-punct">,</span> width<span class="typ-punct">:</span> <span class="typ-num">80%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          caption<span class="typ-punct">:</span> <span class="typ-punct">[</span>
            A step in the molecular testing
            pipeline of our lab.
          <span class="typ-punct">]</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/ac64d806f2439f6419cb46c1f5f96b21.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to an image file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: format
        details: <p>The image's format. Detected automatically by default.</p>
        example: null
        types:
        - auto
        - str
        strings:
        - string: png
          details: <p>Raster format for illustrations and transparent graphics.</p>
        - string: jpg
          details: <p>Lossy raster format suitable for photos.</p>
        - string: gif
          details: <p>Raster format that is typically used for short animated clips.</p>
        - string: svg
          details: <p>The vector graphics format of the web.</p>
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: width
        details: <p>The width of the image.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: height
        details: <p>The height of the image.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: alt
        details: <p>A text describing the image.</p>
        example: null
        types:
        - none
        - str
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fit
        details: <p>How the image should adjust itself to a given area.</p>
        example: null
        types:
        - str
        strings:
        - string: cover
          details: <p>The image should completely cover the area. This is the default.</p>
        - string: contain
          details: <p>The image should be fully contained in the area.</p>
        - string: stretch
          details: |-
            <p>The image should be stretched so that it exactly fills the area, even if
            this means that the image will be distorted.</p>
        default: <code><span class="typ-str">&quot;cover&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope:
      - path:
        - image
        name: decode
        title: Decode Image
        keywords: []
        oneliner: Decode a raster or vector graphic from bytes or a string.
        element: false
        details: <p>Decode a raster or vector graphic from bytes or a string.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> original <span class="typ-op">=</span> <span class="typ-func">read</span><span class="typ-punct">(</span><span class="typ-str">&quot;diagram.svg&quot;</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">let</span> changed <span class="typ-op">=</span> original<span class="typ-punct">.</span><span class="typ-func">replace</span><span class="typ-punct">(</span>
            <span class="typ-str">&quot;#2B80FF&quot;</span><span class="typ-punct">,</span> <span class="typ-comment">// blue</span>
            green<span class="typ-punct">.</span><span class="typ-func">to-hex</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>

          <span class="typ-pol">#</span><span class="typ-pol">image</span><span class="typ-punct">.</span><span class="typ-func">decode</span><span class="typ-punct">(</span>original<span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">image</span><span class="typ-punct">.</span><span class="typ-func">decode</span><span class="typ-punct">(</span>changed<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/185bf980aa28e5621bd9166f52553b59.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: data
          details: <p>The data to decode as an image. Can be a string for SVGs.</p>
          example: null
          types:
          - str
          - bytes
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: format
          details: <p>The image's format. Detected automatically by default.</p>
          example: null
          types:
          - auto
          - str
          strings:
          - string: png
            details: <p>Raster format for illustrations and transparent graphics.</p>
          - string: jpg
            details: <p>Lossy raster format suitable for photos.</p>
          - string: gif
            details: <p>Raster format that is typically used for short animated clips.</p>
          - string: svg
            details: <p>The vector graphics format of the web.</p>
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: width
          details: <p>The width of the image.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: height
          details: <p>The height of the image.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: alt
          details: <p>A text describing the image.</p>
          example: null
          types:
          - none
          - str
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: fit
          details: <p>How the image should adjust itself to a given area.</p>
          example: null
          types:
          - str
          strings:
          - string: cover
            details: <p>The image should completely cover the area. This is the default.</p>
          - string: contain
            details: <p>The image should be fully contained in the area.</p>
          - string: stretch
            details: |-
              <p>The image should be stretched so that it exactly fills the area, even if
              this means that the image will be distorted.</p>
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/visualize/line/
  title: Line
  description: '`line` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-start
      name: start
      children: []
    - id: parameters-end
      name: end
      children: []
    - id: parameters-length
      name: length
      children: []
    - id: parameters-angle
      name: angle
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
  body:
    kind: func
    content:
      path: []
      name: line
      title: Line
      keywords: []
      oneliner: A line from one point to another.
      element: true
      details: |-
        <p>A line from one point to another.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>height<span class="typ-punct">:</span> <span class="typ-num">100pt</span><span class="typ-punct">)</span>

        <span class="typ-func">#</span><span class="typ-func">line</span><span class="typ-punct">(</span>length<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">line</span><span class="typ-punct">(</span>end<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">50%</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">line</span><span class="typ-punct">(</span>
          length<span class="typ-punct">:</span> <span class="typ-num">4cm</span><span class="typ-punct">,</span>
          stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> maroon<span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/7a8b3f8d9e7407a8f77206fffbe004ed.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: start
        details: |-
          <p>The start point of the line.</p>
          <p>Must be an array of exactly two relative lengths.</p>
        example: null
        types:
        - array
        strings: []
        default: <code><span class="typ-punct">(</span><span class="typ-num">0pt</span><span
          class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: end
        details: <p>The offset from <code>start</code> where the line ends.</p>
        example: null
        types:
        - none
        - array
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: length
        details: <p>The line's length. This is only respected if <code>end</code>
          is <code>none</code>.</p>
        example: null
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">30pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: angle
        details: |-
          <p>The angle at which the line points away from the origin. This is only
          respected if <code>end</code> is <code>none</code>.</p>
        example: null
        types:
        - angle
        strings: []
        default: <code><span class="typ-num">0deg</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a>
          the line.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">line</span><span class="typ-punct">(</span>length<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
            spacing<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span>
            <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> red<span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>paint<span class="typ-punct">:</span> blue<span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span> cap<span class="typ-punct">:</span> <span class="typ-str">&quot;round&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>paint<span class="typ-punct">:</span> blue<span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">,</span> dash<span class="typ-punct">:</span> <span class="typ-str">&quot;dashed&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>paint<span class="typ-punct">:</span> blue<span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">,</span> dash<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-str">&quot;dot&quot;</span><span class="typ-punct">,</span> <span class="typ-num">2pt</span><span class="typ-punct">,</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span> <span class="typ-num">2pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/9303d84cfbf70b223f3db8f2afc003d2.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-num">1pt</span> <span class="typ-op">+</span>
          black</code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/visualize/path/
  title: Path
  description: '`path` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-closed
      name: closed
      children: []
    - id: parameters-vertices
      name: vertices
      children: []
  body:
    kind: func
    content:
      path: []
      name: path
      title: Path
      keywords: []
      oneliner: A path through a list of points, connected by Bezier curves.
      element: true
      details: |-
        <p>A path through a list of points, connected by Bezier curves.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">path</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> blue<span class="typ-punct">.</span><span class="typ-func">lighten</span><span class="typ-punct">(</span><span class="typ-num">80%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          stroke<span class="typ-punct">:</span> blue<span class="typ-punct">,</span>
          closed<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">,</span>
          <span class="typ-punct">(</span><span class="typ-num">0pt</span><span class="typ-punct">,</span> <span class="typ-num">50pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">(</span><span class="typ-num">100%</span><span class="typ-punct">,</span> <span class="typ-num">50pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">50%</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">40pt</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/ace845531f9ab04f113aab62df7c388b.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: fill
        details: |-
          <p>How to fill the path.</p>
          <p>When setting a fill, the default stroke disappears. To create a
          rectangle with both fill and stroke, you have to configure both.</p>
          <p>Currently all paths are filled according to the <a href="https://en.wikipedia.org/wiki/Nonzero-rule">non-zero winding
          rule</a>.</p>
        example: null
        types:
        - none
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: |-
          <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a> the path. This can be:</p>
          <p>Can be set to  <code><span class="typ-key">none</span></code> to disable the stroke or to <code><span class="typ-key">auto</span></code> for a
          stroke of <code><span class="typ-num">1pt</span></code> black if and if only if no fill is given.</p>
        example: null
        types:
        - none
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: closed
        details: |-
          <p>Whether to close this path with one last bezier curve. This curve will
          takes into account the adjacent control points. If you want to close
          with a straight line, simply add one last point that's the same as the
          start point.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: vertices
        details: |-
          <p>The vertices of the path.</p>
          <p>Each vertex can be defined in 3 ways:</p>
          <ul>
          <li>A regular point, as given to the <a href="/docs/reference/visualize/line/"><code>line</code></a> or
          <a href="/docs/reference/visualize/polygon/"><code>polygon</code></a> function.</li>
          <li>An array of two points, the first being the vertex and the second
          being the control point. The control point is expressed relative to
          the vertex and is mirrored to get the second control point. The given
          control point is the one that affects the curve coming <em>into</em> this
          vertex (even for the first point). The mirrored control point affects
          the curve going out of this vertex.</li>
          <li>An array of three points, the first being the vertex and the next
          being the control points (control point for curves coming in and out,
          respectively).</li>
          </ul>
        example: null
        types:
        - array
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/visualize/pattern/
  title: Pattern
  description: Pattern 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: examples
    name: Examples
    children: []
  - id: relativeness
    name: Relativeness
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-size
      name: size
      children: []
    - id: constructor-spacing
      name: spacing
      children: []
    - id: constructor-relative
      name: relative
      children: []
    - id: constructor-body
      name: body
      children: []
  body:
    kind: type
    content:
      name: pattern
      title: Pattern
      keywords: []
      oneliner: A repeating pattern fill.
      details: |-
        <p>A repeating pattern fill.</p>
        <p>Typst supports the most common pattern type of tiled patterns, where a
        pattern is repeated in a grid-like fashion, covering the entire area of an
        element that is filled or stroked. The pattern is defined by a tile size and
        a body defining the content of each cell. You can also add horizontal or
        vertical spacing between the cells of the patterng.</p>
        <h2 id="examples">Examples</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> pat <span class="typ-op">=</span> <span class="typ-func">pattern</span><span class="typ-punct">(</span>size<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">30pt</span><span class="typ-punct">,</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">[</span>
          <span class="typ-func">#</span><span class="typ-func">place</span><span class="typ-punct">(</span><span class="typ-func">line</span><span class="typ-punct">(</span>start<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">0%</span><span class="typ-punct">,</span> <span class="typ-num">0%</span><span class="typ-punct">)</span><span class="typ-punct">,</span> end<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">100%</span><span class="typ-punct">,</span> <span class="typ-num">100%</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">place</span><span class="typ-punct">(</span><span class="typ-func">line</span><span class="typ-punct">(</span>start<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">0%</span><span class="typ-punct">,</span> <span class="typ-num">100%</span><span class="typ-punct">)</span><span class="typ-punct">,</span> end<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">100%</span><span class="typ-punct">,</span> <span class="typ-num">0%</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-punct">]</span>

        <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> pat<span class="typ-punct">,</span> width<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span> height<span class="typ-punct">:</span> <span class="typ-num">60pt</span><span class="typ-punct">,</span> stroke<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/31b00da0a7ca87bdb01513869482280f.png" alt="Preview" width="480" height="190"/></div></div>
        <p>Patterns are also supported on text, but only when setting the
        <a href="/docs/reference/visualize/pattern/#parameters-relative">relativeness</a> to either <code><span class="typ-key">auto</span></code> (the default value) or
        <code><span class="typ-str">&quot;parent&quot;</span></code>. To create word-by-word or glyph-by-glyph patterns, you can
        wrap the words or characters of your text in <a href="/docs/reference/layout/box/">boxes</a> manually or
        through a <a href="/docs/reference/styling/#show-rules">show rule</a>.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> pat <span class="typ-op">=</span> <span class="typ-func">pattern</span><span class="typ-punct">(</span>
          size<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">30pt</span><span class="typ-punct">,</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          relative<span class="typ-punct">:</span> <span class="typ-str">&quot;parent&quot;</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>
            size<span class="typ-punct">:</span> <span class="typ-num">30pt</span><span class="typ-punct">,</span>
            fill<span class="typ-punct">:</span> gradient
              <span class="typ-punct">.</span><span class="typ-func">conic</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
        <span class="typ-punct">)</span>

        <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> pat<span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/755713c6f7355129aa98b79448d379c5.png" alt="Preview" width="480" height="190"/></div></div>
        <p>You can also space the elements further or closer apart using the
        <a href="/docs/reference/visualize/pattern/#parameters-spacing"><code>spacing</code></a> feature of the pattern. If the spacing
        is lower than the size of the pattern, the pattern will overlap.
        If it is higher, the pattern will have gaps of the same color as the
        background of the pattern.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> pat <span class="typ-op">=</span> <span class="typ-func">pattern</span><span class="typ-punct">(</span>
          size<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">30pt</span><span class="typ-punct">,</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          spacing<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> <span class="typ-num">10pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          relative<span class="typ-punct">:</span> <span class="typ-str">&quot;parent&quot;</span><span class="typ-punct">,</span>
          <span class="typ-func">square</span><span class="typ-punct">(</span>
            size<span class="typ-punct">:</span> <span class="typ-num">30pt</span><span class="typ-punct">,</span>
            fill<span class="typ-punct">:</span> gradient
             <span class="typ-punct">.</span><span class="typ-func">conic</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>
          width<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span>
          height<span class="typ-punct">:</span> <span class="typ-num">60pt</span><span class="typ-punct">,</span>
          fill<span class="typ-punct">:</span> pat<span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/1ee101eed6536bf52a5d6f0ad58569ae.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="relativeness">Relativeness</h2>
        <p>The location of the starting point of the pattern is dependent on the
        dimensions of a container. This container can either be the shape that it is
        being painted on, or the closest surrounding container. This is controlled
        by the <code>relative</code> argument of a pattern constructor. By default, patterns
        are relative to the shape they are being painted on, unless the pattern is
        applied on text, in which case they are relative to the closest ancestor
        container.</p>
        <p>Typst determines the ancestor container as follows:</p>
        <ul>
        <li>For shapes that are placed at the root/top level of the document, the
        closest ancestor is the page itself.</li>
        <li>For other shapes, the ancestor is the innermost <a href="/docs/reference/layout/block/"><code>block</code></a> or
        <a href="/docs/reference/layout/box/"><code>box</code></a> that contains the shape. This includes the boxes and blocks
        that are implicitly created by show rules and elements. For example, a
        <a href="/docs/reference/layout/rotate/"><code>rotate</code></a> will not affect the parent of a gradient, but a
        <a href="/docs/reference/layout/grid/"><code>grid</code></a> will.</li>
        </ul>
      constructor:
        path: []
        name: pattern
        title: Construct
        keywords: []
        oneliner: Construct a new pattern.
        element: false
        details: <p>Construct a new pattern.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> pat <span class="typ-op">=</span> <span class="typ-func">pattern</span><span class="typ-punct">(</span>
            size<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">20pt</span><span class="typ-punct">,</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            relative<span class="typ-punct">:</span> <span class="typ-str">&quot;parent&quot;</span><span class="typ-punct">,</span>
            <span class="typ-func">place</span><span class="typ-punct">(</span>
              dx<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span>
              dy<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span>
              <span class="typ-func">rotate</span><span class="typ-punct">(</span><span class="typ-num">45deg</span><span class="typ-punct">,</span> <span class="typ-func">square</span><span class="typ-punct">(</span>
                size<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span>
                fill<span class="typ-punct">:</span> black<span class="typ-punct">,</span>
              <span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>

          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>width<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span> height<span class="typ-punct">:</span> <span class="typ-num">60pt</span><span class="typ-punct">,</span> fill<span class="typ-punct">:</span> pat<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/e7be6b2d0fa9595d1adf361c557387aa.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: size
          details: <p>The bounding box of each cell of the pattern.</p>
          example: null
          types:
          - auto
          - array
          strings: []
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: spacing
          details: <p>The spacing between cells of the pattern.</p>
          example: null
          types:
          - array
          strings: []
          default: <code><span class="typ-punct">(</span><span class="typ-num">0pt</span><span
            class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: relative
          details: |-
            <p>The <a href="#relativeness">relative placement</a> of the pattern.</p>
            <p>For an element placed at the root/top level of the document, the
            parent is the page itself. For other elements, the parent is the
            innermost block, box, column, grid, or stack that contains the
            element.</p>
          example: null
          types:
          - auto
          - str
          strings:
          - string: self
            details: <p>The gradient is relative to itself (its own bounding box).</p>
          - string: parent
            details: <p>The gradient is relative to its parent (the parent's bounding
              box).</p>
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: body
          details: <p>The content of each cell of the pattern.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - pattern
        scope: []
      scope: []
  children: []
- route: /docs/reference/visualize/polygon/
  title: Polygon
  description: '`polygon` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-vertices
      name: vertices
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-regular
      name: Regular Polygon
      children:
      - id: definitions-regular-fill
        name: fill
        children: []
      - id: definitions-regular-stroke
        name: stroke
        children: []
      - id: definitions-regular-size
        name: size
        children: []
      - id: definitions-regular-vertices
        name: vertices
        children: []
  body:
    kind: func
    content:
      path: []
      name: polygon
      title: Polygon
      keywords: []
      oneliner: A closed polygon.
      element: true
      details: |-
        <p>A closed polygon.</p>
        <p>The polygon is defined by its corner points and is closed automatically.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">polygon</span><span class="typ-punct">(</span>
          fill<span class="typ-punct">:</span> blue<span class="typ-punct">.</span><span class="typ-func">lighten</span><span class="typ-punct">(</span><span class="typ-num">80%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          stroke<span class="typ-punct">:</span> blue<span class="typ-punct">,</span>
          <span class="typ-punct">(</span><span class="typ-num">20%</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">(</span><span class="typ-num">60%</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">(</span><span class="typ-num">80%</span><span class="typ-punct">,</span> <span class="typ-num">2cm</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">(</span><span class="typ-num">0%</span><span class="typ-punct">,</span>  <span class="typ-num">2cm</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/618fcd0eb37798e3e569975f5f6a176b.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: fill
        details: |-
          <p>How to fill the polygon.</p>
          <p>When setting a fill, the default stroke disappears. To create a
          rectangle with both fill and stroke, you have to configure both.</p>
          <p>Currently all polygons are filled according to the
          <a href="https://en.wikipedia.org/wiki/Nonzero-rule">non-zero winding rule</a>.</p>
        example: null
        types:
        - none
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: |-
          <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a> the polygon. This can be:</p>
          <p>Can be set to  <code><span class="typ-key">none</span></code> to disable the stroke or to <code><span class="typ-key">auto</span></code> for a
          stroke of <code><span class="typ-num">1pt</span></code> black if and if only if no fill is given.</p>
        example: null
        types:
        - none
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: vertices
        details: |-
          <p>The vertices of the polygon. Each point is specified as an array of two
          <a href="/docs/reference/layout/relative/">relative lengths</a>.</p>
        example: null
        types:
        - array
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - content
      scope:
      - path:
        - polygon
        name: regular
        title: Regular Polygon
        keywords: []
        oneliner: A regular polygon, defined by its size and number of vertices.
        element: false
        details: <p>A regular polygon, defined by its size and number of vertices.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-pol">#</span><span class="typ-pol">polygon</span><span class="typ-punct">.</span><span class="typ-func">regular</span><span class="typ-punct">(</span>
            fill<span class="typ-punct">:</span> blue<span class="typ-punct">.</span><span class="typ-func">lighten</span><span class="typ-punct">(</span><span class="typ-num">80%</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            stroke<span class="typ-punct">:</span> blue<span class="typ-punct">,</span>
            size<span class="typ-punct">:</span> <span class="typ-num">30pt</span><span class="typ-punct">,</span>
            vertices<span class="typ-punct">:</span> <span class="typ-num">3</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/96218865331b77e5de0ce4c3a5bf7842.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: fill
          details: |-
            <p>How to fill the polygon. See the general
            <a href="/docs/reference/visualize/polygon/#parameters-fill">polygon's documentation</a> for more details.</p>
          example: null
          types:
          - none
          - color
          - gradient
          - pattern
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: stroke
          details: |-
            <p>How to stroke the polygon. See the general
            <a href="/docs/reference/visualize/polygon/#parameters-stroke">polygon's documentation</a> for more details.</p>
          example: null
          types:
          - none
          - auto
          - length
          - color
          - gradient
          - stroke
          - pattern
          - dictionary
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: size
          details: |-
            <p>The diameter of the <a href="https://en.wikipedia.org/wiki/Circumcircle">circumcircle</a>
            of the regular polygon.</p>
          example: null
          types:
          - length
          strings: []
          default: <code><span class="typ-num">1em</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: vertices
          details: <p>The number of vertices in the polygon.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">3</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/visualize/rect/
  title: Rectangle
  description: '`rect` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-width
      name: width
      children: []
    - id: parameters-height
      name: height
      children: []
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-radius
      name: radius
      children: []
    - id: parameters-inset
      name: inset
      children: []
    - id: parameters-outset
      name: outset
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: rect
      title: Rectangle
      keywords: []
      oneliner: A rectangle with optional content.
      element: true
      details: |-
        <p>A rectangle with optional content.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-comment">// Without content.</span>
        <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>width<span class="typ-punct">:</span> <span class="typ-num">35%</span><span class="typ-punct">,</span> height<span class="typ-punct">:</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span>

        <span class="typ-comment">// With content.</span>
        <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">[</span>
          Automatically sized <span class="typ-escape">\</span>
          to fit the content.
        <span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/4a86cfbd13c58784b86f6b8511d05eee.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: width
        details: <p>The rectangle's width, relative to its parent container.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: height
        details: <p>The rectangle's height, relative to its parent container.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fill
        details: |-
          <p>How to fill the rectangle.</p>
          <p>When setting a fill, the default stroke disappears. To create a
          rectangle with both fill and stroke, you have to configure both.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>fill<span class="typ-punct">:</span> blue<span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/5c2925fdd2384537d4a253052ea8f30c.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: |-
          <p>How to stroke the rectangle. This can be:</p>
          <ul>
          <li><code><span class="typ-key">none</span></code> to disable stroking</li>
          <li><code><span class="typ-key">auto</span></code> for a stroke of <code><span class="typ-num">1pt</span> <span class="typ-op">+</span> black</code> if and if only if no fill is
          given.</li>
          <li>Any kind of <a href="/docs/reference/visualize/stroke/">stroke</a></li>
          <li>A dictionary describing the stroke for each side inidvidually. The
          dictionary can contain the following keys in order of precedence:
          <ul>
          <li><code>top</code>: The top stroke.</li>
          <li><code>right</code>: The right stroke.</li>
          <li><code>bottom</code>: The bottom stroke.</li>
          <li><code>left</code>: The left stroke.</li>
          <li><code>x</code>: The horizontal stroke.</li>
          <li><code>y</code>: The vertical stroke.</li>
          <li><code>rest</code>: The stroke on all sides except those for which the
          dictionary explicitly sets a size.</li>
          </ul>
          </li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
            dir<span class="typ-punct">:</span> ltr<span class="typ-punct">,</span>
            spacing<span class="typ-punct">:</span> <span class="typ-num">1fr</span><span class="typ-punct">,</span>
            <span class="typ-func">rect</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> red<span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">rect</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-func">rect</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> red<span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/f3dbe7392dc36e82f2577d24d9989ff4.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: radius
        details: |-
          <p>How much to round the rectangle's corners, relative to the minimum of
          the width and height divided by two. This can be:</p>
          <ul>
          <li>A relative length for a uniform corner radius.</li>
          <li>A dictionary: With a dictionary, the stroke for each side can be set
          individually. The dictionary can contain the following keys in order
          of precedence:
          <ul>
          <li><code>top-left</code>: The top-left corner radius.</li>
          <li><code>top-right</code>: The top-right corner radius.</li>
          <li><code>bottom-right</code>: The bottom-right corner radius.</li>
          <li><code>bottom-left</code>: The bottom-left corner radius.</li>
          <li><code>left</code>: The top-left and bottom-left corner radii.</li>
          <li><code>top</code>: The top-left and top-right corner radii.</li>
          <li><code>right</code>: The top-right and bottom-right corner radii.</li>
          <li><code>bottom</code>: The bottom-left and bottom-right corner radii.</li>
          <li><code>rest</code>: The radii for all corners except those for which the
          dictionary explicitly sets a size.</li>
          </ul>
          </li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">rect</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">rect</span><span class="typ-punct">(</span>
            radius<span class="typ-punct">:</span> <span class="typ-punct">(</span>
              left<span class="typ-punct">:</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span>
              top-right<span class="typ-punct">:</span> <span class="typ-num">20pt</span><span class="typ-punct">,</span>
              bottom-right<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">,</span>
            stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>
              left<span class="typ-punct">:</span> red<span class="typ-punct">,</span>
              top<span class="typ-punct">:</span> yellow<span class="typ-punct">,</span>
              right<span class="typ-punct">:</span> green<span class="typ-punct">,</span>
              bottom<span class="typ-punct">:</span> blue<span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/847a9bfaa5533d94e5893bbb5ed30ec6.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: inset
        details: |-
          <p>How much to pad the rectangle's content.
          See the <a href="/docs/reference/layout/box/#parameters-outset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">5pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: outset
        details: |-
          <p>How much to expand the rectangle's size without affecting the layout.
          See the <a href="/docs/reference/layout/box/#parameters-outset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: |-
          <p>The content to place into the rectangle.</p>
          <p>When this is omitted, the rectangle takes on a default size of at most
          <code><span class="typ-num">45pt</span></code> by <code><span class="typ-num">30pt</span></code>.</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/visualize/square/
  title: Square
  description: '`square` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-size
      name: size
      children: []
    - id: parameters-width
      name: width
      children: []
    - id: parameters-height
      name: height
      children: []
    - id: parameters-fill
      name: fill
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
    - id: parameters-radius
      name: radius
      children: []
    - id: parameters-inset
      name: inset
      children: []
    - id: parameters-outset
      name: outset
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path: []
      name: square
      title: Square
      keywords: []
      oneliner: A square with optional content.
      element: true
      details: |-
        <p>A square with optional content.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-comment">// Without content.</span>
        <span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">(</span>size<span class="typ-punct">:</span> <span class="typ-num">40pt</span><span class="typ-punct">)</span>

        <span class="typ-comment">// With content.</span>
        <span class="typ-func">#</span><span class="typ-func">square</span><span class="typ-punct">[</span>
          Automatically <span class="typ-escape">\</span>
          sized to fit.
        <span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/dc68688428bb7fa89333c479dcc45a18.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: size
        details: |-
          <p>The square's side length. This is mutually exclusive with <code>width</code> and
          <code>height</code>.</p>
        example: null
        types:
        - auto
        - length
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: width
        details: |-
          <p>The square's width. This is mutually exclusive with <code>size</code> and <code>height</code>.</p>
          <p>In contrast to <code>size</code>, this can be relative to the parent container's
          width.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: height
        details: |-
          <p>The square's height. This is mutually exclusive with <code>size</code> and <code>width</code>.</p>
          <p>In contrast to <code>size</code>, this can be relative to the parent container's
          height.</p>
        example: null
        types:
        - auto
        - relative
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: fill
        details: |-
          <p>How to fill the square. See the <a href="/docs/reference/visualize/rect/#parameters-fill">rectangle's documentation</a>
          for more details.</p>
        example: null
        types:
        - none
        - color
        - gradient
        - pattern
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: |-
          <p>How to stroke the square. See the
          <a href="/docs/reference/visualize/rect/#parameters-stroke">rectangle's documentation</a> for more details.</p>
        example: null
        types:
        - none
        - auto
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: radius
        details: |-
          <p>How much to round the square's corners. See the
          <a href="/docs/reference/visualize/rect/#parameters-radius">rectangle's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: inset
        details: |-
          <p>How much to pad the square's content. See the
          <a href="/docs/reference/layout/box/#parameters-inset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">5pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: outset
        details: |-
          <p>How much to expand the square's size without affecting the layout. See
          the <a href="/docs/reference/layout/box/#parameters-outset">box's documentation</a> for more details.</p>
        example: null
        types:
        - relative
        - dictionary
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: |-
          <p>The content to place into the square. The square expands to fit this
          content, keeping the 1-1 aspect ratio.</p>
          <p>When this is omitted, the square takes on a default size of at most
          <code><span class="typ-num">30pt</span></code>.</p>
        example: null
        types:
        - none
        - content
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: true
        named: false
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/visualize/stroke/
  title: Stroke
  description: Stroke 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: simple-strokes
    name: Simple Strokes
    children: []
  - id: fields
    name: Fields
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-paint
      name: paint
      children: []
    - id: constructor-thickness
      name: thickness
      children: []
    - id: constructor-cap
      name: cap
      children: []
    - id: constructor-join
      name: join
      children: []
    - id: constructor-dash
      name: dash
      children: []
    - id: constructor-miter-limit
      name: miter-limit
      children: []
  body:
    kind: type
    content:
      name: stroke
      title: Stroke
      keywords: []
      oneliner: Defines how to draw a line.
      details: |-
        <p>Defines how to draw a line.</p>
        <p>A stroke has a <em>paint</em> (a solid color or gradient), a <em>thickness,</em> a line
        <em>cap,</em> a line <em>join,</em> a <em>miter limit,</em> and a <em>dash</em> pattern. All of these
        values are optional and have sensible defaults.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">line</span><span class="typ-punct">(</span>length<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
          spacing<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span>
          <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> red<span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>paint<span class="typ-punct">:</span> blue<span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">4pt</span><span class="typ-punct">,</span> cap<span class="typ-punct">:</span> <span class="typ-str">&quot;round&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>paint<span class="typ-punct">:</span> blue<span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">,</span> dash<span class="typ-punct">:</span> <span class="typ-str">&quot;dashed&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> gradient<span class="typ-punct">.</span><span class="typ-func">linear</span><span class="typ-punct">(</span><span class="typ-op">..</span>color<span class="typ-punct">.</span>map<span class="typ-punct">.</span>rainbow<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/73223e6efb52c28cfad75203da95d424.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="simple-strokes">Simple strokes</h2>
        <p>You can create a simple solid stroke from a color, a thickness, or a
        combination of the two. Specifically, wherever a stroke is expected you can
        pass any of the following values:</p>
        <ul>
        <li>A length specifying the stroke's thickness. The color is inherited,
        defaulting to black.</li>
        <li>A color to use for the stroke. The thickness is inherited, defaulting to
        <code><span class="typ-num">1pt</span></code>.</li>
        <li>A stroke combined from color and thickness using the <code>+</code> operator as in
        <code><span class="typ-num">2pt</span> <span class="typ-op">+</span> red</code>.</li>
        </ul>
        <p>For full control, you can also provide a <a href="/docs/reference/foundations/dictionary/">dictionary</a> or a
        <code>stroke</code> object to any function that expects a stroke. The dictionary's
        keys may include any of the parameters for the constructor function, shown
        below.</p>
        <h2 id="fields">Fields</h2>
        <p>On a stroke object, you can access any of the fields listed in the
        constructor function. For example, <code><span class="typ-punct">(</span><span class="typ-num">2pt</span> <span class="typ-op">+</span> blue<span class="typ-punct">)</span><span class="typ-punct">.</span>thickness</code> is <code><span class="typ-num">2pt</span></code>.
        Meanwhile, <code><span class="typ-func">stroke</span><span class="typ-punct">(</span>red<span class="typ-punct">)</span><span class="typ-punct">.</span>cap</code> is <code><span class="typ-key">auto</span></code> because it's unspecified. Fields
        set to <code><span class="typ-key">auto</span></code> are inherited.</p>
      constructor:
        path: []
        name: stroke
        title: Construct
        keywords: []
        oneliner: Converts a value to a stroke or constructs a stroke with the given
        element: false
        details: |-
          <p>Converts a value to a stroke or constructs a stroke with the given
          parameters.</p>
          <p>Note that in most cases you do not need to convert values to strokes in
          order to use them, as they will be converted automatically. However,
          this constructor can be useful to ensure a value has all the fields of a
          stroke.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">my-func</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
              x <span class="typ-op">=</span> <span class="typ-func">stroke</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span> <span class="typ-comment">// Convert to a stroke</span>
              <span class="typ-punct">[</span>Stroke has thickness <span class="typ-pol">#</span><span class="typ-pol">x</span><span class="typ-punct">.</span><span class="typ-pol">thickness</span>.<span class="typ-punct">]</span>
          <span class="typ-punct">}</span>
          <span class="typ-func">#</span><span class="typ-func">my-func</span><span class="typ-punct">(</span><span class="typ-num">3pt</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">my-func</span><span class="typ-punct">(</span>red<span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">my-func</span><span class="typ-punct">(</span><span class="typ-func">stroke</span><span class="typ-punct">(</span>cap<span class="typ-punct">:</span> <span class="typ-str">&quot;round&quot;</span><span class="typ-punct">,</span> thickness<span class="typ-punct">:</span> <span class="typ-num">1pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          </code></pre><div class="preview"><img src="/assets/docs/fbd83b6032a4b0d5b75b67d7e69ffbbe.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: paint
          details: |-
            <p>The color or gradient to use for the stroke.</p>
            <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code>black</code>.</p>
          example: null
          types:
          - auto
          - color
          - gradient
          - pattern
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: thickness
          details: |-
            <p>The stroke's thickness.</p>
            <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-num">1pt</span></code>.</p>
          example: null
          types:
          - auto
          - length
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: cap
          details: |-
            <p>How the ends of the stroke are rendered.</p>
            <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-str">&quot;butt&quot;</span></code>.</p>
          example: null
          types:
          - auto
          - str
          strings:
          - string: butt
            details: <p>Square stroke cap with the edge at the stroke's end point.</p>
          - string: round
            details: <p>Circular stroke cap centered at the stroke's end point.</p>
          - string: square
            details: <p>Square stroke cap centered at the stroke's end point.</p>
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: join
          details: |-
            <p>How sharp turns are rendered.</p>
            <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-str">&quot;miter&quot;</span></code>.</p>
          example: null
          types:
          - auto
          - str
          strings:
          - string: miter
            details: |-
              <p>Segments are joined with sharp edges. Sharp bends exceeding the miter
              limit are bevelled instead.</p>
          - string: round
            details: <p>Segments are joined with circular corners.</p>
          - string: bevel
            details: |-
              <p>Segments are joined with a bevel (a straight edge connecting the butts
              of the joined segments).</p>
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: dash
          details: |-
            <p>The dash pattern to use. This can be:</p>
            <ul>
            <li>One of the predefined patterns:
            <ul>
            <li><code><span class="typ-str">&quot;solid&quot;</span></code> or <code><span class="typ-key">none</span></code></li>
            <li><code><span class="typ-str">&quot;dotted&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;densely-dotted&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;loosely-dotted&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;dashed&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;densely-dashed&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;loosely-dashed&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;dash-dotted&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;densely-dash-dotted&quot;</span></code></li>
            <li><code><span class="typ-str">&quot;loosely-dash-dotted&quot;</span></code></li>
            </ul>
            </li>
            <li>An <a href="/docs/reference/foundations/array/">array</a> with alternating lengths for dashes and gaps. You can
            also use the string <code><span class="typ-str">&quot;dot&quot;</span></code> for a length equal to the line thickness.</li>
            <li>A <a href="/docs/reference/foundations/dictionary/">dictionary</a> with the keys <code>array</code> (same as the array
            above), and <code>phase</code> (of type <a href="/docs/reference/layout/length/">length</a>), which defines where in
            the pattern to start drawing.</li>
            </ul>
            <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-key">none</span></code>.</p>
          example: |-
            <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">line</span><span class="typ-punct">(</span>length<span class="typ-punct">:</span> <span class="typ-num">100%</span><span class="typ-punct">,</span> stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span><span class="typ-punct">)</span>
            <span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
              spacing<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">,</span>
              <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>dash<span class="typ-punct">:</span> <span class="typ-str">&quot;dashed&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
              <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>dash<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span> <span class="typ-str">&quot;dot&quot;</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
              <span class="typ-func">line</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>dash<span class="typ-punct">:</span> <span class="typ-punct">(</span>array<span class="typ-punct">:</span> <span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">,</span> <span class="typ-str">&quot;dot&quot;</span><span class="typ-punct">,</span> <span class="typ-num">5pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> phase<span class="typ-punct">:</span> <span class="typ-num">10pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span>
            </code></pre><div class="preview"><img src="/assets/docs/def6f361a9aeba8c6967b661f1974a29.png" alt="Preview" width="480" height="190"/></div></div>
          types:
          - none
          - auto
          - str
          - array
          - dictionary
          strings:
          - string: solid
            details: ''
          - string: dotted
            details: ''
          - string: densely-dotted
            details: ''
          - string: loosely-dotted
            details: ''
          - string: dashed
            details: ''
          - string: densely-dashed
            details: ''
          - string: loosely-dashed
            details: ''
          - string: dash-dotted
            details: ''
          - string: densely-dash-dotted
            details: ''
          - string: loosely-dash-dotted
            details: ''
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: miter-limit
          details: |-
            <p>Number at which protruding sharp bends are rendered with a bevel
            instead or a miter join. The higher the number, the sharper an angle
            can be before it is bevelled. Only applicable if <code>join</code> is
            <code><span class="typ-str">&quot;miter&quot;</span></code>.</p>
            <p>Specifically, the miter limit is the maximum ratio between the
            corner's protrusion length and the stroke's thickness.</p>
            <p>If set to <code><span class="typ-key">auto</span></code>, the value is inherited, defaulting to <code><span class="typ-num">4.0</span></code>.</p>
          example: |-
            <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> points <span class="typ-op">=</span> <span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">15pt</span><span class="typ-punct">,</span> <span class="typ-num">0pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">0pt</span><span class="typ-punct">,</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">30pt</span><span class="typ-punct">,</span> <span class="typ-num">30pt</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> <span class="typ-num">20pt</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
            <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-num">6pt</span> <span class="typ-op">+</span> blue<span class="typ-punct">)</span>
            <span class="typ-func">#</span><span class="typ-func">stack</span><span class="typ-punct">(</span>
                dir<span class="typ-punct">:</span> ltr<span class="typ-punct">,</span>
                spacing<span class="typ-punct">:</span> <span class="typ-num">1cm</span><span class="typ-punct">,</span>
                <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>miter-limit<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-op">..</span>points<span class="typ-punct">)</span><span class="typ-punct">,</span>
                <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>miter-limit<span class="typ-punct">:</span> <span class="typ-num">4</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-op">..</span>points<span class="typ-punct">)</span><span class="typ-punct">,</span>
                <span class="typ-func">path</span><span class="typ-punct">(</span>stroke<span class="typ-punct">:</span> <span class="typ-punct">(</span>miter-limit<span class="typ-punct">:</span> <span class="typ-num">5</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-op">..</span>points<span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span>
            </code></pre><div class="preview"><img src="/assets/docs/eec8732f7d326e70f4c24fb50a0a74ce.png" alt="Preview" width="480" height="190"/></div></div>
          types:
          - auto
          - float
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - stroke
        scope: []
      scope: []
  children: []
