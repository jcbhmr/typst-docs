route: /docs/reference/data-loading/
title: Data Loading
description: Typst 中与 Data Loading 有关联的函数族的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: definitions
  name: Definitions
  children: []
body:
  kind: category
  content:
    name: data-loading
    title: Data Loading
    details: |-
      <p>Data loading from external files.</p>
      <p>These functions help you with loading and embedding data, for example from
      the results of an experiment.</p>
    items:
    - name: cbor
      route: /docs/reference/data-loading/cbor/
      oneliner: Reads structured data from a CBOR file.
      code: true
    - name: csv
      route: /docs/reference/data-loading/csv/
      oneliner: Reads structured data from a CSV file.
      code: true
    - name: json
      route: /docs/reference/data-loading/json/
      oneliner: Reads structured data from a JSON file.
      code: true
    - name: read
      route: /docs/reference/data-loading/read/
      oneliner: Reads plain text or data from a file.
      code: true
    - name: toml
      route: /docs/reference/data-loading/toml/
      oneliner: Reads structured data from a TOML file.
      code: true
    - name: xml
      route: /docs/reference/data-loading/xml/
      oneliner: Reads structured data from an XML file.
      code: true
    - name: yaml
      route: /docs/reference/data-loading/yaml/
      oneliner: Reads structured data from a YAML file.
      code: true
    shorthands: null
children:
- route: /docs/reference/data-loading/cbor/
  title: CBOR
  description: '`cbor` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-decode
      name: Decode CBOR
      children:
      - id: definitions-decode-data
        name: data
        children: []
    - id: definitions-encode
      name: Encode CBOR
      children:
      - id: definitions-encode-value
        name: value
        children: []
  body:
    kind: func
    content:
      path: []
      name: cbor
      title: CBOR
      keywords: []
      oneliner: Reads structured data from a CBOR file.
      element: false
      details: |-
        <p>Reads structured data from a CBOR file.</p>
        <p>The file must contain a valid CBOR serialization. Mappings will be
        converted into Typst dictionaries, and sequences will be converted into
        Typst arrays. Strings and booleans will be converted into the Typst
        equivalents, null-values (<code>null</code>, <code>~</code> or empty ``) will be converted into
        <code><span class="typ-key">none</span></code>, and numbers will be converted to floats or integers depending on
        whether they are whole numbers.</p>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to a CBOR file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope:
      - path:
        - cbor
        name: decode
        title: Decode CBOR
        keywords: []
        oneliner: Reads structured data from CBOR bytes.
        element: false
        details: <p>Reads structured data from CBOR bytes.</p>
        example: null
        self: false
        params:
        - name: data
          details: <p>cbor data.</p>
          example: null
          types:
          - bytes
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - cbor
        name: encode
        title: Encode CBOR
        keywords: []
        oneliner: Encode structured data into CBOR bytes.
        element: false
        details: <p>Encode structured data into CBOR bytes.</p>
        example: null
        self: false
        params:
        - name: value
          details: <p>Value to be encoded.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - bytes
        scope: []
  children: []
- route: /docs/reference/data-loading/csv/
  title: CSV
  description: '`csv` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
    - id: parameters-delimiter
      name: delimiter
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-decode
      name: Decode CSV
      children:
      - id: definitions-decode-data
        name: data
        children: []
      - id: definitions-decode-delimiter
        name: delimiter
        children: []
  body:
    kind: func
    content:
      path: []
      name: csv
      title: CSV
      keywords: []
      oneliner: Reads structured data from a CSV file.
      element: false
      details: |-
        <p>Reads structured data from a CSV file.</p>
        <p>The CSV file will be read and parsed into a 2-dimensional array of strings:
        Each row in the CSV file will be represented as an array of strings, and all
        rows will be collected into a single array. Header rows will not be
        stripped.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> results <span class="typ-op">=</span> <span class="typ-func">csv</span><span class="typ-punct">(</span><span class="typ-str">&quot;data.csv&quot;</span><span class="typ-punct">)</span>

        <span class="typ-func">#</span><span class="typ-func">table</span><span class="typ-punct">(</span>
          columns<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">,</span>
          <span class="typ-punct">[</span><span class="typ-strong">*Condition*</span><span class="typ-punct">]</span><span class="typ-punct">,</span> <span class="typ-punct">[</span><span class="typ-strong">*Result*</span><span class="typ-punct">]</span><span class="typ-punct">,</span>
          <span class="typ-op">..</span>results<span class="typ-punct">.</span><span class="typ-func">flatten</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/08241206dc3f3c0296d2db8f2ee545f4.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to a CSV file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: delimiter
        details: |-
          <p>The delimiter that separates columns in the CSV file.
          Must be a single ASCII character.</p>
        example: null
        types:
        - str
        strings: []
        default: <code><span class="typ-str">&quot;,&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - array
      scope:
      - path:
        - csv
        name: decode
        title: Decode CSV
        keywords: []
        oneliner: Reads structured data from a CSV string/bytes.
        element: false
        details: <p>Reads structured data from a CSV string/bytes.</p>
        example: null
        self: false
        params:
        - name: data
          details: <p>CSV data.</p>
          example: null
          types:
          - str
          - bytes
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: delimiter
          details: |-
            <p>The delimiter that separates columns in the CSV file.
            Must be a single ASCII character.</p>
          example: null
          types:
          - str
          strings: []
          default: <code><span class="typ-str">&quot;,&quot;</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - array
        scope: []
  children: []
- route: /docs/reference/data-loading/json/
  title: JSON
  description: '`json` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-decode
      name: Decode JSON
      children:
      - id: definitions-decode-data
        name: data
        children: []
    - id: definitions-encode
      name: Encode JSON
      children:
      - id: definitions-encode-value
        name: value
        children: []
      - id: definitions-encode-pretty
        name: pretty
        children: []
  body:
    kind: func
    content:
      path: []
      name: json
      title: JSON
      keywords: []
      oneliner: Reads structured data from a JSON file.
      element: false
      details: |-
        <p>Reads structured data from a JSON file.</p>
        <p>The file must contain a valid JSON object or array. JSON objects will be
        converted into Typst dictionaries, and JSON arrays will be converted into
        Typst arrays. Strings and booleans will be converted into the Typst
        equivalents, <code>null</code> will be converted into <code><span class="typ-key">none</span></code>, and numbers will be
        converted to floats or integers depending on whether they are whole numbers.</p>
        <p>The function returns a dictionary or an array, depending on the JSON file.</p>
        <p>The JSON files in the example contain objects with the keys <code>temperature</code>,
        <code>unit</code>, and <code>weather</code>.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">forecast</span><span class="typ-punct">(</span>day<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">block</span><span class="typ-punct">[</span>
          <span class="typ-func">#</span><span class="typ-func">box</span><span class="typ-punct">(</span><span class="typ-func">square</span><span class="typ-punct">(</span>
            width<span class="typ-punct">:</span> <span class="typ-num">2cm</span><span class="typ-punct">,</span>
            inset<span class="typ-punct">:</span> <span class="typ-num">8pt</span><span class="typ-punct">,</span>
            fill<span class="typ-punct">:</span> <span class="typ-key">if</span> day<span class="typ-punct">.</span>weather <span class="typ-op">==</span> <span class="typ-str">&quot;sunny&quot;</span> <span class="typ-punct">{</span>
              yellow
            <span class="typ-punct">}</span> <span class="typ-key">else</span> <span class="typ-punct">{</span>
              aqua
            <span class="typ-punct">}</span><span class="typ-punct">,</span>
            <span class="typ-func">align</span><span class="typ-punct">(</span>
              bottom <span class="typ-op">+</span> right<span class="typ-punct">,</span>
              <span class="typ-func">strong</span><span class="typ-punct">(</span>day<span class="typ-punct">.</span>weather<span class="typ-punct">)</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">#</span><span class="typ-func">h</span><span class="typ-punct">(</span><span class="typ-num">6pt</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span><span class="typ-num">22pt</span><span class="typ-punct">,</span> baseline<span class="typ-punct">:</span> <span class="typ-op">-</span><span class="typ-num">8pt</span><span class="typ-punct">)</span>
          <span class="typ-pol">#</span><span class="typ-pol">day</span><span class="typ-punct">.</span><span class="typ-pol">temperature</span> °<span class="typ-pol">#</span><span class="typ-pol">day</span><span class="typ-punct">.</span><span class="typ-pol">unit</span>
        <span class="typ-punct">]</span>

        <span class="typ-func">#</span><span class="typ-func">forecast</span><span class="typ-punct">(</span><span class="typ-func">json</span><span class="typ-punct">(</span><span class="typ-str">&quot;monday.json&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">forecast</span><span class="typ-punct">(</span><span class="typ-func">json</span><span class="typ-punct">(</span><span class="typ-str">&quot;tuesday.json&quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/4f910fc4831ce7d7e4b6e66d91f459aa.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to a JSON file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope:
      - path:
        - json
        name: decode
        title: Decode JSON
        keywords: []
        oneliner: Reads structured data from a JSON string/bytes.
        element: false
        details: <p>Reads structured data from a JSON string/bytes.</p>
        example: null
        self: false
        params:
        - name: data
          details: <p>JSON data.</p>
          example: null
          types:
          - str
          - bytes
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - json
        name: encode
        title: Encode JSON
        keywords: []
        oneliner: Encodes structured data into a JSON string.
        element: false
        details: <p>Encodes structured data into a JSON string.</p>
        example: null
        self: false
        params:
        - name: value
          details: <p>Value to be encoded.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: pretty
          details: <p>Whether to pretty print the JSON with newlines and indentation.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - str
        scope: []
  children: []
- route: /docs/reference/data-loading/read/
  title: Read
  description: '`read` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
    - id: parameters-encoding
      name: encoding
      children: []
  body:
    kind: func
    content:
      path: []
      name: read
      title: Read
      keywords: []
      oneliner: Reads plain text or data from a file.
      element: false
      details: |-
        <p>Reads plain text or data from a file.</p>
        <p>By default, the file will be read as UTF-8 and returned as a <a href="/docs/reference/foundations/str/">string</a>.</p>
        <p>If you specify <code>encoding: <span class="typ-key">none</span></code>, this returns raw <a href="/docs/reference/foundations/bytes/">bytes</a> instead.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>An example for a HTML file: <span class="typ-escape">\</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> text <span class="typ-op">=</span> <span class="typ-func">read</span><span class="typ-punct">(</span><span class="typ-str">&quot;data.html&quot;</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">raw</span><span class="typ-punct">(</span>text<span class="typ-punct">,</span> lang<span class="typ-punct">:</span> <span class="typ-str">&quot;html&quot;</span><span class="typ-punct">)</span>

        Raw bytes:
        <span class="typ-func">#</span><span class="typ-func">read</span><span class="typ-punct">(</span><span class="typ-str">&quot;tiger.jpg&quot;</span><span class="typ-punct">,</span> encoding<span class="typ-punct">:</span> <span class="typ-key">none</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/e3b17c20df842a68185ce8f383291c9b.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to a file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: encoding
        details: |-
          <p>The encoding to read the file with.</p>
          <p>If set to <code><span class="typ-key">none</span></code>, this function returns raw bytes.</p>
        example: null
        types:
        - none
        - str
        strings:
        - string: utf8
          details: <p>The Unicode UTF-8 encoding.</p>
        default: <code><span class="typ-str">&quot;utf8&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: false
      returns:
      - str
      - bytes
      scope: []
  children: []
- route: /docs/reference/data-loading/toml/
  title: TOML
  description: '`toml` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-decode
      name: Decode TOML
      children:
      - id: definitions-decode-data
        name: data
        children: []
    - id: definitions-encode
      name: Encode TOML
      children:
      - id: definitions-encode-value
        name: value
        children: []
      - id: definitions-encode-pretty
        name: pretty
        children: []
  body:
    kind: func
    content:
      path: []
      name: toml
      title: TOML
      keywords: []
      oneliner: Reads structured data from a TOML file.
      element: false
      details: |-
        <p>Reads structured data from a TOML file.</p>
        <p>The file must contain a valid TOML table. TOML tables will be converted into
        Typst dictionaries, and TOML arrays will be converted into Typst arrays.
        Strings, booleans and datetimes will be converted into the Typst equivalents
        and numbers will be converted to floats or integers depending on whether
        they are whole numbers.</p>
        <p>The TOML file in the example consists of a table with the keys <code>title</code>,
        <code>version</code>, and <code>authors</code>.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> details <span class="typ-op">=</span> <span class="typ-func">toml</span><span class="typ-punct">(</span><span class="typ-str">&quot;details.toml&quot;</span><span class="typ-punct">)</span>

        Title: <span class="typ-pol">#</span><span class="typ-pol">details</span><span class="typ-punct">.</span><span class="typ-pol">title</span> <span class="typ-escape">\</span>
        Version: <span class="typ-pol">#</span><span class="typ-pol">details</span><span class="typ-punct">.</span><span class="typ-pol">version</span> <span class="typ-escape">\</span>
        Authors: <span class="typ-punct">#</span><span class="typ-punct">(</span>details<span class="typ-punct">.</span>authors
          <span class="typ-punct">.</span><span class="typ-func">join</span><span class="typ-punct">(</span><span class="typ-str">&quot;, &quot;</span><span class="typ-punct">,</span> last<span class="typ-punct">:</span> <span class="typ-str">&quot; and &quot;</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/94bf7412649fc73ad01a82fc082678c7.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to a TOML file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope:
      - path:
        - toml
        name: decode
        title: Decode TOML
        keywords: []
        oneliner: Reads structured data from a TOML string/bytes.
        element: false
        details: <p>Reads structured data from a TOML string/bytes.</p>
        example: null
        self: false
        params:
        - name: data
          details: <p>TOML data.</p>
          example: null
          types:
          - str
          - bytes
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - toml
        name: encode
        title: Encode TOML
        keywords: []
        oneliner: Encodes structured data into a TOML string.
        element: false
        details: <p>Encodes structured data into a TOML string.</p>
        example: null
        self: false
        params:
        - name: value
          details: <p>Value to be encoded.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: pretty
          details: <p>Whether to pretty-print the resulting TOML.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - str
        scope: []
  children: []
- route: /docs/reference/data-loading/xml/
  title: XML
  description: '`xml` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-decode
      name: Decode XML
      children:
      - id: definitions-decode-data
        name: data
        children: []
  body:
    kind: func
    content:
      path: []
      name: xml
      title: XML
      keywords: []
      oneliner: Reads structured data from an XML file.
      element: false
      details: |-
        <p>Reads structured data from an XML file.</p>
        <p>The XML file is parsed into an array of dictionaries and strings. XML nodes
        can be elements or strings. Elements are represented as dictionaries with
        the the following keys:</p>
        <ul>
        <li><code>tag</code>: The name of the element as a string.</li>
        <li><code>attrs</code>: A dictionary of the element's attributes as strings.</li>
        <li><code>children</code>: An array of the element's child nodes.</li>
        </ul>
        <p>The XML file in the example contains a root <code>news</code> tag with multiple
        <code>article</code> tags. Each article has a <code>title</code>, <code>author</code>, and <code>content</code> tag. The
        <code>content</code> tag contains one or more paragraphs, which are represented as <code>p</code>
        tags.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">find-child</span><span class="typ-punct">(</span>elem<span class="typ-punct">,</span> tag<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
          elem<span class="typ-punct">.</span>children
            <span class="typ-punct">.</span><span class="typ-func">find</span><span class="typ-punct">(</span>e <span class="typ-op">=&gt;</span> <span class="typ-str">&quot;tag&quot;</span> <span class="typ-key">in</span> e <span class="typ-key">and</span> e<span class="typ-punct">.</span>tag <span class="typ-op">==</span> tag<span class="typ-punct">)</span>
        <span class="typ-punct">}</span>

        <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">article</span><span class="typ-punct">(</span>elem<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> title <span class="typ-op">=</span> <span class="typ-func">find-child</span><span class="typ-punct">(</span>elem<span class="typ-punct">,</span> <span class="typ-str">&quot;title&quot;</span><span class="typ-punct">)</span>
          <span class="typ-key">let</span> author <span class="typ-op">=</span> <span class="typ-func">find-child</span><span class="typ-punct">(</span>elem<span class="typ-punct">,</span> <span class="typ-str">&quot;author&quot;</span><span class="typ-punct">)</span>
          <span class="typ-key">let</span> pars <span class="typ-op">=</span> <span class="typ-func">find-child</span><span class="typ-punct">(</span>elem<span class="typ-punct">,</span> <span class="typ-str">&quot;content&quot;</span><span class="typ-punct">)</span>

          <span class="typ-func">heading</span><span class="typ-punct">(</span>title<span class="typ-punct">.</span>children<span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-func">text</span><span class="typ-punct">(</span><span class="typ-num">10pt</span><span class="typ-punct">,</span> weight<span class="typ-punct">:</span> <span class="typ-str">&quot;medium&quot;</span><span class="typ-punct">)</span><span class="typ-punct">[</span>
            Published by
            <span class="typ-pol">#</span><span class="typ-pol">author</span><span class="typ-punct">.</span><span class="typ-pol">children</span><span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          <span class="typ-punct">]</span>

          <span class="typ-key">for</span> p <span class="typ-key">in</span> pars<span class="typ-punct">.</span>children <span class="typ-punct">{</span>
            <span class="typ-key">if</span> <span class="typ-punct">(</span><span class="typ-func">type</span><span class="typ-punct">(</span>p<span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-str">&quot;dictionary&quot;</span><span class="typ-punct">)</span> <span class="typ-punct">{</span>
              <span class="typ-func">parbreak</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
              p<span class="typ-punct">.</span>children<span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
            <span class="typ-punct">}</span>
          <span class="typ-punct">}</span>
        <span class="typ-punct">}</span>

        <span class="typ-key">#</span><span class="typ-key">let</span> data <span class="typ-op">=</span> <span class="typ-func">xml</span><span class="typ-punct">(</span><span class="typ-str">&quot;example.xml&quot;</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">for</span> elem <span class="typ-key">in</span> data<span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span>children <span class="typ-punct">{</span>
          <span class="typ-key">if</span> <span class="typ-punct">(</span><span class="typ-func">type</span><span class="typ-punct">(</span>elem<span class="typ-punct">)</span> <span class="typ-op">==</span> <span class="typ-str">&quot;dictionary&quot;</span><span class="typ-punct">)</span> <span class="typ-punct">{</span>
            <span class="typ-func">article</span><span class="typ-punct">(</span>elem<span class="typ-punct">)</span>
          <span class="typ-punct">}</span>
        <span class="typ-punct">}</span>
        </code></pre><div class="preview"><img src="/assets/docs/2830826f0023b6f07034653acc310e67.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to an XML file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope:
      - path:
        - xml
        name: decode
        title: Decode XML
        keywords: []
        oneliner: Reads structured data from an XML string/bytes.
        element: false
        details: <p>Reads structured data from an XML string/bytes.</p>
        example: null
        self: false
        params:
        - name: data
          details: <p>XML data.</p>
          example: null
          types:
          - str
          - bytes
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
  children: []
- route: /docs/reference/data-loading/yaml/
  title: YAML
  description: '`yaml` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-path
      name: path
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-decode
      name: Decode YAML
      children:
      - id: definitions-decode-data
        name: data
        children: []
    - id: definitions-encode
      name: Encode YAML
      children:
      - id: definitions-encode-value
        name: value
        children: []
  body:
    kind: func
    content:
      path: []
      name: yaml
      title: YAML
      keywords: []
      oneliner: Reads structured data from a YAML file.
      element: false
      details: |-
        <p>Reads structured data from a YAML file.</p>
        <p>The file must contain a valid YAML object or array. YAML mappings will be
        converted into Typst dictionaries, and YAML sequences will be converted into
        Typst arrays. Strings and booleans will be converted into the Typst
        equivalents, null-values (<code>null</code>, <code>~</code> or empty ``) will be converted into
        <code><span class="typ-key">none</span></code>, and numbers will be converted to floats or integers depending on
        whether they are whole numbers. Custom YAML tags are ignored, though the
        loaded value will still be present.</p>
        <p>The YAML files in the example contain objects with authors as keys,
        each with a sequence of their own submapping with the keys
        &quot;title&quot; and &quot;published&quot;</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">bookshelf</span><span class="typ-punct">(</span>contents<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
          <span class="typ-key">for</span> <span class="typ-punct">(</span>author<span class="typ-punct">,</span> works<span class="typ-punct">)</span> <span class="typ-key">in</span> contents <span class="typ-punct">{</span>
            author
            <span class="typ-key">for</span> work <span class="typ-key">in</span> works <span class="typ-punct">[</span>
              <span class="typ-marker">-</span> <span class="typ-pol">#</span><span class="typ-pol">work</span><span class="typ-punct">.</span><span class="typ-pol">title</span> (<span class="typ-pol">#</span><span class="typ-pol">work</span><span class="typ-punct">.</span><span class="typ-pol">published</span>)
            <span class="typ-punct">]</span>
          <span class="typ-punct">}</span>
        <span class="typ-punct">}</span>

        <span class="typ-func">#</span><span class="typ-func">bookshelf</span><span class="typ-punct">(</span>
          <span class="typ-func">yaml</span><span class="typ-punct">(</span><span class="typ-str">&quot;scifi-authors.yaml&quot;</span><span class="typ-punct">)</span>
        <span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/58f52380c98c1a4c54779d0799f7ed03.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: path
        details: <p>Path to a YAML file.</p>
        example: null
        types:
        - str
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - any
      scope:
      - path:
        - yaml
        name: decode
        title: Decode YAML
        keywords: []
        oneliner: Reads structured data from a YAML string/bytes.
        element: false
        details: <p>Reads structured data from a YAML string/bytes.</p>
        example: null
        self: false
        params:
        - name: data
          details: <p>YAML data.</p>
          example: null
          types:
          - str
          - bytes
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - yaml
        name: encode
        title: Encode YAML
        keywords: []
        oneliner: Encode structured data into a YAML string.
        element: false
        details: <p>Encode structured data into a YAML string.</p>
        example: null
        self: false
        params:
        - name: value
          details: <p>Value to be encoded.</p>
          example: null
          types:
          - any
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - str
        scope: []
  children: []
