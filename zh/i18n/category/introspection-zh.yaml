route: /docs/reference/introspection/
title: 内省
description: Typst 中与内省有关联的函数族的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: definitions
  name: Definitions
  children: []
body:
  kind: category
  content:
    name: introspection
    title: 内省
    details: |-
      <p>文档部分之间的交互。</p>
      <p>这个类别是 Typst 的内省能力的所在：通过 <code>counter</code> 函数，您可以访问和操作页面、节、图表和方程计数器，或创建自定义计数器。与此同时，<code>query</code> 函数允许您在文档中搜索元素，以构建诸如图表列表或显示当前章节标题的标题等内容。</p>
    items:
    - name: counter
      route: /docs/reference/introspection/counter/
      oneliner: 对页面、元素等进行计数。
      code: true
    - name: locate
      route: /docs/reference/introspection/locate/
      oneliner: 提供对内容位置的访问。
      code: true
    - name: location
      route: /docs/reference/introspection/location/
      oneliner: 标识文档中的元素。
      code: true
    - name: metadata
      route: /docs/reference/introspection/metadata/
      oneliner: 在不产生可见内容的情况下向查询系统公开一个值。
      code: true
    - name: query
      route: /docs/reference/introspection/query/
      oneliner: 在文档中查找元素。
      code: true
    - name: state
      route: /docs/reference/introspection/state/
      oneliner: 管理文档中具有状态的部分。
      code: true
    shorthands: null
children:
- route: /docs/reference/introspection/counter/
  title: Counter
  description: Counter 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: displaying
    name: Displaying
    children: []
  - id: modifying
    name: Modifying
    children: []
  - id: how-to-step
    name: How To Step
    children: []
  - id: page-counter
    name: Page Counter
    children: []
  - id: time-travel
    name: Time Travel
    children: []
  - id: other-state
    name: Other State
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-key
      name: key
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-display
      name: Display
      children:
      - id: definitions-display-numbering
        name: numbering
        children: []
      - id: definitions-display-both
        name: both
        children: []
    - id: definitions-step
      name: Step
      children:
      - id: definitions-step-level
        name: level
        children: []
    - id: definitions-update
      name: Update
      children:
      - id: definitions-update-update
        name: update
        children: []
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-location
        name: location
        children: []
    - id: definitions-final
      name: Final
      children:
      - id: definitions-final-location
        name: location
        children: []
  body:
    kind: type
    content:
      name: counter
      title: Counter
      keywords: []
      oneliner: Counts through pages, elements, and more.
      details: |-
        <p>Counts through pages, elements, and more.</p>
        <p>With the counter function, you can access and modify counters for pages,
        headings, figures, and more. Moreover, you can define custom counters for
        other things you want to count.</p>
        <h2 id="displaying">Displaying a counter</h2>
        <p>To display the current value of the heading counter, you call the <code>counter</code>
        function with the <code>key</code> set to <code>heading</code> and then call the <code>display</code> method
        on the counter. To see any output, you also have to enable heading
        <a href="/docs/reference/model/heading/#parameters-numbering">numbering</a>.</p>
        <p>The <code>display</code> method optionally takes an argument telling it how to format
        the counter. This can be a <a href="/docs/reference/model/numbering/">numbering pattern or a function</a>.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Introduction</span>
        Some text here.

        <span class="typ-heading">= Background</span>
        The current value is:
        <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

        Or in roman numerals:
        <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-str">&quot;I&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/3c91f06c6e12011f1262a3edaf9de993.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="modifying">Modifying a counter</h2>
        <p>To modify a counter, you can use the <code>step</code> and <code>update</code> methods:</p>
        <ul>
        <li>
        <p>The <code>step</code> method increases the value of the counter by one. Because
        counters can have multiple levels (in the case of headings for sections,
        subsections, and so on), the <code>step</code> method optionally takes a <code>level</code>
        argument. If given, the counter steps at the given depth.</p>
        </li>
        <li>
        <p>The <code>update</code> method allows you to arbitrarily modify the counter. In its
        basic form, you give it an integer (or multiple for multiple levels). For
        more flexibility, you can instead also give it a function that gets the
        current value and returns a new value.</p>
        </li>
        </ul>
        <p>The heading counter is stepped before the heading is displayed, so
        <code>Analysis</code> gets the number seven even though the counter is at six after the
        second update.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Introduction</span>
        <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Background</span>
        <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">*</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Analysis</span>
        Let&#39;s skip 7.1.
        <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">2</span><span class="typ-punct">)</span>

        <span class="typ-heading">== Analysis</span>
        Still at <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>.
        </code></pre><div class="preview"><img src="/assets/docs/dc3be507febcfa78e096b4d4eb924e01.png" alt="Preview" width="480" height="190"/></div></div>
        <p>To define your own counter, call the <code>counter</code> function with a string as a
        key. This key identifies the counter globally.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>c <span class="typ-op">=&gt;</span> c <span class="typ-op">*</span> <span class="typ-num">3</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        </code></pre><div class="preview"><img src="/assets/docs/8d57dcf6f8381bff15ee2ff13bf8bc91.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="how-to-step">How to step</h2>
        <p>When you define and use a custom counter, in general, you should first step
        the counter and then display it. This way, the stepping behaviour of a
        counter can depend on the element it is stepped for. If you were writing a
        counter for, let's say, theorems, your theorem's definition would thus first
        include the counter step and only then display the counter and the theorem's
        contents.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> c <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;theorem&quot;</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">theorem</span><span class="typ-punct">(</span>it<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-func">block</span><span class="typ-punct">[</span>
          <span class="typ-pol">#</span><span class="typ-pol">c</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          <span class="typ-strong">*Theorem <span class="typ-pol">#</span><span class="typ-pol">c</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>:*</span> <span class="typ-pol">#</span><span class="typ-pol">it</span>
        <span class="typ-punct">]</span>

        <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>1 = 1<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
        <span class="typ-func">#</span><span class="typ-func">theorem</span><span class="typ-punct">[</span><span class="typ-math-delim">$</span>2 &lt; 3<span class="typ-math-delim">$</span><span class="typ-punct">]</span>
        </code></pre><div class="preview"><img src="/assets/docs/b97977cf07ea730ac9e00f19761bd36c.png" alt="Preview" width="480" height="190"/></div></div>
        <p>The rationale behind this is best explained on the example of the heading
        counter: An update to the heading counter depends on the heading's level.
        By stepping directly before the heading, we can correctly step from <code>1</code> to
        <code>1.1</code> when encountering a level 2 heading. If we were to step after the
        heading, we wouldn't know what to step to.</p>
        <p>Because counters should always be stepped before the elements they count,
        they always start at zero. This way, they are at one for the first display
        (which happens after the first step).</p>
        <h2 id="page-counter">Page counter</h2>
        <p>The page counter is special. It is automatically stepped at each pagebreak.
        But like other counters, you can also step it manually. For example, you
        could have Roman page numbers for your preface, then switch to Arabic page
        numbers for your main content and reset the page counter to one.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;(i)&quot;</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Preface</span>
        The preface is numbered with
        roman numerals.

        <span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1 / 1&quot;</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Main text</span>
        Here, the counter is reset to one.
        We also display both the current
        page and total number of pages in
        Arabic numbers.
        </code></pre><div class="preview"><img src="/assets/docs/6e042ee9b3964a4ce84bb21b9ca876e8.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="time-travel">Time travel</h2>
        <p>Counters can travel through time! You can find out the final value of the
        counter before it is reached and even determine what the value was at any
        particular location in the document.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> mine <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span><span class="typ-str">&quot;mycounter&quot;</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Values</span>
        <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> start-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span>
          <span class="typ-key">let</span> elements <span class="typ-op">=</span> <span class="typ-func">query</span><span class="typ-punct">(</span><span class="typ-label">&lt;intro&gt;</span><span class="typ-punct">,</span> loc<span class="typ-punct">)</span>
          <span class="typ-key">let</span> intro-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>
            elements<span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">location</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          <span class="typ-key">let</span> final-val <span class="typ-op">=</span> mine<span class="typ-punct">.</span><span class="typ-func">final</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span>
          <span class="typ-punct">[</span>Starts as: <span class="typ-pol">#</span><span class="typ-pol">start-val</span> <span class="typ-escape">\</span>
           Value at intro is: <span class="typ-pol">#</span><span class="typ-pol">intro-val</span> <span class="typ-escape">\</span>
           Final value is: <span class="typ-pol">#</span><span class="typ-pol">final-val</span> <span class="typ-escape">\</span> <span class="typ-punct">]</span>
        <span class="typ-punct">}</span><span class="typ-punct">)</span>

        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>n <span class="typ-op">=&gt;</span> n <span class="typ-op">+</span> <span class="typ-num">3</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Introduction</span> <span class="typ-label">&lt;intro&gt;</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">10</span><span class="typ-punct">)</span>

        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">mine</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/2bb4fadda762ecd725b12fa5c261cb7a.png" alt="Preview" width="480" height="190"/></div></div>
        <p>Let's dissect what happens in the example above:</p>
        <ul>
        <li>
        <p>We call <a href="/docs/reference/introspection/locate/"><code>locate</code></a> to get access to the current location in the
        document. We then pass this location to our counter's <code>at</code> method to get
        its value at the current location. The <code>at</code> method always returns an array
        because counters can have multiple levels. As the counter starts at zero,
        the first value is thus <code><span class="typ-punct">(</span><span class="typ-num">0</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
        </li>
        <li>
        <p>We now <a href="/docs/reference/introspection/query/"><code>query</code></a> the document for all elements with the
        <code><span class="typ-label">&lt;intro&gt;</span></code> label. The result is an array from which we extract the first
        (and only) element's <a href="/docs/reference/foundations/content/#definitions-location">location</a>. We then look up the
        value of the counter at that location. The first update to the counter
        sets it to <code><span class="typ-num">0</span> <span class="typ-op">+</span> <span class="typ-num">3</span> <span class="typ-op">=</span> <span class="typ-num">3</span></code>. At the introduction heading, the value is thus
        <code><span class="typ-punct">(</span><span class="typ-num">3</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
        </li>
        <li>
        <p>Last but not least, we call the <code>final</code> method on the counter. It tells us
        what the counter's value will be at the end of the document. We also need
        to give it a location to prove that we are inside of a <code>locate</code> call, but
        which one doesn't matter. After the heading follow two calls to <code>step()</code>,
        so the final value is <code><span class="typ-punct">(</span><span class="typ-num">5</span><span class="typ-punct">,</span><span class="typ-punct">)</span></code>.</p>
        </li>
        </ul>
        <h2 id="other-state">Other kinds of state</h2>
        <p>The <code>counter</code> type is closely related to <a href="/docs/reference/introspection/state/">state</a> type. Read its
        documentation for more details on state management in Typst and why it
        doesn't just use normal variables for counters.</p>
      constructor:
        path: []
        name: counter
        title: Construct
        keywords: []
        oneliner: Create a new counter identified by a key.
        element: false
        details: <p>Create a new counter identified by a key.</p>
        example: null
        self: false
        params:
        - name: key
          details: |-
            <p>The key that identifies this counter.</p>
            <ul>
            <li>If it is a string, creates a custom counter that is only affected
            by manual updates,</li>
            <li>If this is a <code><span class="typ-label">&lt;label&gt;</span></code>, counts through all elements with that
            label,</li>
            <li>If this is an element function or selector, counts through its
            elements,</li>
            <li>If this is the <a href="/docs/reference/layout/page/"><code>page</code></a> function, counts through pages.</li>
            </ul>
          example: null
          types:
          - str
          - label
          - selector
          - function
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - counter
        scope: []
      scope:
      - path:
        - counter
        name: display
        title: Display
        keywords: []
        oneliner: Displays the current value of the counter.
        element: false
        details: <p>Displays the current value of the counter.</p>
        example: null
        self: true
        params:
        - name: numbering
          details: |-
            <p>A <a href="/docs/reference/model/numbering/">numbering pattern or a function</a>, which specifies how
            to display the counter. If given a function, that function receives
            each number of the counter as a separate argument. If the amount of
            numbers varies, e.g. for the heading argument, you can use an
            <a href="/docs/reference/foundations/arguments/">argument sink</a>.</p>
            <p>If this is omitted, displays the counter with the numbering style
            for the counted element or with the pattern <code><span class="typ-str">&quot;1.1&quot;</span></code> if no such
            style exists.</p>
          example: null
          types:
          - none
          - str
          - function
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        - name: both
          details: |-
            <p>If enabled, displays the current and final top-level count together.
            Both can be styled through a single numbering pattern. This is used
            by the page numbering property to display the current and total
            number of pages when a pattern like <code><span class="typ-str">&quot;1 / 1&quot;</span></code> is given.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">false</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - counter
        name: step
        title: Step
        keywords: []
        oneliner: Increases the value of the counter by one.
        element: false
        details: |-
          <p>Increases the value of the counter by one.</p>
          <p>The update will be in effect at the position where the returned content
          is inserted into the document. If you don't put the output into the
          document, nothing happens! This would be the case, for example, if you
          write <code><span class="typ-key">let</span> _ <span class="typ-op">=</span> <span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">step</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code>. Counter updates are always
          applied in layout order and in that case, Typst wouldn't know when to
          step the counter.</p>
        example: null
        self: true
        params:
        - name: level
          details: <p>The depth at which to step the counter. Defaults to <code><span
            class="typ-num">1</span></code>.</p>
          example: null
          types:
          - int
          strings: []
          default: <code><span class="typ-num">1</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - counter
        name: update
        title: Update
        keywords: []
        oneliner: Updates the value of the counter.
        element: false
        details: |-
          <p>Updates the value of the counter.</p>
          <p>Just like with <code>step</code>, the update only occurs if you put the resulting
          content into the document.</p>
        example: null
        self: true
        params:
        - name: update
          details: |-
            <p>If given an integer or array of integers, sets the counter to that
            value. If given a function, that function receives the previous
            counter value (with each number as a separate argument) and has to
            return the new value (integer or array).</p>
          example: null
          types:
          - int
          - array
          - function
          - counter-update
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - counter
        name: at
        title: At
        keywords: []
        oneliner: Gets the value of the counter at the given location. Always returns
          an
        element: false
        details: |-
          <p>Gets the value of the counter at the given location. Always returns an
          array of integers, even if the counter has just one number.</p>
        example: null
        self: true
        params:
        - name: location
          details: |-
            <p>The location at which the counter value should be retrieved. A
            suitable location can be retrieved from <a href="/docs/reference/introspection/locate/"><code>locate</code></a> or
            <a href="/docs/reference/introspection/query/"><code>query</code></a>.</p>
          example: null
          types:
          - location
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - array
        scope: []
      - path:
        - counter
        name: final
        title: Final
        keywords: []
        oneliner: Gets the value of the counter at the end of the document. Always
          returns
        element: false
        details: |-
          <p>Gets the value of the counter at the end of the document. Always returns
          an array of integers, even if the counter has just one number.</p>
        example: null
        self: true
        params:
        - name: location
          details: |-
            <p>Can be an arbitrary location, as its value is irrelevant for the
            method's return value. Why is it required then? Typst has to
            evaluate parts of your code multiple times to determine all counter
            values. By only allowing this method within <a href="/docs/reference/introspection/locate/"><code>locate</code></a>
            calls, the amount of code that can depend on the method's result is
            reduced. If you could call <code>final</code> directly at the top level of a
            module, the evaluation of the whole module and its exports could
            depend on the counter's value.</p>
          example: null
          types:
          - location
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - int
        - array
        scope: []
  children: []
- route: /docs/reference/introspection/locate/
  title: Locate
  description: '`locate` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-func
      name: func
      children: []
  body:
    kind: func
    content:
      path: []
      name: locate
      title: Locate
      keywords: []
      oneliner: Provides access to the location of content.
      element: false
      details: |-
        <p>Provides access to the location of content.</p>
        <p>This is useful in combination with <a href="/docs/reference/introspection/query/">queries</a>, <a href="/docs/reference/introspection/counter/">counters</a>,
        <a href="/docs/reference/introspection/state/">state</a>, and <a href="/docs/reference/model/link/">links</a>. See their documentation for more
        details.</p>
        <div class="previewed-code"><pre><code><span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">[</span>
          My location: <span class="typ-escape">\</span>
          <span class="typ-pol">#</span><span class="typ-pol">loc</span><span class="typ-punct">.</span><span class="typ-func">position</span><span class="typ-punct">(</span><span class="typ-punct">)</span>!
        <span class="typ-punct">]</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/d5c00e53d3d78d599f64f77dee4dd799.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: func
        details: |-
          <p>A function that receives a <a href="/docs/reference/introspection/location/"><code>location</code></a>. Its return value is
          displayed in the document.</p>
          <p>This function is called once for each time the content returned by
          <code>locate</code> appears in the document. That makes it possible to generate
          content that depends on its own location in the document.</p>
        example: null
        types:
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/introspection/location/
  title: Location
  description: Location 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-page
      name: Page
      children: []
    - id: definitions-position
      name: Position
      children: []
    - id: definitions-page-numbering
      name: Page Numbering
      children: []
  body:
    kind: type
    content:
      name: location
      title: Location
      keywords: []
      oneliner: Identifies an element in the document.
      details: |-
        <p>Identifies an element in the document.</p>
        <p>A location uniquely identifies an element in the document and lets you
        access its absolute position on the pages. You can retrieve the current
        location with the <a href="/docs/reference/introspection/locate/"><code>locate</code></a> function and the location of a queried
        or shown element with the <a href="/docs/reference/foundations/content/#definitions-location"><code>location()</code></a> method on
        content.</p>
      constructor: null
      scope:
      - path:
        - location
        name: page
        title: Page
        keywords: []
        oneliner: Return the page number for this location.
        element: false
        details: |-
          <p>Return the page number for this location.</p>
          <p>Note that this does not return the value of the <a href="/docs/reference/introspection/counter/">page counter</a>
          at this location, but the true page number (starting from one).</p>
          <p>If you want to know the value of the page counter, use
          <code><span class="typ-func">counter</span><span class="typ-punct">(</span>page<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span></code> instead.</p>
        example: null
        self: true
        params: []
        returns:
        - int
        scope: []
      - path:
        - location
        name: position
        title: Position
        keywords: []
        oneliner: Return a dictionary with the page number and the x, y position for
          this
        element: false
        details: |-
          <p>Return a dictionary with the page number and the x, y position for this
          location. The page number starts at one and the coordinates are measured
          from the top-left of the page.</p>
          <p>If you only need the page number, use <code>page()</code> instead as it allows
          Typst to skip unnecessary work.</p>
        example: null
        self: true
        params: []
        returns:
        - dictionary
        scope: []
      - path:
        - location
        name: page-numbering
        title: Page Numbering
        keywords: []
        oneliner: Returns the page numbering pattern of the page at this location.
          This
        element: false
        details: |-
          <p>Returns the page numbering pattern of the page at this location. This
          can be used when displaying the page counter in order to obtain the
          local numbering. This is useful if you are building custom indices or
          outlines.</p>
          <p>If the page numbering is set to <code>none</code> at that location, this function
          returns <code>none</code>.</p>
        example: null
        self: true
        params: []
        returns:
        - none
        - str
        - function
        scope: []
  children: []
- route: /docs/reference/introspection/metadata/
  title: Metadata
  description: '`metadata` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-value
      name: value
      children: []
  body:
    kind: func
    content:
      path: []
      name: metadata
      title: Metadata
      keywords: []
      oneliner: Exposes a value to the query system without producing visible content.
      element: true
      details: |-
        <p>Exposes a value to the query system without producing visible content.</p>
        <p>This element can be retrieved with the <a href="/docs/reference/introspection/query/"><code>query</code></a> function and from
        the command with <a href="/docs/reference/meta/query/#cli-queries"><code>typst query</code></a>. Its
        purpose is to expose an arbitrary value to the introspection system. To
        identify a metadata value among others, you can attach a <a href="/docs/reference/foundations/label/"><code>label</code></a>
        to it and query for that label.</p>
        <p>The <code>metadata</code> element is especially useful for command line queries because
        it allows you to expose arbitrary values to the outside world.</p>
        <div class="previewed-code"><pre><code><span class="typ-comment">// Put metadata somewhere.</span>
        <span class="typ-func">#</span><span class="typ-func">metadata</span><span class="typ-punct">(</span><span class="typ-str">&quot;This is a note&quot;</span><span class="typ-punct">)</span> <span class="typ-label">&lt;note&gt;</span>

        <span class="typ-comment">// And find it from anywhere else.</span>
        <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-func">query</span><span class="typ-punct">(</span><span class="typ-label">&lt;note&gt;</span><span class="typ-punct">,</span> loc<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span>value
        <span class="typ-punct">}</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/b2532137a5dd32f4bfe76b7cc731e041.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: value
        details: <p>The value to embed into the document.</p>
        example: null
        types:
        - any
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/introspection/query/
  title: Query
  description: '`query` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: finding-elements
    name: Finding Elements
    children: []
  - id: caution
    name: Caution
    children: []
  - id: command-line-queries
    name: Command Line Queries
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-target
      name: target
      children: []
    - id: parameters-location
      name: location
      children: []
  body:
    kind: func
    content:
      path: []
      name: query
      title: Query
      keywords: []
      oneliner: Finds elements in the document.
      element: false
      details: |-
        <p>Finds elements in the document.</p>
        <p>The <code>query</code> functions lets you search your document for elements of a
        particular type or with a particular label. To use it, you first need to
        retrieve the current document location with the <a href="/docs/reference/introspection/locate/"><code>locate</code></a>
        function.</p>
        <h2 id="finding-elements">Finding elements</h2>
        <p>In the example below, we create a custom page header that displays the text
        &quot;Typst Academy&quot; in small capitals and the current section title. On the
        first page, the section title is omitted because the header is before the
        first section heading.</p>
        <p>To realize this layout, we call <code>locate</code> and then query for all headings
        after the current location. The function we pass to locate is called twice
        in this case: Once per page.</p>
        <ul>
        <li>
        <p>On the first page the query for all headings before the current location
        yields an empty array: There are no previous headings. We check for this
        case and and just display &quot;Typst Academy&quot;.</p>
        </li>
        <li>
        <p>For the second page, we retrieve the last element from the query's result.
        This is the latest heading before the current position and as such, it is
        the heading of the section we are currently in. We access its content
        through the <code>body</code> field and display it alongside &quot;Typst Academy&quot;.</p>
        </li>
        </ul>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">page</span><span class="typ-punct">(</span>header<span class="typ-punct">:</span> <span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> elems <span class="typ-op">=</span> <span class="typ-func">query</span><span class="typ-punct">(</span>
            <span class="typ-func">selector</span><span class="typ-punct">(</span>heading<span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">before</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span><span class="typ-punct">,</span>
            loc<span class="typ-punct">,</span>
          <span class="typ-punct">)</span>
          <span class="typ-key">let</span> academy <span class="typ-op">=</span> <span class="typ-func">smallcaps</span><span class="typ-punct">[</span>
            Typst Academy
          <span class="typ-punct">]</span>
          <span class="typ-key">if</span> elems <span class="typ-op">==</span> <span class="typ-punct">(</span><span class="typ-punct">)</span> <span class="typ-punct">{</span>
            <span class="typ-func">align</span><span class="typ-punct">(</span>right<span class="typ-punct">,</span> academy<span class="typ-punct">)</span>
          <span class="typ-punct">}</span> <span class="typ-key">else</span> <span class="typ-punct">{</span>
            <span class="typ-key">let</span> body <span class="typ-op">=</span> elems<span class="typ-punct">.</span><span class="typ-func">last</span><span class="typ-punct">(</span><span class="typ-punct">)</span><span class="typ-punct">.</span>body
            academy <span class="typ-op">+</span> <span class="typ-func">h</span><span class="typ-punct">(</span><span class="typ-num">1fr</span><span class="typ-punct">)</span> <span class="typ-op">+</span> <span class="typ-func">emph</span><span class="typ-punct">(</span>body<span class="typ-punct">)</span>
          <span class="typ-punct">}</span>
        <span class="typ-punct">}</span><span class="typ-punct">)</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Introduction</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">23</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Background</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">30</span><span class="typ-punct">)</span>

        <span class="typ-heading">= Analysis</span>
        <span class="typ-func">#</span><span class="typ-func">lorem</span><span class="typ-punct">(</span><span class="typ-num">15</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/9322e1b471f29e6f896a589b09fceaef.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="caution">A word of caution</h2>
        <p>To resolve all your queries, Typst evaluates and layouts parts of the
        document multiple times. However, there is no guarantee that your queries
        can actually be completely resolved. If you aren't careful a query can
        affect itself—leading to a result that never stabilizes.</p>
        <p>In the example below, we query for all headings in the document. We then
        generate as many headings. In the beginning, there's just one heading,
        titled <code>Real</code>. Thus, <code>count</code> is <code>1</code> and one <code>Fake</code> heading is generated.
        Typst sees that the query's result has changed and processes it again. This
        time, <code>count</code> is <code>2</code> and two <code>Fake</code> headings are generated. This goes on and
        on. As we can see, the output has five headings. This is because Typst
        simply gives up after five attempts.</p>
        <p>In general, you should try not to write queries that affect themselves. The
        same words of caution also apply to other introspection features like
        <a href="/docs/reference/introspection/counter/">counters</a> and <a href="/docs/reference/introspection/state/">state</a>.</p>
        <div class="previewed-code"><pre><code><span class="typ-heading">= Real</span>
        <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          <span class="typ-key">let</span> elems <span class="typ-op">=</span> <span class="typ-func">query</span><span class="typ-punct">(</span>heading<span class="typ-punct">,</span> loc<span class="typ-punct">)</span>
          <span class="typ-key">let</span> count <span class="typ-op">=</span> elems<span class="typ-punct">.</span><span class="typ-func">len</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
          count <span class="typ-op">*</span> <span class="typ-punct">[</span><span class="typ-heading">= Fake</span><span class="typ-punct">]</span>
        <span class="typ-punct">}</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/d50c8346f758c5e45b6800b3e9654d80.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="command-line-queries">Command line queries</h2>
        <p>You can also perform queries from the command line with the <code>typst query</code>
        command. This command executes an arbitrary query on the document and
        returns the resulting elements in serialized form. Consider the following
        <code>example.typ</code> file which contains some invisible <a href="/docs/reference/introspection/metadata/">metadata</a>:</p>
        <pre><code><span class="typ-func">#</span><span class="typ-func">metadata</span><span class="typ-punct">(</span><span class="typ-str">&quot;This is a note&quot;</span><span class="typ-punct">)</span> <span class="typ-label">&lt;note&gt;</span>
        </code></pre>
        <p>You can execute a query on it as follows using Typst's CLI:</p>
        <pre style="background-color:#ffffff;">
        <span style="color:#4b69c6;">$</span><span style="color:#000000;"> typst query example.typ </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;
        </span><span style="color:#4b69c6;">[
        </span><span style="color:#000000;">  {
        </span><span style="color:#000000;">    </span><span style="color:#298e0d;">&quot;func&quot;</span><span style="color:#4b69c6;">: </span><span style="color:#298e0d;">&quot;metadata&quot;</span><span style="color:#000000;">,
        </span><span style="color:#000000;">    </span><span style="color:#298e0d;">&quot;value&quot;</span><span style="color:#4b69c6;">: </span><span style="color:#298e0d;">&quot;This is a note&quot;</span><span style="color:#000000;">,
        </span><span style="color:#000000;">    </span><span style="color:#298e0d;">&quot;label&quot;</span><span style="color:#4b69c6;">: </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;
        </span><span style="color:#000000;">  }
        </span><span style="color:#4b69c6;">]
        </span></pre>
        <p>Frequently, you're interested in only one specific field of the resulting
        elements. In the case of the <code>metadata</code> element, the <code>value</code> field is the
        interesting one. You can extract just this field with the <code>--field</code>
        argument.</p>
        <pre style="background-color:#ffffff;">
        <span style="color:#4b69c6;">$</span><span style="color:#000000;"> typst query example.typ </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;</span><span style="color:#000000;"> --field value
        </span><span style="color:#4b69c6;">[</span><span style="color:#298e0d;">&quot;This is a note&quot;</span><span style="color:#4b69c6;">]
        </span></pre>
        <p>If you are interested in just a single element, you can use the <code>--one</code>
        flag to extract just it.</p>
        <pre style="background-color:#ffffff;">
        <span style="color:#4b69c6;">$</span><span style="color:#000000;"> typst query example.typ </span><span style="color:#298e0d;">&quot;&lt;note&gt;&quot;</span><span style="color:#000000;"> --field value --one
        </span><span style="color:#298e0d;">&quot;This is a note&quot;
        </span></pre>
      example: null
      self: false
      params:
      - name: target
        details: |-
          <p>Can be an element function like a <code>heading</code> or <code>figure</code>, a <code><span class="typ-label">&lt;label&gt;</span></code>
          or a more complex selector like <code>heading<span class="typ-punct">.</span><span class="typ-func">where</span><span class="typ-punct">(</span>level<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">)</span></code>.</p>
          <p>Currently, only a subset of element functions is supported. Aside from
          headings and figures, this includes equations, references and all
          elements with an explicit label. As a result, you <em>can</em> query for e.g.
          <a href="/docs/reference/model/strong/"><code>strong</code></a> elements, but you will find only those that have an
          explicit label attached to them. This limitation will be resolved in the
          future.</p>
        example: null
        types:
        - label
        - selector
        - function
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: location
        details: |-
          <p>Can be an arbitrary location, as its value is irrelevant for the
          function's return value. Why is it required then? As noted before, Typst
          has to evaluate parts of your code multiple times to determine the
          values of all state. By only allowing this function within
          <a href="/docs/reference/introspection/locate/"><code>locate</code></a> calls, the amount of code that can depend on the
          query's result is reduced. If you could call it directly at the top
          level of a module, the evaluation of the whole module and its exports
          could depend on the query's result.</p>
        example: null
        types:
        - location
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - array
      scope: []
  children: []
- route: /docs/reference/introspection/state/
  title: State
  description: State 类型的文档
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: state-and-markup
    name: State And Markup
    children: []
  - id: state-in-typst
    name: State In Typst
    children: []
  - id: time-travel
    name: Time Travel
    children: []
  - id: caution
    name: Caution
    children: []
  - id: constructor
    name: Constructor
    children:
    - id: constructor-key
      name: key
      children: []
    - id: constructor-init
      name: init
      children: []
  - id: definitions
    name: Definitions
    children:
    - id: definitions-display
      name: Display
      children:
      - id: definitions-display-func
        name: func
        children: []
    - id: definitions-update
      name: Update
      children:
      - id: definitions-update-update
        name: update
        children: []
    - id: definitions-at
      name: At
      children:
      - id: definitions-at-location
        name: location
        children: []
    - id: definitions-final
      name: Final
      children:
      - id: definitions-final-location
        name: location
        children: []
  body:
    kind: type
    content:
      name: state
      title: State
      keywords: []
      oneliner: Manages stateful parts of your document.
      details: |-
        <p>Manages stateful parts of your document.</p>
        <p>Let's say you have some computations in your document and want to remember
        the result of your last computation to use it in the next one. You might try
        something similar to the code below and expect it to output 10, 13, 26, and
        21. However this <strong>does not work</strong> in Typst. If you test this code, you will
        see that Typst complains with the following error message: <em>Variables from
        outside the function are read-only and cannot be modified.</em></p>
        <pre><code><span class="typ-key">#</span><span class="typ-key">let</span> x <span class="typ-op">=</span> <span class="typ-num">0</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">compute</span><span class="typ-punct">(</span>expr<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">{</span>
          x <span class="typ-op">=</span> <span class="typ-func">eval</span><span class="typ-punct">(</span>
            expr<span class="typ-punct">.</span><span class="typ-func">replace</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-func">str</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          <span class="typ-punct">[</span>New value is <span class="typ-pol">#</span><span class="typ-pol">x</span>. <span class="typ-punct">]</span>
        <span class="typ-punct">}</span>

        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
        </code></pre>
        <h2 id="state-and-markup">State and document markup</h2>
        <p>Why does it do that? Because, in general, this kind of computation with side
        effects is problematic in document markup and Typst is upfront about that.
        For the results to make sense, the computation must proceed in the same
        order in which the results will be laid out in the document. In our simple
        example, that's the case, but in general it might not be.</p>
        <p>Let's look at a slightly different, but similar kind of state: The heading
        numbering. We want to increase the heading counter at each heading. Easy
        enough, right? Just add one. Well, it's not that simple. Consider the
        following example:</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">heading</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;1.&quot;</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">template</span><span class="typ-punct">(</span>body<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">[</span>
          <span class="typ-heading">= Outline</span>
          <span class="typ-escape">...</span>
          <span class="typ-pol">#</span><span class="typ-pol">body</span>
        <span class="typ-punct">]</span>

        <span class="typ-key">#</span><span class="typ-key">show</span><span class="typ-punct">:</span> <span class="typ-func">template</span>

        <span class="typ-heading">= Introduction</span>
        <span class="typ-escape">...</span>
        </code></pre><div class="preview"><img src="/assets/docs/fdcc5211e820e822853ff14684aaf58a.png" alt="Preview" width="480" height="190"/></div></div>
        <p>Here, Typst first processes the body of the document after the show rule,
        sees the <code>Introduction</code> heading, then passes the resulting content to the
        <code>template</code> function and only then sees the <code>Outline</code>. Just counting up would
        number the <code>Introduction</code> with <code>1</code> and the <code>Outline</code> with <code>2</code>.</p>
        <h2 id="state-in-typst">Managing state in Typst</h2>
        <p>So what do we do instead? We use Typst's state management system. Calling
        the <code>state</code> function with an identifying string key and an optional initial
        value gives you a state value which exposes a few methods. The two most
        important ones are <code>display</code> and <code>update</code>:</p>
        <ul>
        <li>
        <p>The <code>display</code> method shows the current value of the state. You can
        optionally give it a function that receives the value and formats it in
        some way.</p>
        </li>
        <li>
        <p>The <code>update</code> method modifies the state. You can give it any value. If
        given a non-function value, it sets the state to that value. If given a
        function, that function receives the previous state and has to return the
        new state.</p>
        </li>
        </ul>
        <p>Our initial example would now look like this:</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> s <span class="typ-op">=</span> <span class="typ-func">state</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-num">0</span><span class="typ-punct">)</span>
        <span class="typ-key">#</span><span class="typ-key">let</span> <span class="typ-func">compute</span><span class="typ-punct">(</span>expr<span class="typ-punct">)</span> <span class="typ-op">=</span> <span class="typ-punct">[</span>
          <span class="typ-pol">#</span><span class="typ-pol">s</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>x <span class="typ-op">=&gt;</span>
            <span class="typ-func">eval</span><span class="typ-punct">(</span>expr<span class="typ-punct">.</span><span class="typ-func">replace</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-func">str</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-punct">)</span>
          New value is <span class="typ-pol">#</span><span class="typ-pol">s</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>.
        <span class="typ-punct">]</span>

        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/a7c1c35241de9094dff62614a94e7211.png" alt="Preview" width="480" height="190"/></div></div>
        <p>State managed by Typst is always updated in layout order, not in evaluation
        order. The <code>update</code> method returns content and its effect occurs at the
        position where the returned content is inserted into the document.</p>
        <p>As a result, we can now also store some of the computations in
        variables, but they still show the correct results:</p>
        <div class="previewed-code"><pre><code><span class="typ-escape">...</span>

        <span class="typ-key">#</span><span class="typ-key">let</span> more <span class="typ-op">=</span> <span class="typ-punct">[</span>
          <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
          <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
        <span class="typ-punct">]</span>

        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-pol">#</span><span class="typ-pol">more</span>
        </code></pre><div class="preview"><img src="/assets/docs/78648e95b2e8fa7877df7235f6305705.png" alt="Preview" width="480" height="190"/></div></div>
        <p>This example is of course a bit silly, but in practice this is often exactly
        what you want! A good example are heading counters, which is why Typst's
        <a href="/docs/reference/introspection/counter/">counting system</a> is very similar to its state system.</p>
        <h2 id="time-travel">Time Travel</h2>
        <p>By using Typst's state management system you also get time travel
        capabilities! By combining the state system with <a href="/docs/reference/introspection/locate/"><code>locate</code></a> and
        <a href="/docs/reference/introspection/query/"><code>query</code></a>, we can find out what the value of the state will be at
        any position in the document from anywhere else. In particular, the <code>at</code>
        method gives us the value of the state at any location and the <code>final</code>
        methods gives us the value of the state at the end of the document.</p>
        <div class="previewed-code"><pre><code><span class="typ-escape">...</span>

        Value at <span class="typ-raw">`&lt;here&gt;`</span> is
        <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> s<span class="typ-punct">.</span><span class="typ-func">at</span><span class="typ-punct">(</span>
          <span class="typ-func">query</span><span class="typ-punct">(</span><span class="typ-label">&lt;here&gt;</span><span class="typ-punct">,</span> loc<span class="typ-punct">)</span>
            <span class="typ-punct">.</span><span class="typ-func">first</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
            <span class="typ-punct">.</span><span class="typ-func">location</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        <span class="typ-punct">)</span><span class="typ-punct">)</span>

        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;10&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x + 3&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-strong">*Here.*</span> <span class="typ-label">&lt;here&gt;</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x * 2&quot;</span><span class="typ-punct">)</span> <span class="typ-escape">\</span>
        <span class="typ-func">#</span><span class="typ-func">compute</span><span class="typ-punct">(</span><span class="typ-str">&quot;x - 5&quot;</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/3c387c460c628cb0f84801a7b5368d5a.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="caution">A word of caution</h2>
        <p>To resolve the values of all states, Typst evaluates parts of your code
        multiple times. However, there is no guarantee that your state manipulation
        can actually be completely resolved.</p>
        <p>For instance, if you generate state updates depending on the final value of
        a state, the results might never converge. The example below illustrates
        this. We initialize our state with <code>1</code> and then update it to its own final
        value plus 1. So it should be <code>2</code>, but then its final value is <code>2</code>, so it
        should be <code>3</code>, and so on. This example display <code>4</code> because Typst simply
        gives up after a few attempts.</p>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> s <span class="typ-op">=</span> <span class="typ-func">state</span><span class="typ-punct">(</span><span class="typ-str">&quot;x&quot;</span><span class="typ-punct">,</span> <span class="typ-num">1</span><span class="typ-punct">)</span>
        <span class="typ-func">#</span><span class="typ-func">locate</span><span class="typ-punct">(</span>loc <span class="typ-op">=&gt;</span> <span class="typ-punct">{</span>
          s<span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span>s<span class="typ-punct">.</span><span class="typ-func">final</span><span class="typ-punct">(</span>loc<span class="typ-punct">)</span> <span class="typ-op">+</span> <span class="typ-num">1</span><span class="typ-punct">)</span>
        <span class="typ-punct">}</span><span class="typ-punct">)</span>
        <span class="typ-pol">#</span><span class="typ-pol">s</span><span class="typ-punct">.</span><span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-punct">)</span>
        </code></pre><div class="preview"><img src="/assets/docs/93c5bdb21387c960a7486dd14e0a7050.png" alt="Preview" width="480" height="190"/></div></div>
        <p>In general, you should <em>typically</em> not generate state updates from within
        <code>locate</code> calls or <code>display</code> calls of state or counters. Instead, pass a
        function to <code>update</code> that determines the value of the state based on its
        previous value.</p>
      constructor:
        path: []
        name: state
        title: Construct
        keywords: []
        oneliner: Create a new state identified by a key.
        element: false
        details: <p>Create a new state identified by a key.</p>
        example: null
        self: false
        params:
        - name: key
          details: <p>The key that identifies this state.</p>
          example: null
          types:
          - str
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: init
          details: <p>The initial value of the state.</p>
          example: null
          types:
          - any
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        returns:
        - state
        scope: []
      scope:
      - path:
        - state
        name: display
        title: Display
        keywords: []
        oneliner: Displays the current value of the state.
        element: false
        details: <p>Displays the current value of the state.</p>
        example: null
        self: true
        params:
        - name: func
          details: |-
            <p>A function which receives the value of the state and can return
            arbitrary content which is then displayed. If this is omitted, the
            value is directly displayed.</p>
          example: null
          types:
          - none
          - function
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - state
        name: update
        title: Update
        keywords: []
        oneliner: Update the value of the state.
        element: false
        details: |-
          <p>Update the value of the state.</p>
          <p>The update will be in effect at the position where the returned content
          is inserted into the document. If you don't put the output into the
          document, nothing happens! This would be the case, for example, if you
          write <code><span class="typ-key">let</span> _ <span class="typ-op">=</span> <span class="typ-func">state</span><span class="typ-punct">(</span><span class="typ-str">&quot;key&quot;</span><span class="typ-punct">)</span><span class="typ-punct">.</span><span class="typ-func">update</span><span class="typ-punct">(</span><span class="typ-num">7</span><span class="typ-punct">)</span></code>. State updates are always
          applied in layout order and in that case, Typst wouldn't know when to
          update the state.</p>
        example: null
        self: true
        params:
        - name: update
          details: |-
            <p>If given a non function-value, sets the state to that value. If
            given a function, that function receives the previous state and has
            to return the new state.</p>
          example: null
          types:
          - any
          - function
          - state-update
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - state
        name: at
        title: At
        keywords: []
        oneliner: Get the value of the state at the given location.
        element: false
        details: <p>Get the value of the state at the given location.</p>
        example: null
        self: true
        params:
        - name: location
          details: |-
            <p>The location at which the state's value should be retrieved. A
            suitable location can be retrieved from <a href="/docs/reference/introspection/locate/"><code>locate</code></a> or
            <a href="/docs/reference/introspection/query/"><code>query</code></a>.</p>
          example: null
          types:
          - location
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
      - path:
        - state
        name: final
        title: Final
        keywords: []
        oneliner: Get the value of the state at the end of the document.
        element: false
        details: <p>Get the value of the state at the end of the document.</p>
        example: null
        self: true
        params:
        - name: location
          details: |-
            <p>Can be an arbitrary location, as its value is irrelevant for the
            method's return value. Why is it required then? As noted before,
            Typst has to evaluate parts of your code multiple times to determine
            the values of all state. By only allowing this method within
            <a href="/docs/reference/introspection/locate/"><code>locate</code></a> calls, the amount of code that can depend on the
            method's result is reduced. If you could call <code>final</code> directly at
            the top level of a module, the evaluation of the whole module and
            its exports could depend on the state's value.</p>
          example: null
          types:
          - location
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - any
        scope: []
  children: []
