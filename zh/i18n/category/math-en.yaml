route: /docs/reference/math/
title: Math
description: Typst 中与 Math 有关联的函数族的文档
part: null
outline:
- id: summary
  name: Summary
  children: []
- id: variables
  name: Variables
  children: []
- id: symbols
  name: Symbols
  children: []
- id: line-breaks
  name: Line Breaks
  children: []
- id: function-calls
  name: Function Calls
  children: []
- id: alignment
  name: Alignment
  children: []
- id: math-fonts
  name: Math Fonts
  children: []
- id: math-module
  name: Math Module
  children: []
- id: definitions
  name: Definitions
  children: []
body:
  kind: category
  content:
    name: math
    title: Math
    details: |-
      <p>Typst has special <a href="/docs/reference/syntax/#math">syntax</a> and library functions to typeset
      mathematical formulas. Math formulas can be displayed inline with text or as
      separate blocks. They will be typeset into their own block if they start and
      end with at least one space (e.g. <code><span class="typ-math-delim">$</span> x<span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span></code>).</p>
      <h2 id="variables">Variables</h2>
      <p>In math, single letters are always displayed as is. Multiple letters,
      however, are interpreted as variables and functions. To display multiple
      letters verbatim, you can place them into quotes and to access single letter
      variables, you can use the <a href="/docs/reference/scripting/#expressions">hash syntax</a>.</p>
      <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> A = <span class="typ-pol">pi</span> r<span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span>
      <span class="typ-math-delim">$</span> <span class="typ-str">&quot;area&quot;</span> = <span class="typ-pol">pi</span> <span class="typ-pol">dot</span> <span class="typ-str">&quot;radius&quot;</span><span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span>
      <span class="typ-math-delim">$</span> <span class="typ-func">cal</span><span class="typ-punct">(</span>A<span class="typ-punct">)</span> <span class="typ-escape">:=</span>
          { x <span class="typ-pol">in</span> <span class="typ-pol">RR</span> | x <span class="typ-str">&quot;is natural&quot;</span> } <span class="typ-math-delim">$</span>
      <span class="typ-key">#</span><span class="typ-key">let</span> x <span class="typ-op">=</span> <span class="typ-num">5</span>
      <span class="typ-math-delim">$</span> <span class="typ-pol">#</span><span class="typ-pol">x</span> &lt; 17 <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/99ab9a9118b0d502ef5040b0a7d667c1.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="symbols">Symbols</h2>
      <p>Math mode makes a wide selection of <a href="/docs/reference/symbols/sym/">symbols</a> like
      <code>pi</code>, <code>dot</code>, or <code>RR</code> available. Many mathematical symbols are available in
      different variants. You can select between different variants by applying
      <a href="/docs/reference/symbols/symbol/">modifiers</a> to the symbol. Typst further recognizes a number of
      shorthand sequences like <code>=&gt;</code> that approximate a symbol. When such a
      shorthand exists, the symbol's documentation lists it.</p>
      <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> x &lt; y <span class="typ-escape">=&gt;</span> x <span class="typ-pol">gt</span><span class="typ-punct">.</span><span class="typ-pol">eq</span><span class="typ-punct">.</span><span class="typ-pol">not</span> y <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/4fd47496c7c8dda5da33f250f15f7fde.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="line-breaks">Line Breaks</h2>
      <p>Formulas can also contain line breaks. Each line can contain one or multiple
      <em>alignment points</em> (<code>&amp;</code>) which are then aligned.</p>
      <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>k=0<span class="typ-punct">)</span><span class="typ-math-op">^</span>n k
          <span class="typ-math-op">&amp;</span>= 1 + <span class="typ-escape">...</span> + n <span class="typ-escape">\</span>
          <span class="typ-math-op">&amp;</span>= <span class="typ-punct">(</span>n(n+1)<span class="typ-punct">)</span> <span class="typ-math-op">/</span> 2 <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/909ff8704ddbe7f5616cc6ea915a07aa.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="function-calls">Function calls</h2>
      <p>Math mode supports special function calls without the hash prefix. In these
      &quot;math calls&quot;, the argument list works a little differently than in code:</p>
      <ul>
      <li>Within them, Typst is still in &quot;math mode&quot;. Thus, you can write math
      directly into them, but need to use hash syntax to pass code expressions
      (except for strings, which are available in the math syntax).</li>
      <li>They support positional and named arguments, but don't support trailing
      content blocks and argument spreading.</li>
      <li>They provide additional syntax for 2-dimensional argument lists. The
      semicolon (<code>;</code>) merges preceding arguments separated by commas into an
      array argument.</li>
      </ul>
      <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">frac</span><span class="typ-punct">(</span>a<span class="typ-math-op">^</span>2<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
      <span class="typ-math-delim">$</span> <span class="typ-func">vec</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">,</span> delim<span class="typ-punct">:</span> <span class="typ-str">&quot;[&quot;</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
      <span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">;</span> 3<span class="typ-punct">,</span> 4<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
      <span class="typ-math-delim">$</span> <span class="typ-pol">lim</span><span class="typ-math-op">_</span>x =
          <span class="typ-func">op</span><span class="typ-punct">(</span><span class="typ-str">&quot;lim&quot;</span><span class="typ-punct">,</span> limits<span class="typ-punct">:</span> <span class="typ-key">#</span><span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-math-op">_</span>x <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/06124e14b0283641c7181ff875ad0b74.png" alt="Preview" width="480" height="190"/></div></div>
      <p>To write a verbatim comma or semicolon in a math call, escape it with a
      backslash. The colon on the other hand is only recognized in a special way
      if directly preceded by an identifier, so to display it verbatim in those
      cases, you can just insert a space before it.</p>
      <p>Functions calls preceded by a hash are normal code function calls and not
      affected by these rules.</p>
      <h2 id="alignment">Alignment</h2>
      <p>When equations include multiple <em>alignment points</em> (<code>&amp;</code>), this creates
      blocks of alternatingly right- and left-aligned columns. In the example
      below, the expression <code>(3x + y) / 7</code> is right-aligned and <code>= 9</code> is
      left-aligned. The word &quot;given&quot; is also left-aligned because <code>&amp;&amp;</code> creates two
      alignment points in a row, alternating the alignment twice. <code>&amp; &amp;</code> and <code>&amp;&amp;</code>
      behave exactly the same way. Meanwhile, &quot;multiply by 7&quot; is right-aligned
      because just one <code>&amp;</code> precedes it. Each alignment point simply alternates
      between right-aligned/left-aligned.</p>
      <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-punct">(</span>3x + y<span class="typ-punct">)</span> <span class="typ-math-op">/</span> 7 <span class="typ-math-op">&amp;</span>= 9 <span class="typ-math-op">&amp;</span><span class="typ-math-op">&amp;</span> <span class="typ-str">&quot;given&quot;</span> <span class="typ-escape">\</span>
        3x + y <span class="typ-math-op">&amp;</span>= 63 <span class="typ-math-op">&amp;</span> <span class="typ-str">&quot;multiply by 7&quot;</span> <span class="typ-escape">\</span>
        3x <span class="typ-math-op">&amp;</span>= 63 <span class="typ-escape">-</span> y <span class="typ-math-op">&amp;</span><span class="typ-math-op">&amp;</span> <span class="typ-str">&quot;subtract y&quot;</span> <span class="typ-escape">\</span>
        x <span class="typ-math-op">&amp;</span>= 21 <span class="typ-escape">-</span> y<span class="typ-math-op">/</span>3 <span class="typ-math-op">&amp;</span> <span class="typ-str">&quot;divide by 3&quot;</span> <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/11a200e0bedd9e7f64485b10781b8c9f.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="math-fonts">Math fonts</h2>
      <p>You can set the math font by with a <a href="/docs/reference/styling/#show-rules">show-set rule</a> as
      demonstrated below. Note that only special OpenType math fonts are suitable
      for typesetting maths.</p>
      <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">show</span> math<span class="typ-punct">.</span><span class="typ-func">equation</span><span class="typ-punct">:</span> <span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;Fira Math&quot;</span><span class="typ-punct">)</span>
      <span class="typ-math-delim">$</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>i <span class="typ-pol">in</span> <span class="typ-pol">NN</span><span class="typ-punct">)</span> 1 + i <span class="typ-math-delim">$</span>
      </code></pre><div class="preview"><img src="/assets/docs/319069eb903742474e4fe798c5482b0c.png" alt="Preview" width="480" height="190"/></div></div>
      <h2 id="math-module">Math module</h2>
      <p>All math functions are part of the <code>math</code> <a href="/docs/reference/scripting/#modules">module</a>,
      which is available by default in equations. Outside of equations, they can
      be accessed with the <code>math.</code> prefix.</p>
    items:
    - name: accent
      route: /docs/reference/math/accent/
      oneliner: Attaches an accent to a base.
      code: true
    - name: attach
      route: /docs/reference/math/attach
      oneliner: 下标、上标和限制。
      code: false
    - name: cancel
      route: /docs/reference/math/cancel/
      oneliner: Displays a diagonal line over a part of an equation.
      code: true
    - name: cases
      route: /docs/reference/math/cases/
      oneliner: A case distinction.
      code: true
    - name: class
      route: /docs/reference/math/class/
      oneliner: Forced use of a certain math class.
      code: true
    - name: equation
      route: /docs/reference/math/equation/
      oneliner: A mathematical equation.
      code: true
    - name: frac
      route: /docs/reference/math/frac/
      oneliner: A mathematical fraction.
      code: true
    - name: lr
      route: /docs/reference/math/lr
      oneliner: 定界符匹配。
      code: false
    - name: mat
      route: /docs/reference/math/mat/
      oneliner: A matrix.
      code: true
    - name: op
      route: /docs/reference/math/op/
      oneliner: A text operator in an equation.
      code: true
    - name: roots
      route: /docs/reference/math/roots
      oneliner: 平方根和非平方根。
      code: false
    - name: sizes
      route: /docs/reference/math/sizes
      oneliner: 强制公式中表达式的大小样式。
      code: false
    - name: styles
      route: /docs/reference/math/styles
      oneliner: 公式中的备用字形。
      code: false
    - name: underover
      route: /docs/reference/math/underover
      oneliner: 方程的部分上方或下方的定界符。
      code: false
    - name: variants
      route: /docs/reference/math/variants
      oneliner: 公式中的备用字体。
      code: false
    - name: vec
      route: /docs/reference/math/vec/
      oneliner: A column vector.
      code: true
    shorthands: null
children:
- route: /docs/reference/math/accent/
  title: Accent
  description: '`accent` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-base
      name: base
      children: []
    - id: parameters-accent
      name: accent
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: accent
      title: Accent
      keywords: []
      oneliner: Attaches an accent to a base.
      element: true
      details: |-
        <p>Attaches an accent to a base.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span><span class="typ-func">grave</span><span class="typ-punct">(</span>a<span class="typ-punct">)</span> = <span class="typ-func">accent</span><span class="typ-punct">(</span>a<span class="typ-punct">,</span> `<span class="typ-punct">)</span><span class="typ-math-delim">$</span> <span class="typ-escape">\</span>
        <span class="typ-math-delim">$</span><span class="typ-func">arrow</span><span class="typ-punct">(</span>a<span class="typ-punct">)</span> = <span class="typ-func">accent</span><span class="typ-punct">(</span>a<span class="typ-punct">,</span> <span class="typ-pol">arrow</span><span class="typ-punct">)</span><span class="typ-math-delim">$</span> <span class="typ-escape">\</span>
        <span class="typ-math-delim">$</span><span class="typ-func">tilde</span><span class="typ-punct">(</span>a<span class="typ-punct">)</span> = <span class="typ-func">accent</span><span class="typ-punct">(</span>a<span class="typ-punct">,</span> <span class="typ-escape">\u{0303}</span><span class="typ-punct">)</span><span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/b6947839312f74e20c050d9e6c1e7d17.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: base
        details: |-
          <p>The base to which the accent is applied.
          May consist of multiple letters.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span><span class="typ-func">arrow</span><span class="typ-punct">(</span>A B C<span class="typ-punct">)</span><span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/d6d6623d6462b4aa8c0201636bd694a7.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: accent
        details: |-
          <p>The accent to apply to the base.</p>
          <p>Supported accents include:</p>
          <table><thead><tr><th>Accent</th><th>Name</th><th>Codepoint</th></tr></thead><tbody>
          <tr><td>Grave</td><td><code>grave</code></td><td><code>`</code></td></tr>
          <tr><td>Acute</td><td><code>acute</code></td><td><code>´</code></td></tr>
          <tr><td>Circumflex</td><td><code>hat</code></td><td><code>^</code></td></tr>
          <tr><td>Tilde</td><td><code>tilde</code></td><td><code>~</code></td></tr>
          <tr><td>Macron</td><td><code>macron</code></td><td><code>¯</code></td></tr>
          <tr><td>Breve</td><td><code>breve</code></td><td><code>˘</code></td></tr>
          <tr><td>Dot</td><td><code>dot</code></td><td><code>.</code></td></tr>
          <tr><td>Double dot</td><td><code>dot.double</code></td><td><code>¨</code></td></tr>
          <tr><td>Triple dot</td><td><code>dot.triple</code></td><td><code>⃛</code></td></tr>
          <tr><td>Quadruple dot</td><td><code>dot.quad</code></td><td><code>⃜</code></td></tr>
          <tr><td>Diaeresis</td><td><code>diaer</code></td><td><code>¨</code></td></tr>
          <tr><td>Circle</td><td><code>circle</code></td><td><code>∘</code></td></tr>
          <tr><td>Double acute</td><td><code>acute.double</code></td><td><code>˝</code></td></tr>
          <tr><td>Caron</td><td><code>caron</code></td><td><code>ˇ</code></td></tr>
          <tr><td>Right arrow</td><td><code>arrow</code>, <code>-&gt;</code></td><td><code>→</code></td></tr>
          <tr><td>Left arrow</td><td><code>arrow.l</code>, <code>&lt;-</code></td><td><code>←</code></td></tr>
          </tbody></table>
        example: null
        types:
        - str
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/cancel/
  title: Cancel
  description: '`cancel` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-body
      name: body
      children: []
    - id: parameters-length
      name: length
      children: []
    - id: parameters-inverted
      name: inverted
      children: []
    - id: parameters-cross
      name: cross
      children: []
    - id: parameters-angle
      name: angle
      children: []
    - id: parameters-stroke
      name: stroke
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: cancel
      title: Cancel
      keywords: []
      oneliner: Displays a diagonal line over a part of an equation.
      element: true
      details: |-
        <p>Displays a diagonal line over a part of an equation.</p>
        <p>This is commonly used to show the elimination of a term.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code>Here, we can simplify:
        <span class="typ-math-delim">$</span> <span class="typ-punct">(</span>a <span class="typ-pol">dot</span> b <span class="typ-pol">dot</span> <span class="typ-func">cancel</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-math-op">/</span>
            <span class="typ-func">cancel</span><span class="typ-punct">(</span>x<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/989fec943668b36cd64056f08ffb8958.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: body
        details: <p>The content over which the line should be placed.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: length
        details: |-
          <p>The length of the line, relative to the length of the diagonal spanning
          the whole element being &quot;cancelled&quot;. A value of <code><span class="typ-num">100%</span></code> would then have
          the line span precisely the element's diagonal.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> a + <span class="typ-func">cancel</span><span class="typ-punct">(</span>x<span class="typ-punct">,</span> length<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">200%</span><span class="typ-punct">)</span>
              <span class="typ-escape">-</span> <span class="typ-func">cancel</span><span class="typ-punct">(</span>x<span class="typ-punct">,</span> length<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">200%</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/cb17fa7c03ec666b72002eb4cd32bb4c.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">100%</span> <span class="typ-op">+</span>
          <span class="typ-num">3pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: inverted
        details: |-
          <p>Whether the cancel line should be inverted (flipped along the y-axis).
          For the default angle setting, inverted means the cancel line
          points to the top left instead of top right.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-punct">(</span>a <span class="typ-func">cancel</span><span class="typ-punct">(</span>(b + c)<span class="typ-punct">,</span> inverted<span class="typ-punct">:</span> <span class="typ-key">#</span><span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-math-op">/</span>
              <span class="typ-func">cancel</span><span class="typ-punct">(</span>b + c<span class="typ-punct">,</span> inverted<span class="typ-punct">:</span> <span class="typ-key">#</span><span class="typ-key">true</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/d2d81d82281ca919b393f837f6685364.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: cross
        details: |-
          <p>Whether two opposing cancel lines should be drawn, forming a cross over
          the element. Overrides <code>inverted</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">cancel</span><span class="typ-punct">(</span><span class="typ-pol">Pi</span><span class="typ-punct">,</span> cross<span class="typ-punct">:</span> <span class="typ-key">#</span><span class="typ-key">true</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/6eb45aa7bcd0901ea11b4bb4eff08910.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: angle
        details: |-
          <p>How much to rotate the cancel line.</p>
          <ul>
          <li>If <code><span class="typ-key">auto</span></code>, the line assumes the default angle; that is, along the
          diagonal line of the content box.</li>
          <li>If given an angle, the line is rotated by that angle clockwise w.r.t
          the y-axis.</li>
          <li>If given a function <code>angle =&gt; angle</code>, the line is rotated by the angle
          returned by that function. The function receives the default angle as
          its input.</li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">cancel</span><span class="typ-punct">(</span><span class="typ-pol">Pi</span><span class="typ-punct">)</span>
            <span class="typ-func">cancel</span><span class="typ-punct">(</span><span class="typ-pol">Pi</span><span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">0deg</span><span class="typ-punct">)</span>
            <span class="typ-func">cancel</span><span class="typ-punct">(</span><span class="typ-pol">Pi</span><span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">45deg</span><span class="typ-punct">)</span>
            <span class="typ-func">cancel</span><span class="typ-punct">(</span><span class="typ-pol">Pi</span><span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">90deg</span><span class="typ-punct">)</span>
            <span class="typ-func">cancel</span><span class="typ-punct">(</span>1<span class="typ-math-op">/</span><span class="typ-punct">(</span>1+x<span class="typ-punct">)</span><span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-punct">#</span><span class="typ-punct">(</span>a <span class="typ-op">=&gt;</span> a <span class="typ-op">+</span> <span class="typ-num">45deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
            <span class="typ-func">cancel</span><span class="typ-punct">(</span>1<span class="typ-math-op">/</span><span class="typ-punct">(</span>1+x<span class="typ-punct">)</span><span class="typ-punct">,</span> angle<span class="typ-punct">:</span> <span class="typ-punct">#</span><span class="typ-punct">(</span>a <span class="typ-op">=&gt;</span> a <span class="typ-op">+</span> <span class="typ-num">90deg</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/6ff3b134227d89b9dc67d35cb197f0ce.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - auto
        - angle
        - function
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: stroke
        details: <p>How to <a href="/docs/reference/visualize/stroke/">stroke</a>
          the cancel line.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">cancel</span><span class="typ-punct">(</span>
            <span class="typ-pol">sum</span> x<span class="typ-punct">,</span>
            stroke<span class="typ-punct">:</span> <span class="typ-punct">#</span><span class="typ-punct">(</span>
              paint<span class="typ-punct">:</span> red<span class="typ-punct">,</span>
              thickness<span class="typ-punct">:</span> <span class="typ-num">1.5pt</span><span class="typ-punct">,</span>
              dash<span class="typ-punct">:</span> <span class="typ-str">&quot;dashed&quot;</span><span class="typ-punct">,</span>
            <span class="typ-punct">)</span><span class="typ-punct">,</span>
          <span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/c64f4bd7cfb3c2be203ffc19c55d162c.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - length
        - color
        - gradient
        - stroke
        - pattern
        - dictionary
        strings: []
        default: <code><span class="typ-num">0.5pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/cases/
  title: Cases
  description: '`cases` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-delim
      name: delim
      children: []
    - id: parameters-reverse
      name: reverse
      children: []
    - id: parameters-gap
      name: gap
      children: []
    - id: parameters-children
      name: children
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: cases
      title: Cases
      keywords: []
      oneliner: A case distinction.
      element: true
      details: |-
        <p>A case distinction.</p>
        <p>Content across different branches can be aligned with the <code>&amp;</code> symbol.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> f(x, y) <span class="typ-escape">:=</span> <span class="typ-func">cases</span><span class="typ-punct">(</span>
          1 <span class="typ-str">&quot;if&quot;</span> <span class="typ-punct">(</span>x <span class="typ-pol">dot</span> y<span class="typ-punct">)</span><span class="typ-math-op">/</span>2 <span class="typ-escape">&lt;=</span> 0<span class="typ-punct">,</span>
          2 <span class="typ-str">&quot;if&quot;</span> x <span class="typ-str">&quot;is even&quot;</span><span class="typ-punct">,</span>
          3 <span class="typ-str">&quot;if&quot;</span> x <span class="typ-pol">in</span> <span class="typ-pol">NN</span><span class="typ-punct">,</span>
          4 <span class="typ-str">&quot;else&quot;</span><span class="typ-punct">,</span>
        <span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/44f8d5158fe3376b109dc8d8e95e2d9e.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: delim
        details: <p>The delimiter to use.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">cases</span><span class="typ-punct">(</span>delim<span class="typ-punct">:</span> <span class="typ-str">&quot;[&quot;</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> x = <span class="typ-func">cases</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/64308d8f300a31dcea4c5b8442acdc88.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - str
        strings:
        - string: (
          details: <p>Delimit with parentheses.</p>
        - string: '['
          details: <p>Delimit with brackets.</p>
        - string: '{'
          details: <p>Delimit with curly braces.</p>
        - string: '|'
          details: <p>Delimit with vertical bars.</p>
        - string: '||'
          details: <p>Delimit with double vertical bars.</p>
        default: <code><span class="typ-str">&quot;{&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: reverse
        details: <p>Whether the direction of cases should be reversed.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">cases</span><span class="typ-punct">(</span>reverse<span class="typ-punct">:</span> <span class="typ-key">true</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">cases</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> = x <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/a42760f3d718b33d99a8b55fd1e30e29.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: gap
        details: <p>The gap between branches.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">cases</span><span class="typ-punct">(</span>gap<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> x = <span class="typ-func">cases</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/2e0ab0f3c9e54156d785d82fd95e8189.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">0.5em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: children
        details: <p>The branches of the case distinction.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/class/
  title: Class
  description: '`class` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-class
      name: class
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: class
      title: Class
      keywords: []
      oneliner: Forced use of a certain math class.
      element: true
      details: |-
        <p>Forced use of a certain math class.</p>
        <p>This is useful to treat certain symbols as if they were of a different
        class, e.g. to make a symbol behave like a relation.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> loves <span class="typ-op">=</span> math<span class="typ-punct">.</span><span class="typ-func">class</span><span class="typ-punct">(</span>
          <span class="typ-str">&quot;relation&quot;</span><span class="typ-punct">,</span>
          sym<span class="typ-punct">.</span>suit<span class="typ-punct">.</span>heart<span class="typ-punct">,</span>
        <span class="typ-punct">)</span>

        <span class="typ-math-delim">$</span>x <span class="typ-pol">loves</span> y <span class="typ-pol">and</span> y <span class="typ-pol">loves</span> 5<span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/e89e2c3b2abe1f8bdfd2f01546af0d9f.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: class
        details: <p>The class to apply to the content.</p>
        example: null
        types:
        - str
        strings:
        - string: normal
          details: <p>The default class for non-special things.</p>
        - string: punctuation
          details: <p>Punctuation, e.g. a comma.</p>
        - string: opening
          details: <p>An opening delimiter, e.g. <code>(</code>.</p>
        - string: closing
          details: <p>A closing delimiter, e.g. <code>)</code>.</p>
        - string: fence
          details: <p>A delimiter that is the same on both sides, e.g. <code>|</code>.</p>
        - string: large
          details: <p>A large operator like <code>sum</code>.</p>
        - string: relation
          details: <p>A relation like <code>=</code> or <code>prec</code>.</p>
        - string: unary
          details: <p>A unary operator like <code>not</code>.</p>
        - string: binary
          details: <p>A binary operator like <code>times</code>.</p>
        - string: vary
          details: <p>An operator that can be both unary or binary like <code>+</code>.</p>
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: body
        details: <p>The content to which the class is applied.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/equation/
  title: Equation
  description: '`equation` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: syntax
    name: Syntax
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-block
      name: block
      children: []
    - id: parameters-numbering
      name: numbering
      children: []
    - id: parameters-supplement
      name: supplement
      children: []
    - id: parameters-body
      name: body
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: equation
      title: Equation
      keywords: []
      oneliner: A mathematical equation.
      element: true
      details: |-
        <p>A mathematical equation.</p>
        <p>Can be displayed inline with text or as a separate block.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> <span class="typ-func">text</span><span class="typ-punct">(</span>font<span class="typ-punct">:</span> <span class="typ-str">&quot;New Computer Modern&quot;</span><span class="typ-punct">)</span>

        Let <span class="typ-math-delim">$</span>a<span class="typ-math-delim">$</span>, <span class="typ-math-delim">$</span>b<span class="typ-math-delim">$</span>, and <span class="typ-math-delim">$</span>c<span class="typ-math-delim">$</span> be the side
        lengths of right-angled triangle.
        Then, we know that:
        <span class="typ-math-delim">$</span> a<span class="typ-math-op">^</span>2 + b<span class="typ-math-op">^</span>2 = c<span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span>

        Prove by induction:
        <span class="typ-math-delim">$</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>k=1<span class="typ-punct">)</span><span class="typ-math-op">^</span>n k = <span class="typ-punct">(</span>n(n+1)<span class="typ-punct">)</span> <span class="typ-math-op">/</span> 2 <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/2d58c5d646f64f45aaf3c354af40ed6d.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="syntax">Syntax</h2>
        <p>This function also has dedicated syntax: Write mathematical markup within
        dollar signs to create an equation. Starting and ending the equation with at
        least one space lifts it into a separate block that is centered
        horizontally. For more details about math syntax, see the
        <a href="/docs/reference/math/">main math page</a>.</p>
      example: null
      self: false
      params:
      - name: block
        details: <p>Whether the equation is displayed as a separate block.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: numbering
        details: <p>How to <a href="/docs/reference/model/numbering/">number</a> block-level
          equations.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">equation</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;(1)&quot;</span><span class="typ-punct">)</span>

          We define:
          <span class="typ-math-delim">$</span> <span class="typ-pol">phi</span><span class="typ-punct">.</span><span class="typ-pol">alt</span> <span class="typ-escape">:=</span> <span class="typ-punct">(</span>1 + <span class="typ-func">sqrt</span><span class="typ-punct">(</span>5<span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-math-op">/</span> 2 <span class="typ-math-delim">$</span> <span class="typ-label">&lt;ratio&gt;</span>

          With <span class="typ-ref">@ratio</span>, we get:
          <span class="typ-math-delim">$</span> F<span class="typ-math-op">_</span>n = <span class="typ-func">floor</span><span class="typ-punct">(</span>1 <span class="typ-math-op">/</span> <span class="typ-func">sqrt</span><span class="typ-punct">(</span>5<span class="typ-punct">)</span> <span class="typ-pol">phi</span><span class="typ-punct">.</span><span class="typ-pol">alt</span><span class="typ-math-op">^</span>n<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/1e42f36b96381f61f6b2399a6c2c3289.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - str
        - function
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: supplement
        details: |-
          <p>A supplement for the equation.</p>
          <p>For references to equations, this is added before the referenced number.</p>
          <p>If a function is specified, it is passed the referenced equation and
          should return content.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">equation</span><span class="typ-punct">(</span>numbering<span class="typ-punct">:</span> <span class="typ-str">&quot;(1)&quot;</span><span class="typ-punct">,</span> supplement<span class="typ-punct">:</span> <span class="typ-punct">[</span>Eq.<span class="typ-punct">]</span><span class="typ-punct">)</span>

          We define:
          <span class="typ-math-delim">$</span> <span class="typ-pol">phi</span><span class="typ-punct">.</span><span class="typ-pol">alt</span> <span class="typ-escape">:=</span> <span class="typ-punct">(</span>1 + <span class="typ-func">sqrt</span><span class="typ-punct">(</span>5<span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-math-op">/</span> 2 <span class="typ-math-delim">$</span> <span class="typ-label">&lt;ratio&gt;</span>

          With <span class="typ-ref">@ratio</span>, we get:
          <span class="typ-math-delim">$</span> F<span class="typ-math-op">_</span>n = <span class="typ-func">floor</span><span class="typ-punct">(</span>1 <span class="typ-math-op">/</span> <span class="typ-func">sqrt</span><span class="typ-punct">(</span>5<span class="typ-punct">)</span> <span class="typ-pol">phi</span><span class="typ-punct">.</span><span class="typ-pol">alt</span><span class="typ-math-op">^</span>n<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/3cf9685cd7680c51d37afc6ef3d48d09.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - auto
        - content
        - function
        strings: []
        default: <code><span class="typ-key">auto</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: body
        details: <p>The contents of the equation.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/frac/
  title: Fraction
  description: '`frac` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: syntax
    name: Syntax
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-num
      name: num
      children: []
    - id: parameters-denom
      name: denom
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: frac
      title: Fraction
      keywords: []
      oneliner: A mathematical fraction.
      element: true
      details: |-
        <p>A mathematical fraction.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> 1<span class="typ-math-op">/</span>2 &lt; <span class="typ-punct">(</span>x+1<span class="typ-punct">)</span><span class="typ-math-op">/</span>2 <span class="typ-math-delim">$</span>
        <span class="typ-math-delim">$</span> <span class="typ-punct">(</span>(x+1)<span class="typ-punct">)</span> <span class="typ-math-op">/</span> 2 = <span class="typ-func">frac</span><span class="typ-punct">(</span>a<span class="typ-punct">,</span> b<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/36a9d954136db2a90a824daa56f9e19c.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="syntax">Syntax</h2>
        <p>This function also has dedicated syntax: Use a slash to turn neighbouring
        expressions into a fraction. Multiple atoms can be grouped into a single
        expression using round grouping parenthesis. Such parentheses are removed
        from the output, but you can nest multiple to force them.</p>
      example: null
      self: false
      params:
      - name: num
        details: <p>The fraction's numerator.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: denom
        details: <p>The fraction's denominator.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/mat/
  title: Matrix
  description: '`mat` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-delim
      name: delim
      children: []
    - id: parameters-augment
      name: augment
      children: []
    - id: parameters-gap
      name: gap
      children: []
    - id: parameters-row-gap
      name: row-gap
      children: []
    - id: parameters-column-gap
      name: column-gap
      children: []
    - id: parameters-rows
      name: rows
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: mat
      title: Matrix
      keywords: []
      oneliner: A matrix.
      element: true
      details: |-
        <p>A matrix.</p>
        <p>The elements of a row should be separated by commas, while the rows
        themselves should be separated by semicolons. The semicolon syntax merges
        preceding arguments separated by commas into an array. You can also use this
        special syntax of math function calls to define custom functions that take
        2D data.</p>
        <p>Content in cells that are in the same row can be aligned with the <code>&amp;</code> symbol.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>
          1<span class="typ-punct">,</span> 2<span class="typ-punct">,</span> <span class="typ-escape">...</span><span class="typ-punct">,</span> 10<span class="typ-punct">;</span>
          2<span class="typ-punct">,</span> 2<span class="typ-punct">,</span> <span class="typ-escape">...</span><span class="typ-punct">,</span> 10<span class="typ-punct">;</span>
          <span class="typ-pol">dots</span><span class="typ-punct">.</span><span class="typ-pol">v</span><span class="typ-punct">,</span> <span class="typ-pol">dots</span><span class="typ-punct">.</span><span class="typ-pol">v</span><span class="typ-punct">,</span> <span class="typ-pol">dots</span><span class="typ-punct">.</span><span class="typ-pol">down</span><span class="typ-punct">,</span> <span class="typ-pol">dots</span><span class="typ-punct">.</span><span class="typ-pol">v</span><span class="typ-punct">;</span>
          10<span class="typ-punct">,</span> 10<span class="typ-punct">,</span> <span class="typ-escape">...</span><span class="typ-punct">,</span> 10<span class="typ-punct">;</span>
        <span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/92c9b3b027c9bc5f7095d691e1690745.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: delim
        details: <p>The delimiter to use.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">mat</span><span class="typ-punct">(</span>delim<span class="typ-punct">:</span> <span class="typ-str">&quot;[&quot;</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">;</span> 3<span class="typ-punct">,</span> 4<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/3d80c9fc58c9cf9bc7ac411738bcfed4.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - str
        strings:
        - string: (
          details: <p>Delimit with parentheses.</p>
        - string: '['
          details: <p>Delimit with brackets.</p>
        - string: '{'
          details: <p>Delimit with curly braces.</p>
        - string: '|'
          details: <p>Delimit with vertical bars.</p>
        - string: '||'
          details: <p>Delimit with double vertical bars.</p>
        default: <code><span class="typ-str">&quot;(&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: augment
        details: |-
          <p>Draws augmentation lines in a matrix.</p>
          <ul>
          <li><code><span class="typ-key">none</span></code>: No lines are drawn.</li>
          <li>A single number: A vertical augmentation line is drawn
          after the specified column number. Negative numbers start from the end.</li>
          <li>A dictionary: With a dictionary, multiple augmentation lines can be
          drawn both horizontally and vertically. Additionally, the style of the
          lines can be set. The dictionary can contain the following keys:
          <ul>
          <li><code>hline</code>: The offsets at which horizontal lines should be drawn.
          For example, an offset of <code>2</code> would result in a horizontal line
          being drawn after the second row of the matrix. Accepts either an
          integer for a single line, or an array of integers
          for multiple lines. Like for a single number, negative numbers start from the end.</li>
          <li><code>vline</code>: The offsets at which vertical lines should be drawn.
          For example, an offset of <code>2</code> would result in a vertical line being
          drawn after the second column of the matrix. Accepts either an
          integer for a single line, or an array of integers
          for multiple lines. Like for a single number, negative numbers start from the end.</li>
          <li><code>stroke</code>: How to <a href="/docs/reference/visualize/stroke/">stroke</a> the line. If set to <code><span class="typ-key">auto</span></code>,
          takes on a thickness of 0.05em and square line caps.</li>
          </ul>
          </li>
          </ul>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 0<span class="typ-punct">,</span> 1<span class="typ-punct">;</span> 0<span class="typ-punct">,</span> 1<span class="typ-punct">,</span> 2<span class="typ-punct">;</span> augment<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">2</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          <span class="typ-comment">// Equivalent to:</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 0<span class="typ-punct">,</span> 1<span class="typ-punct">;</span> 0<span class="typ-punct">,</span> 1<span class="typ-punct">,</span> 2<span class="typ-punct">;</span> augment<span class="typ-punct">:</span> <span class="typ-punct">#</span><span class="typ-punct">(</span><span class="typ-op">-</span><span class="typ-num">1</span><span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/470e82a617fed734f7cc0797b28fda11.png" alt="Preview" width="480" height="190"/></div></div><div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>0<span class="typ-punct">,</span> 0<span class="typ-punct">,</span> 0<span class="typ-punct">;</span> 1<span class="typ-punct">,</span> 1<span class="typ-punct">,</span> 1<span class="typ-punct">;</span> augment<span class="typ-punct">:</span> <span class="typ-punct">#</span><span class="typ-punct">(</span>hline<span class="typ-punct">:</span> <span class="typ-num">1</span><span class="typ-punct">,</span> stroke<span class="typ-punct">:</span> <span class="typ-num">2pt</span> <span class="typ-op">+</span> green<span class="typ-punct">)</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/03c849bc1ba1ed6566954d6b6ff6588b.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - int
        - dictionary
        strings: []
        default: <code><span class="typ-key">none</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: gap
        details: <p>The gap between rows and columns.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">mat</span><span class="typ-punct">(</span>gap<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">;</span> 3<span class="typ-punct">,</span> 4<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/ba336a8b0fe494fd92fc01118490becf.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">0pt</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: row-gap
        details: <p>The gap between rows. Takes precedence over <code>gap</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">mat</span><span class="typ-punct">(</span>row-gap<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">;</span> 3<span class="typ-punct">,</span> 4<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/64e72078e39b3972caf51b5aa1f57437.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">0.5em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: column-gap
        details: <p>The gap between columns. Takes precedence over <code>gap</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">mat</span><span class="typ-punct">(</span>column-gap<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">mat</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">;</span> 3<span class="typ-punct">,</span> 4<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/f6a6a0a25cd3ad794ce1f80c313d0336.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">0.5em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: rows
        details: <p>An array of arrays with the rows of the matrix.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">let</span> data <span class="typ-op">=</span> <span class="typ-punct">(</span><span class="typ-punct">(</span><span class="typ-num">1</span><span class="typ-punct">,</span> <span class="typ-num">2</span><span class="typ-punct">,</span> <span class="typ-num">3</span><span class="typ-punct">)</span><span class="typ-punct">,</span> <span class="typ-punct">(</span><span class="typ-num">4</span><span class="typ-punct">,</span> <span class="typ-num">5</span><span class="typ-punct">,</span> <span class="typ-num">6</span><span class="typ-punct">)</span><span class="typ-punct">)</span>
          <span class="typ-key">#</span><span class="typ-key">let</span> matrix <span class="typ-op">=</span> math<span class="typ-punct">.</span><span class="typ-func">mat</span><span class="typ-punct">(</span><span class="typ-op">..</span>data<span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> v <span class="typ-escape">:=</span> <span class="typ-pol">matrix</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/5005534335c6665583752d586ce09c37.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - array
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/op/
  title: Text Operator
  description: '`op` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: predefined
    name: Predefined
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-text
      name: text
      children: []
    - id: parameters-limits
      name: limits
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: op
      title: Text Operator
      keywords: []
      oneliner: A text operator in an equation.
      element: true
      details: |-
        <p>A text operator in an equation.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-pol">tan</span> x = <span class="typ-punct">(</span><span class="typ-pol">sin</span> x<span class="typ-punct">)</span><span class="typ-math-op">/</span><span class="typ-punct">(</span><span class="typ-pol">cos</span> x<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        <span class="typ-math-delim">$</span> <span class="typ-func">op</span><span class="typ-punct">(</span><span class="typ-str">&quot;custom&quot;</span><span class="typ-punct">,</span>
             limits<span class="typ-punct">:</span> <span class="typ-key">#</span><span class="typ-key">true</span><span class="typ-punct">)</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>n<span class="typ-escape">-&gt;</span><span class="typ-pol">oo</span><span class="typ-punct">)</span> n <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/1fc6ad0d8979e73ff0b39aeba8699a1d.png" alt="Preview" width="480" height="190"/></div></div>
        <h2 id="predefined">Predefined Operators</h2>
        <p>Typst predefines the operators <code>arccos</code>, <code>arcsin</code>, <code>arctan</code>, <code>arg</code>, <code>cos</code>,
        <code>cosh</code>, <code>cot</code>, <code>coth</code>, <code>csc</code>, <code>csch</code>, <code>ctg</code>, <code>deg</code>, <code>det</code>, <code>dim</code>, <code>exp</code>,
        <code>gcd</code>, <code>hom</code>, <code>id</code>, <code>im</code>, <code>inf</code>, <code>ker</code>, <code>lg</code>, <code>lim</code>, <code>liminf</code>, <code>limsup</code>,
        <code>ln</code>, <code>log</code>, <code>max</code>, <code>min</code>, <code>mod</code>, <code>Pr</code>, <code>sec</code>, <code>sech</code>, <code>sin</code>, <code>sinc</code>,
        <code>sinh</code>, <code>sup</code>, <code>tan</code>, <code>tanh</code>, <code>tg</code> and <code>tr</code>.</p>
      example: null
      self: false
      params:
      - name: text
        details: <p>The operator's text.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: false
        settable: false
      - name: limits
        details: <p>Whether the operator should show attachments as limits in display
          mode.</p>
        example: null
        types:
        - bool
        strings: []
        default: <code><span class="typ-key">false</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/vec/
  title: Vector
  description: '`vec` 函数的文档'
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: example
    name: Example
    children: []
  - id: parameters
    name: Parameters
    children:
    - id: parameters-delim
      name: delim
      children: []
    - id: parameters-gap
      name: gap
      children: []
    - id: parameters-children
      name: children
      children: []
  body:
    kind: func
    content:
      path:
      - math
      name: vec
      title: Vector
      keywords: []
      oneliner: A column vector.
      element: true
      details: |-
        <p>A column vector.</p>
        <p>Content in the vector's elements can be aligned with the <code>&amp;</code> symbol.</p>
        <h2 id="example">Example</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">vec</span><span class="typ-punct">(</span>a<span class="typ-punct">,</span> b<span class="typ-punct">,</span> c<span class="typ-punct">)</span> <span class="typ-pol">dot</span> <span class="typ-func">vec</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">,</span> 3<span class="typ-punct">)</span>
            = a + 2b + 3c <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/8ce51ae84b534812283bd47c001cf7dd.png" alt="Preview" width="480" height="190"/></div></div>
      example: null
      self: false
      params:
      - name: delim
        details: <p>The delimiter to use.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">vec</span><span class="typ-punct">(</span>delim<span class="typ-punct">:</span> <span class="typ-str">&quot;[&quot;</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">vec</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/697bbf8b2455e76872bc76d3cc23a219.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - none
        - str
        strings:
        - string: (
          details: <p>Delimit with parentheses.</p>
        - string: '['
          details: <p>Delimit with brackets.</p>
        - string: '{'
          details: <p>Delimit with curly braces.</p>
        - string: '|'
          details: <p>Delimit with vertical bars.</p>
        - string: '||'
          details: <p>Delimit with double vertical bars.</p>
        default: <code><span class="typ-str">&quot;(&quot;</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: gap
        details: <p>The gap between elements.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-key">#</span><span class="typ-key">set</span> math<span class="typ-punct">.</span><span class="typ-func">vec</span><span class="typ-punct">(</span>gap<span class="typ-punct">:</span> <span class="typ-num">1em</span><span class="typ-punct">)</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">vec</span><span class="typ-punct">(</span>1<span class="typ-punct">,</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/eec200cf46619dee279aa0f272b5d6f6.png" alt="Preview" width="480" height="190"/></div></div>
        types:
        - relative
        strings: []
        default: <code><span class="typ-num">0.5em</span></code>
        positional: false
        named: true
        required: false
        variadic: false
        settable: true
      - name: children
        details: <p>The elements of the vector.</p>
        example: null
        types:
        - content
        strings: []
        default: null
        positional: true
        named: false
        required: true
        variadic: true
        settable: false
      returns:
      - content
      scope: []
  children: []
- route: /docs/reference/math/underover
  title: 下方/上方
  description: underover 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-underline
      name: Underline
      children:
      - id: functions-underline-body
        name: body
        children: []
    - id: functions-overline
      name: Overline
      children:
      - id: functions-overline-body
        name: body
        children: []
    - id: functions-underbrace
      name: Underbrace
      children:
      - id: functions-underbrace-body
        name: body
        children: []
      - id: functions-underbrace-annotation
        name: annotation
        children: []
    - id: functions-overbrace
      name: Overbrace
      children:
      - id: functions-overbrace-body
        name: body
        children: []
      - id: functions-overbrace-annotation
        name: annotation
        children: []
    - id: functions-underbracket
      name: Underbracket
      children:
      - id: functions-underbracket-body
        name: body
        children: []
      - id: functions-underbracket-annotation
        name: annotation
        children: []
    - id: functions-overbracket
      name: Overbracket
      children:
      - id: functions-overbracket-body
        name: body
        children: []
      - id: functions-overbracket-annotation
        name: annotation
        children: []
  body:
    kind: group
    content:
      name: underover
      title: 下方/上方
      details: |-
        <p>方程的部分上方或下方的定界符。</p>
        <p>大括号和方括号还允许在它们自己的下方或上方添加可选的注释。</p>
      functions:
      - path:
        - math
        name: underline
        title: Underline
        keywords: []
        oneliner: A horizontal line under content.
        element: true
        details: <p>A horizontal line under content.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">underline</span><span class="typ-punct">(</span>1 + 2 + <span class="typ-escape">...</span> + 5<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/a964debc0427ab602297c7dc72630745.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content above the line.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: overline
        title: Overline
        keywords: []
        oneliner: A horizontal line over content.
        element: true
        details: <p>A horizontal line over content.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">overline</span><span class="typ-punct">(</span>1 + 2 + <span class="typ-escape">...</span> + 5<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/cdd4cb2e681e2fced8b4b9f63cf90e81.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content below the line.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: underbrace
        title: Underbrace
        keywords: []
        oneliner: A horizontal brace under content, with an optional annotation below.
        element: true
        details: <p>A horizontal brace under content, with an optional annotation
          below.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">underbrace</span><span class="typ-punct">(</span>1 + 2 + <span class="typ-escape">...</span> + 5<span class="typ-punct">,</span> <span class="typ-str">&quot;numbers&quot;</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/88b30429e73e3bbc3d0e0ee29c7d06b6.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content above the brace.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: annotation
          details: <p>The optional content below the brace.</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: true
        returns:
        - content
        scope: []
      - path:
        - math
        name: overbrace
        title: Overbrace
        keywords: []
        oneliner: A horizontal brace over content, with an optional annotation above.
        element: true
        details: <p>A horizontal brace over content, with an optional annotation above.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">overbrace</span><span class="typ-punct">(</span>1 + 2 + <span class="typ-escape">...</span> + 5<span class="typ-punct">,</span> <span class="typ-str">&quot;numbers&quot;</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/9f2eca7814aaf0c6542bb369712f4513.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content below the brace.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: annotation
          details: <p>The optional content above the brace.</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: true
        returns:
        - content
        scope: []
      - path:
        - math
        name: underbracket
        title: Underbracket
        keywords: []
        oneliner: A horizontal bracket under content, with an optional annotation
          below.
        element: true
        details: <p>A horizontal bracket under content, with an optional annotation
          below.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">underbracket</span><span class="typ-punct">(</span>1 + 2 + <span class="typ-escape">...</span> + 5<span class="typ-punct">,</span> <span class="typ-str">&quot;numbers&quot;</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/7a63fcfa0c9ae2df891097e9bba06ab6.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content above the bracket.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: annotation
          details: <p>The optional content below the bracket.</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: true
        returns:
        - content
        scope: []
      - path:
        - math
        name: overbracket
        title: Overbracket
        keywords: []
        oneliner: A horizontal bracket over content, with an optional annotation above.
        element: true
        details: <p>A horizontal bracket over content, with an optional annotation
          above.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">overbracket</span><span class="typ-punct">(</span>1 + 2 + <span class="typ-escape">...</span> + 5<span class="typ-punct">,</span> <span class="typ-str">&quot;numbers&quot;</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/b50782925e551ea653c324786dcbc21b.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content below the bracket.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: annotation
          details: <p>The optional content above the bracket.</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: true
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/math/variants
  title: 变体
  description: variants 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-serif
      name: Serif
      children:
      - id: functions-serif-body
        name: body
        children: []
    - id: functions-sans
      name: Sans Serif
      children:
      - id: functions-sans-body
        name: body
        children: []
    - id: functions-frak
      name: Fraktur
      children:
      - id: functions-frak-body
        name: body
        children: []
    - id: functions-mono
      name: Monospace
      children:
      - id: functions-mono-body
        name: body
        children: []
    - id: functions-bb
      name: Blackboard Bold
      children:
      - id: functions-bb-body
        name: body
        children: []
    - id: functions-cal
      name: Calligraphic
      children:
      - id: functions-cal-body
        name: body
        children: []
  body:
    kind: group
    content:
      name: variants
      title: 变体
      details: |-
        <p>公式中的备用字体。</p>
        <p>这些函数与 <a href="/docs/reference/text/text/"><code>text</code></a> 函数不同，因为数学字体包含每个字母的多个变体。</p>
      functions:
      - path:
        - math
        name: serif
        title: Serif
        keywords: []
        oneliner: Serif (roman) font style in math.
        element: false
        details: |-
          <p>Serif (roman) font style in math.</p>
          <p>This is already the default.</p>
        example: null
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: sans
        title: Sans Serif
        keywords: []
        oneliner: Sans-serif font style in math.
        element: false
        details: <p>Sans-serif font style in math.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">sans</span><span class="typ-punct">(</span>A B C<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/a3e118d9df47ac4a4950d912ca8980ca.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: frak
        title: Fraktur
        keywords: []
        oneliner: Fraktur font style in math.
        element: false
        details: <p>Fraktur font style in math.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">frak</span><span class="typ-punct">(</span>P<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/1b1d41aefeb886afda3e40c16eb413c4.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: mono
        title: Monospace
        keywords: []
        oneliner: Monospace font style in math.
        element: false
        details: <p>Monospace font style in math.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">mono</span><span class="typ-punct">(</span>x + y = z<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/22a327f021c4135a3c29e51704891040.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: bb
        title: Blackboard Bold
        keywords: []
        oneliner: Blackboard bold (double-struck) font style in math.
        element: false
        details: |-
          <p>Blackboard bold (double-struck) font style in math.</p>
          <p>For uppercase latin letters, blackboard bold is additionally available
          through <a href="/docs/reference/symbols/sym/">symbols</a> of the form <code>NN</code> and <code>RR</code>.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">bb</span><span class="typ-punct">(</span>b<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          <span class="typ-math-delim">$</span> <span class="typ-func">bb</span><span class="typ-punct">(</span>N<span class="typ-punct">)</span> = <span class="typ-pol">NN</span> <span class="typ-math-delim">$</span>
          <span class="typ-math-delim">$</span> f: <span class="typ-pol">NN</span> <span class="typ-escape">-&gt;</span> <span class="typ-pol">RR</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/fbfd132e6d631cb8d11f762f30182469.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: cal
        title: Calligraphic
        keywords: []
        oneliner: Calligraphic font style in math.
        element: false
        details: <p>Calligraphic font style in math.</p>
        example: |-
          <div class="previewed-code"><pre><code>Let <span class="typ-math-delim">$</span><span class="typ-func">cal</span><span class="typ-punct">(</span>P<span class="typ-punct">)</span><span class="typ-math-delim">$</span> be the set of <span class="typ-escape">...</span>
          </code></pre><div class="preview"><img src="/assets/docs/4076bf054496eaa35f7325c6d304bf36.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/math/sizes
  title: 大小
  description: sizes 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-display
      name: Display Size
      children:
      - id: functions-display-body
        name: body
        children: []
      - id: functions-display-cramped
        name: cramped
        children: []
    - id: functions-inline
      name: Inline Size
      children:
      - id: functions-inline-body
        name: body
        children: []
      - id: functions-inline-cramped
        name: cramped
        children: []
    - id: functions-script
      name: Script Size
      children:
      - id: functions-script-body
        name: body
        children: []
      - id: functions-script-cramped
        name: cramped
        children: []
    - id: functions-sscript
      name: Script-Script Size
      children:
      - id: functions-sscript-body
        name: body
        children: []
      - id: functions-sscript-cramped
        name: cramped
        children: []
  body:
    kind: group
    content:
      name: sizes
      title: 大小
      details: |-
        <p>强制公式中表达式的大小样式。</p>
        <p>这些函数允许手动配置方程元素的大小，使其看起来像在显示/行内方程中使用或像在根或上/下标中使用一样。</p>
      functions:
      - path:
        - math
        name: display
        title: Display Size
        keywords: []
        oneliner: Forced display style in math.
        element: false
        details: |-
          <p>Forced display style in math.</p>
          <p>This is the normal size for block equations.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span><span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2 = <span class="typ-func">display</span><span class="typ-punct">(</span><span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2<span class="typ-punct">)</span><span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/8631c65c70bfbf88891feec80e5e4bba.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to size.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: cramped
          details: |-
            <p>Whether to impose a height restriction for exponents, like regular sub-
            and superscripts do.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">false</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: inline
        title: Inline Size
        keywords: []
        oneliner: Forced inline (text) style in math.
        element: false
        details: |-
          <p>Forced inline (text) style in math.</p>
          <p>This is the normal size for inline equations.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2
              = <span class="typ-func">inline</span><span class="typ-punct">(</span><span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/7f6fabd1a5038cb1e92db98ab2c4938b.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to size.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: cramped
          details: |-
            <p>Whether to impose a height restriction for exponents, like regular sub-
            and superscripts do.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">false</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: script
        title: Script Size
        keywords: []
        oneliner: Forced script style in math.
        element: false
        details: |-
          <p>Forced script style in math.</p>
          <p>This is the smaller size used in powers or sub- or superscripts.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span><span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2 = <span class="typ-func">script</span><span class="typ-punct">(</span><span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2<span class="typ-punct">)</span><span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/29af5c7bf57f3160bd334d93b988775a.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to size.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: cramped
          details: |-
            <p>Whether to impose a height restriction for exponents, like regular sub-
            and superscripts do.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: sscript
        title: Script-Script Size
        keywords: []
        oneliner: Forced second script style in math.
        element: false
        details: |-
          <p>Forced second script style in math.</p>
          <p>This is the smallest size, used in second-level sub- and superscripts
          (script of the script).</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span><span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2 = <span class="typ-func">sscript</span><span class="typ-punct">(</span><span class="typ-pol">sum</span><span class="typ-math-op">_</span>i x<span class="typ-math-op">_</span>i<span class="typ-math-op">/</span>2<span class="typ-punct">)</span><span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/bd925f3212ba0c8c54ffec73165ac1a3.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to size.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: cramped
          details: |-
            <p>Whether to impose a height restriction for exponents, like regular sub-
            and superscripts do.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/math/lr
  title: 左/右
  description: lr 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: ''
    name: ''
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-lr
      name: Left/Right
      children:
      - id: functions-lr-size
        name: size
        children: []
      - id: functions-lr-body
        name: body
        children: []
    - id: functions-mid
      name: Mid
      children:
      - id: functions-mid-body
        name: body
        children: []
    - id: functions-abs
      name: Abs
      children:
      - id: functions-abs-size
        name: size
        children: []
      - id: functions-abs-body
        name: body
        children: []
    - id: functions-norm
      name: Norm
      children:
      - id: functions-norm-size
        name: size
        children: []
      - id: functions-norm-body
        name: body
        children: []
    - id: functions-floor
      name: Floor
      children:
      - id: functions-floor-size
        name: size
        children: []
      - id: functions-floor-body
        name: body
        children: []
    - id: functions-ceil
      name: Ceil
      children:
      - id: functions-ceil-size
        name: size
        children: []
      - id: functions-ceil-body
        name: body
        children: []
    - id: functions-round
      name: Round
      children:
      - id: functions-round-size
        name: size
        children: []
      - id: functions-round-body
        name: body
        children: []
  body:
    kind: group
    content:
      name: lr
      title: 左/右
      details: |-
        <p>定界符匹配。</p>
        <p><code>lr</code> 函数允许您匹配两个定界符并按其包含的内容缩放它们。虽然在语法上匹配的定界符也会自动进行，但 <code>lr</code> 允许您匹配两个任意的定界符并精确控制它们的大小。除了 <code>lr</code> 函数外，Typst 还提供了一些创建绝对值、上取整和下取整值以及范数的定界符配对的其他函数。</p>
        <h2>示例</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> [a, b<span class="typ-math-op">/</span>2] <span class="typ-math-delim">$</span>
        <span class="typ-math-delim">$</span> <span class="typ-func">lr</span><span class="typ-punct">(</span>]<span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>x=1<span class="typ-punct">)</span><span class="typ-math-op">^</span>n] x<span class="typ-punct">,</span> size<span class="typ-punct">:</span> <span class="typ-num">#</span><span class="typ-num">50%</span><span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        <span class="typ-math-delim">$</span> <span class="typ-func">abs</span><span class="typ-punct">(</span><span class="typ-punct">(</span>x + y<span class="typ-punct">)</span> <span class="typ-math-op">/</span> 2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/41d20606a87dc72e3461b2b0a7ce9acf.png" alt="Preview" width="480" height="190"/></div></div>
      functions:
      - path:
        - math
        name: lr
        title: Left/Right
        keywords: []
        oneliner: Scales delimiters.
        element: true
        details: |-
          <p>Scales delimiters.</p>
          <p>While matched delimiters scale by default, this can be used to scale
          unmatched delimiters and to control the delimiter scaling more precisely.</p>
        example: null
        self: false
        params:
        - name: size
          details: <p>The size of the brackets, relative to the height of the wrapped
            content.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: <code><span class="typ-key">auto</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        - name: body
          details: <p>The delimited content, including the delimiters.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: mid
        title: Mid
        keywords: []
        oneliner: Scales delimiters vertically to the nearest surrounding `{lr()}`
          group.
        element: true
        details: <p>Scales delimiters vertically to the nearest surrounding <code><span
          class="typ-func">lr</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code>
          group.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> { x <span class="typ-func">mid</span><span class="typ-punct">(</span>|<span class="typ-punct">)</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>i=1<span class="typ-punct">)</span><span class="typ-math-op">^</span>n w<span class="typ-math-op">_</span>i|f<span class="typ-math-op">_</span>i (x)| &lt; 1 } <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/5bb74ab12ab4445fbc6af176433f46c7.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to be scaled.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: abs
        title: Abs
        keywords: []
        oneliner: Takes the absolute value of an expression.
        element: false
        details: <p>Takes the absolute value of an expression.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">abs</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/28e475440e93179a23e1e05535ef8b05.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: size
          details: <p>The size of the brackets, relative to the height of the wrapped
            content.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: body
          details: <p>The expression to take the absolute value of.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: norm
        title: Norm
        keywords: []
        oneliner: Takes the norm of an expression.
        element: false
        details: <p>Takes the norm of an expression.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">norm</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/b1c37b013016675629fbfab0497e5ce5.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: size
          details: <p>The size of the brackets, relative to the height of the wrapped
            content.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: body
          details: <p>The expression to take the norm of.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: floor
        title: Floor
        keywords: []
        oneliner: Floors an expression.
        element: false
        details: <p>Floors an expression.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">floor</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/025f577b807e2e19e782e7ff2f73543a.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: size
          details: <p>The size of the brackets, relative to the height of the wrapped
            content.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: body
          details: <p>The expression to floor.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: ceil
        title: Ceil
        keywords: []
        oneliner: Ceils an expression.
        element: false
        details: <p>Ceils an expression.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">ceil</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/5e51dbb63fcb62826c19d8bc8405ec5b.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: size
          details: <p>The size of the brackets, relative to the height of the wrapped
            content.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: body
          details: <p>The expression to ceil.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: round
        title: Round
        keywords: []
        oneliner: Rounds an expression.
        element: false
        details: <p>Rounds an expression.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">round</span><span class="typ-punct">(</span>x<span class="typ-math-op">/</span>2<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/b568beef30e9fb70d08ed84d7d609861.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: size
          details: <p>The size of the brackets, relative to the height of the wrapped
            content.</p>
          example: null
          types:
          - auto
          - relative
          strings: []
          default: null
          positional: false
          named: true
          required: false
          variadic: false
          settable: false
        - name: body
          details: <p>The expression to round.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/math/styles
  title: 样式
  description: styles 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-upright
      name: Upright
      children:
      - id: functions-upright-body
        name: body
        children: []
    - id: functions-italic
      name: Italic
      children:
      - id: functions-italic-body
        name: body
        children: []
    - id: functions-bold
      name: Bold
      children:
      - id: functions-bold-body
        name: body
        children: []
  body:
    kind: group
    content:
      name: styles
      title: 样式
      details: |-
        <p>公式中的备用字形。</p>
        <p>这些函数与 <a href="/docs/reference/text/text/"><code>text</code></a> 函数不同，因为数学字体包含每个字母的多个变体。</p>
      functions:
      - path:
        - math
        name: upright
        title: Upright
        keywords: []
        oneliner: Upright (non-italic) font style in math.
        element: false
        details: <p>Upright (non-italic) font style in math.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">upright</span><span class="typ-punct">(</span>A<span class="typ-punct">)</span> <span class="typ-escape">!=</span> A <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/d0ac32f208aa20b1c8b1ea88304aa607.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: italic
        title: Italic
        keywords: []
        oneliner: Italic font style in math.
        element: false
        details: |-
          <p>Italic font style in math.</p>
          <p>For roman letters and greek lowercase letters, this is already the default.</p>
        example: null
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: bold
        title: Bold
        keywords: []
        oneliner: Bold font style in math.
        element: false
        details: <p>Bold font style in math.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">bold</span><span class="typ-punct">(</span>A<span class="typ-punct">)</span> <span class="typ-escape">:=</span> B<span class="typ-math-op">^</span>+ <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/79814838a321e86e80ee113a14074b8f.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The content to style.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/math/roots
  title: 根
  description: roots 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: ''
    name: ''
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-root
      name: Root
      children:
      - id: functions-root-index
        name: index
        children: []
      - id: functions-root-radicand
        name: radicand
        children: []
    - id: functions-sqrt
      name: Square Root
      children:
      - id: functions-sqrt-radicand
        name: radicand
        children: []
  body:
    kind: group
    content:
      name: roots
      title: 根
      details: |-
        <p>平方根和非平方根。</p>
        <h2>示例</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">sqrt</span><span class="typ-punct">(</span>3 <span class="typ-escape">-</span> 2 <span class="typ-func">sqrt</span><span class="typ-punct">(</span>2<span class="typ-punct">)</span><span class="typ-punct">)</span> = <span class="typ-func">sqrt</span><span class="typ-punct">(</span>2<span class="typ-punct">)</span> <span class="typ-escape">-</span> 1 <span class="typ-math-delim">$</span>
        <span class="typ-math-delim">$</span> <span class="typ-func">root</span><span class="typ-punct">(</span>3<span class="typ-punct">,</span> x<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/5f6156e04c9fbbe6376dbcd9a88490f3.png" alt="Preview" width="480" height="190"/></div></div>
      functions:
      - path:
        - math
        name: root
        title: Root
        keywords: []
        oneliner: A general root.
        element: true
        details: <p>A general root.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">root</span><span class="typ-punct">(</span>3<span class="typ-punct">,</span> x<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/7aa00673dcb0afc96f8085fbc5ed7841.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: index
          details: <p>Which root of the radicand to take.</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: true
          named: false
          required: false
          variadic: false
          settable: true
        - name: radicand
          details: <p>The expression to take the root of.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: sqrt
        title: Square Root
        keywords: []
        oneliner: A square root.
        element: false
        details: <p>A square root.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">sqrt</span><span class="typ-punct">(</span>3 <span class="typ-escape">-</span> 2 <span class="typ-func">sqrt</span><span class="typ-punct">(</span>2<span class="typ-punct">)</span><span class="typ-punct">)</span> = <span class="typ-func">sqrt</span><span class="typ-punct">(</span>2<span class="typ-punct">)</span> <span class="typ-escape">-</span> 1 <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/e7f4a669bc34f013309287acbb8f3c05.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: radicand
          details: <p>The expression to take the square root of.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
  children: []
- route: /docs/reference/math/attach
  title: 附加
  description: attach 函数族的文档.
  part: null
  outline:
  - id: summary
    name: Summary
    children: []
  - id: ''
    name: ''
    children: []
  - id: ''
    name: ''
    children: []
  - id: functions
    name: Functions
    children:
    - id: functions-attach
      name: Attach
      children:
      - id: functions-attach-base
        name: base
        children: []
      - id: functions-attach-t
        name: t
        children: []
      - id: functions-attach-b
        name: b
        children: []
      - id: functions-attach-tl
        name: tl
        children: []
      - id: functions-attach-bl
        name: bl
        children: []
      - id: functions-attach-tr
        name: tr
        children: []
      - id: functions-attach-br
        name: br
        children: []
    - id: functions-scripts
      name: Scripts
      children:
      - id: functions-scripts-body
        name: body
        children: []
    - id: functions-limits
      name: Limits
      children:
      - id: functions-limits-body
        name: body
        children: []
      - id: functions-limits-inline
        name: inline
        children: []
  body:
    kind: group
    content:
      name: attach
      title: 附加
      details: |-
        <p>下标、上标和限制。</p>
        <p>附件可以显示为上/下标或限制。Typst 会根据基数自动决定哪个更适合，但您还可以使用 <code>scripts</code> 和 <code>limits</code> 函数手动控制。</p>
        <h2>示例</h2>
        <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span><span class="typ-punct">(</span>i=0<span class="typ-punct">)</span><span class="typ-math-op">^</span>n a<span class="typ-math-op">_</span>i = 2<span class="typ-math-op">^</span><span class="typ-punct">(</span>1+i<span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
        </code></pre><div class="preview"><img src="/assets/docs/575e598ddfc00ee58c3fd2f8379f5718.png" alt="Preview" width="480" height="190"/></div></div>
        <h2>语法</h2>
        <p>此函数还具有用于在基数之后附加的专用语法：使用下划线 (<code>_</code>) 表示下标，即底部附件，使用脱帽 (<code>^</code>) 表示上标，即顶部附件。</p>
      functions:
      - path:
        - math
        name: attach
        title: Attach
        keywords: []
        oneliner: A base with optional attachments.
        element: true
        details: <p>A base with optional attachments.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">attach</span><span class="typ-punct">(</span>
            <span class="typ-pol">Pi</span><span class="typ-punct">,</span> t<span class="typ-punct">:</span> <span class="typ-pol">alpha</span><span class="typ-punct">,</span> b<span class="typ-punct">:</span> <span class="typ-pol">beta</span><span class="typ-punct">,</span>
            tl<span class="typ-punct">:</span> 1<span class="typ-punct">,</span> tr<span class="typ-punct">:</span> 2+3<span class="typ-punct">,</span> bl<span class="typ-punct">:</span> 4+5<span class="typ-punct">,</span> br<span class="typ-punct">:</span> 6<span class="typ-punct">,</span>
          <span class="typ-punct">)</span> <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/6168007e6f554f79c047e406044982de.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: base
          details: <p>The base to which things are attached.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: t
          details: |-
            <p>The top attachment, smartly positioned at top-right or above the base.</p>
            <p>You can wrap the base in <code><span class="typ-func">limits</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> or <code><span class="typ-func">scripts</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> to override the
            smart positioning.</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        - name: b
          details: |-
            <p>The bottom attachment, smartly positioned at the bottom-right or below
            the base.</p>
            <p>You can wrap the base in <code><span class="typ-func">limits</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> or <code><span class="typ-func">scripts</span><span class="typ-punct">(</span><span class="typ-punct">)</span></code> to override the
            smart positioning.</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        - name: tl
          details: <p>The top-left attachment (before the base).</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        - name: bl
          details: <p>The bottom-left attachment (before base).</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        - name: tr
          details: <p>The top-right attachment (after the base).</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        - name: br
          details: <p>The bottom-right attachment (after the base).</p>
          example: null
          types:
          - none
          - content
          strings: []
          default: <code><span class="typ-key">none</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        returns:
        - content
        scope: []
      - path:
        - math
        name: scripts
        title: Scripts
        keywords: []
        oneliner: Forces a base to display attachments as scripts.
        element: true
        details: <p>Forces a base to display attachments as scripts.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">scripts</span><span class="typ-punct">(</span><span class="typ-pol">sum</span><span class="typ-punct">)</span><span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-escape">!=</span> <span class="typ-pol">sum</span><span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/fd2fa3481f1f6d8947d1a6310cd5e827.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The base to attach the scripts to.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        returns:
        - content
        scope: []
      - path:
        - math
        name: limits
        title: Limits
        keywords: []
        oneliner: Forces a base to display attachments as limits.
        element: true
        details: <p>Forces a base to display attachments as limits.</p>
        example: |-
          <div class="previewed-code"><pre><code><span class="typ-math-delim">$</span> <span class="typ-func">limits</span><span class="typ-punct">(</span>A<span class="typ-punct">)</span><span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-escape">!=</span> A<span class="typ-math-op">_</span>1<span class="typ-math-op">^</span>2 <span class="typ-math-delim">$</span>
          </code></pre><div class="preview"><img src="/assets/docs/a60dcf87b7850ffbb2f702c04761242c.png" alt="Preview" width="480" height="190"/></div></div>
        self: false
        params:
        - name: body
          details: <p>The base to attach the limits to.</p>
          example: null
          types:
          - content
          strings: []
          default: null
          positional: true
          named: false
          required: true
          variadic: false
          settable: false
        - name: inline
          details: |-
            <p>Whether to also force limits in inline equations.</p>
            <p>When applying limits globally (e.g., through a show rule), it is
            typically a good idea to disable this.</p>
          example: null
          types:
          - bool
          strings: []
          default: <code><span class="typ-key">true</span></code>
          positional: false
          named: true
          required: false
          variadic: false
          settable: true
        returns:
        - content
        scope: []
  children: []
