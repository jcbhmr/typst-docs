- name: variants
  title: 变体
  category: math
  path: ["math"]
  filter: ["serif", "sans", "frak", "mono", "bb", "cal"]
  details: |
    公式中的备用字体。

    这些函数与 [`text`]($text) 函数不同，因为数学字体包含每个字母的多个变体。

- name: styles
  title: 样式
  category: math
  path: ["math"]
  filter: ["upright", "italic", "bold"]
  details: |
    公式中的备用字形。

    这些函数与 [`text`]($text) 函数不同，因为数学字体包含每个字母的多个变体。

- name: sizes
  title: 大小
  category: math
  path: ["math"]
  filter: ["display", "inline", "script", "sscript"]
  details: |
    强制公式中表达式的大小样式。

    这些函数允许手动配置方程元素的大小，使其看起来像在显示/行内方程中使用或像在根或上/下标中使用一样。

- name: underover
  title: 下方/上方
  category: math
  path: ["math"]
  filter: [
    "underline",
    "overline",
    "underbrace",
    "overbrace",
    "underbracket",
    "overbracket",
  ]
  details: |
    方程的部分上方或下方的定界符。

    大括号和方括号还允许在它们自己的下方或上方添加可选的注释。

- name: roots
  title: 根
  category: math
  path: ["math"]
  filter: ["root", "sqrt"]
  details: |
    平方根和非平方根。

    # 示例
    ```example
    $ sqrt(3 - 2 sqrt(2)) = sqrt(2) - 1 $
    $ root(3, x) $
    ```

- name: attach
  title: 附加
  category: math
  path: ["math"]
  filter: ["attach", "scripts", "limits"]
  details: |
    下标、上标和限制。

    附件可以显示为上/下标或限制。Typst 会根据基数自动决定哪个更适合，但您还可以使用 `scripts` 和 `limits` 函数手动控制。

    # 示例
    ```example
    $ sum_(i=0)^n a_i = 2^(1+i) $
    ```

    # 语法
    此函数还具有用于在基数之后附加的专用语法：使用下划线 (`_`) 表示下标，即底部附件，使用脱帽 (`^`) 表示上标，即顶部附件。

- name: lr
  title: 左/右
  category: math
  path: ["math"]
  filter: ["lr", "mid", "abs", "norm", "floor", "ceil", "round"]
  details: |
    定界符匹配。

    `lr` 函数允许您匹配两个定界符并按其包含的内容缩放它们。虽然在语法上匹配的定界符也会自动进行，但 `lr` 允许您匹配两个任意的定界符并精确控制它们的大小。除了 `lr` 函数外，Typst 还提供了一些创建绝对值、上取整和下取整值以及范数的定界符配对的其他函数。

    # 示例
    ```example
    $ [a, b/2] $
    $ lr(]sum_(x=1)^n] x, size: #50%) $
    $ abs((x + y) / 2) $
    ```

- name: calc
  title: 计算
  category: foundations
  path: ["calc"]
  details: |
    用于计算和处理数字值的模块。

    这些定义是 `calc` 模块的一部分，不会默认导入。除了下面列出的功能之外，`calc` 模块还定义了常量 `pi`、`tau`、`e`、`inf` 和 `nan`。

- name: sys
  title: 系统
  category: foundations
  path: ["sys"]
  details: |
    用于系统交互的模块。

    目前，此模块定义了一个项目：`sys.version` 常量（类型为 [`version`]($version)），指定当前活动的 Typst 编译器版本。

- name: sym
  title: 通用
  category: symbols
  path: ["sym"]
  details: |
    命名的通用符号。

    例如，`#sym.arrow` 生成 → 符号。在 [公式]($category/math) 中，这些符号可以在没有 `#sym.` 前缀的情况下使用。

    积分中的 `dx` 中的 `d` 可以写为 `[$dif x$]`。在数学公式之外，`dif` 可以作为 `math.dif` 访问。

- name: emoji
  title: 表情符号
  category: symbols
  path: ["emoji"]
  details: |
    命名的表情符号。

    例如，`#emoji.face` 生成 😀 表情符号。如果经常使用某些表情符号，还可以从 `emoji` 模块导入它们（`[#import emoji: face]`）以在没有 `#emoji.` 前缀的情况下使用它们。
