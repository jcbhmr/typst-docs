%YAML 1.2
---
# - https://www.sublimetext.com/docs/syntax.html
# - https://typst.app/docs/reference/syntax
name: Typst
scope: source.typ
version: 2

file_extensions:
  - typ

variables:
  bold_asterisk_begin: |-
    (?x:
         \* {{no_space_nor_punct}}
    | \B \* {{no_space_but_punct}}
    )
  bold_italic_begin: |-
    (?x:
         _ {{no_space_nor_punct}}
    | \B _ {{no_space_but_punct}}
    )
  # not followed by Unicode whitespace and not followed by a Unicode punctuation character
  no_space_nor_punct: (?![\s*\p{P}])
  # not followed by Unicode whitespace and followed by a Unicode punctuation character
  no_space_but_punct: (?=[[^\s*]&&\p{P}])

  html_entity: '&([a-zA-Z0-9]+|#\d+|#[Xx]\h+);'

  no_escape_behind: '(?<![^\\]\\)(?<![\\]{3})'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    - include: headings
    - include: list
    - include: enum
    - include: terms
    - include: scripting
    - include: inlines

  scripting:

    - include: scripting-inlines

  scripting-inlines:
    - match: '(#\w+)(\[)'
      captures:
        1: variable.function.typ
        2: punctuation.definition.generic.begin.typ
      push: scripting-inline-content
    - match: '(#\w+)(\.)(\w+)(\()'
      captures:
        1: variable.language.typ
        2: punctuation.accessor.dot.typ
        3: variable.function.typ
        4: punctuation.definition.group.begin.typ
      push: scripting-parent-content
    - match: '(#\w+)(\.)(\w+)'
      captures:
        1: variable.language.typ
        2: punctuation.accessor.dot.typ
        3: variable.language.typ
    - match: '(#)'
      scope: punctuation.accessor.typ

  scripting-parent-content:
    - match: '\)'
      scope: punctuation.definition.group.end.typ
      pop: true

  scripting-inline-content:
    - match: '\]'
      scope: punctuation.definition.generic.end.typ
      pop: true
    - include: inlines

  terms:
    - match: '^(/)\s*(\w+)(:)'
      scope: markup.terms.typ
      captures:
        1: punctuation.definition.term.typ
        2: entity.name.enum.typ
        3: punctuation.separator.key-value.typ

  headings:
    - match: '^(=+)\s*'
      scope: markup.heading.typ
      captures:
        1: punctuation.definition.heading.begin.typ
      push: headings-content

  headings-content:
    - meta_scope: markup.heading.typ
    - meta_content_scope: entity.name.section.typ
    - match: '$\n?'
      pop: true
    - include: inlines

  inlines:
    - include: hard-line-breaks
    - include: bold
    - include: raw
    - include: link
    - include: label
    - include: ref
    - include: math
    - include: symbols

  symbols:
    - match: '/=|\*=|-=|\+=|\b(or|and|not in|not|in)\b|>=|>|<=|<|!=|==|-|\+|/|\*|\+|-'
      scope: keyword.operator.typ
    - match: '~|---'
      scope: constant.other.typ

  hard-line-breaks:
    - match: (\\)\n
      captures:
        1: constant.character.escape.typ

  math:
    - match: '(\$)(?!\$)'
      scope:
        markup.math.inline.typ
        text.tex.latex.embeded.typ
        punctuation.definition.math.begin.latex
      embed: math-content
      embed_scope:
        markup.math.inline.typ
        text.tex.latex.embeded.typ
      escape: '{{no_escape_behind}}\$'
      escape_captures:
        0: markup.math.inline.typ
           text.tex.latex.embeded.typ
           punctuation.definition.math.end.latex

  math-content:
    - include: scope:text.tex.latex#macros
    - include: scope:text.tex.latex#math-content

  enum:
    - match: '^\s*([+]|\d{1,9}([.)]))\s+'
      captures:
        1: markup.list.numbered.bullet.typ punctuation.definition.list_item.typ
      push: enum-content

  enum-content:
    - meta_scope: markup.list.unnumbered.typ
    - match: '$\n?'
      pop: true
    - include: inlines

  list:
    - match: '^\s*([-])\s+'
      captures:
        1: markup.list.unnumbered.bullet.typ punctuation.definition.list_item.typ
      push: list-content

  list-content:
    - meta_scope: markup.list.unnumbered.typ
    - match: '$\n?'
      pop: true
    - include: inlines

  label:
    - match: '<[_\w]+>'
      scope: storage.modifier.label.typ

  ref:
    - match: '@[_\w]+'
      scope: variable.other.readwrite.typ punctuation.definition.variable.typ
      push:
        - match: '\['
          scope: punctuation.definition.generic.begin.typ
          push:
            - match: '\]'
              scope: punctuation.definition.generic.end.typ
              pop: true
            - include: inlines
        - match: ''
          pop: true

  bold:
    - match: '{{bold_asterisk_begin}}'
      scope: punctuation.definition.bold.begin.typ
      push: bold-asterisk
    - match: '{{bold_italic_begin}}'
      scope: punctuation.definition.italic.begin.typ
      push: bold-italic

  bold-asterisk:
    - meta_scope: markup.bold.typ
    - match: '\*'
      scope: punctuation.definition.bold.end.typ
      pop: true
    - include: inlines

  bold-italic:
    - meta_scope: markup.italic.typ
    - match: '_'
      scope: punctuation.definition.italic.end.typ
      pop: true
    - include: inlines

  link:
    - match: 'https?(://)[-\w]+'
      captures:
        1: punctuation.separator.path.typ
      push: link-content

  link-content:
    - meta_scope: markup.underline.link.typ
    - match: (?=(?:\)|(?:{{html_entity}})*)[?!.,:*_~]*[\s<])
      pop: true
    - include: link-common

  link-group:
    - match: '\)'
      pop: true
    - match: '(?=(?:{{html_entity}})*[?!.,:*_~]*[\s<])'
      pop: true
    - include: link-common

  link-common:
    - match: '\('
      push: link-group
    - match: '[/&?#]'
      scope: punctuation.separator.path.typ
    - match: (%)\h{2}
      scope: constant.character.escape.url.typ
      captures:
        1: punctuation.definition.escape.typ

  raw:
    - match: (?=`{3,})
      push: fenced-code-block-content
    - match: '(`)(?!`)'
      scope: punctuation.definition.raw.begin.typ
      push: raw-body

  raw-body:
    - meta_scope: markup.raw.inline.typ
    - match: '\1(?!`)'
      scope: punctuation.definition.raw.end.typ
      pop: true
    - match: '`+'
    - match: '^\s*$\n?'
      scope: invalid.illegal.non-terminated.raw.typ
      pop: true

  fenced-code-block-content:
    - match: '$'
      pop: true
    - include: fenced-syntaxes
    - include: fenced-raw

  fenced-syntaxes:
    - include: fenced-c
    - include: fenced-rust

  fenced-c:
    - match: '(`{3,})((?i:c|h))$\n?'
      captures:
        1: punctuation.definition.raw.code-fence.begin.typ
        2: constant.other.language-name.typ
      embed: scope:source.c
      embed_scope:
        markup.raw.code-fence.c.typ
        source.c
      escape: '^(\1)\s*$'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typ

  fenced-rust:
    - match: '(`{3,})((?i:rust|rs))$\n?'
      captures:
        1: punctuation.definition.raw.code-fence.begin.typ
        2: constant.other.language-name.typ
      embed: scope:source.rust
      embed_scope:
        markup.raw.code-fence.rust.typ
        source.rust
      escape: '^(\1)\s*$'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typ

  fenced-raw:
    - match: '(`{3,})([[:alpha:]][^\s`]+)?$\n?'
      captures:
        1: punctuation.definition.raw.code-fence.begin.typ
        2: constant.other.language-name.typ
      push: fenced-raw-content

  fenced-raw-content:
    - meta_content_scope: markup.raw.code-fence.typ
    - match: '^(\1)\s*$'
      captures:
        1: punctuation.definition.raw.code-fence.end.typ
      pop: true

  comments:
    - match: '//.*$\n?'
      scope: punctuation.definition.comment.typ comment.line.typ

    - match: '^/\*'
      scope: punctuation.definition.comment.begin.typ
      push:
        - meta_scope: comment.block.typ
        - match: '\*/'
          scope: punctuation.definition.comment.end.typ
          pop: true
        - match: '^\s*(\*)(?!/)'
          captures:
            1: punctuation.definition.comment.typ
    - match: '\*/(?!\*)'
      scope: invalid.illegal.stray-comment-end.typ